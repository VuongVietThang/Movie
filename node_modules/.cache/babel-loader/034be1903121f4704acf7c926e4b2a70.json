{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\n\nvar getContainer = function (container) {\n  if (container) {\n    return typeof container === 'function' ? container() : container;\n  }\n\n  return document.body;\n};\n\nvar CConditionalPortal = function (_a) {\n  var children = _a.children,\n      container = _a.container,\n      portal = _a.portal;\n\n  var _b = useState(null),\n      _container = _b[0],\n      setContainer = _b[1];\n\n  useEffect(function () {\n    portal && setContainer(getContainer(container) || document.body);\n  }, [container, portal]);\n  return typeof window !== 'undefined' && portal && _container ? createPortal(children, _container) : React.createElement(React.Fragment, null, children);\n};\n\nCConditionalPortal.propTypes = {\n  children: PropTypes.node,\n  container: PropTypes.any,\n  // HTMLElement\n  portal: PropTypes.bool.isRequired\n};\nCConditionalPortal.displayName = 'CConditionalPortal';\nexport { CConditionalPortal };","map":{"version":3,"mappings":";;;;AAIA,IAAMA,YAAY,GAAG,UACnBC,SADmB,EACsE;AAEzF,MAAIA,SAAJ,EAAe;AACb,WAAO,OAAOA,SAAP,KAAqB,UAArB,GAAkCA,SAAS,EAA3C,GAAgDA,SAAvD;;;AAGF,SAAOC,QAAQ,CAACC,IAAhB;AACD,CARD;;AA2BO,IAAMC,kBAAkB,GAAgC,UAACC,EAAD,EAI9D;AAHC,cAAQ,cAAR;AAAA,MACAJ,SAAS,eADT;AAAA,MAEAK,MAAM,YAFN;;AAIM,WAA6BC,QAAQ,CAAkC,IAAlC,CAArC;AAAA,MAACC,UAAU,QAAX;AAAA,MAAaC,YAAY,QAAzB;;AAENC,WAAS,CAAC;AACRJ,UAAM,IAAIG,YAAY,CAACT,YAAY,CAACC,SAAD,CAAZ,IAA2BC,QAAQ,CAACC,IAArC,CAAtB;AACD,GAFQ,EAEN,CAACF,SAAD,EAAYK,MAAZ,CAFM,CAAT;AAIA,SAAO,OAAOK,MAAP,KAAkB,WAAlB,IAAiCL,MAAjC,IAA2CE,UAA3C,GACLI,YAAY,CAACC,QAAD,EAAWL,UAAX,CADP,GAGLM,KAAG,cAAH,CAAGA,cAAH,EAAG,IAAH,EAAGD,QAAH,CAHF;AAKF,CAhBO;;AAkBPT,kBAAkB,CAACW,SAAnB,GAA+B;AAC7BF,UAAQ,EAAEG,SAAS,CAACC,IADS;AAE7BhB,WAAS,EAAEe,SAAS,CAACE,GAFQ;AAEL;AACxBZ,QAAM,EAAEU,SAAS,CAACG,IAAV,CAAeC;AAHM,CAA/B;AAMAhB,kBAAkB,CAACiB,WAAnB,GAAiC,oBAAjC","names":["getContainer","container","document","body","CConditionalPortal","_a","portal","useState","_container","setContainer","useEffect","window","createPortal","children","React","propTypes","PropTypes","node","any","bool","isRequired","displayName"],"sources":["C:\\wamp64\\www\\Movie\\node_modules\\@coreui\\react\\src\\components\\conditional-portal\\CConditionalPortal.tsx"],"sourcesContent":["import React, { FC, ReactNode, useEffect, useState } from 'react'\nimport { createPortal } from 'react-dom'\nimport PropTypes from 'prop-types'\n\nconst getContainer = (\n  container?: DocumentFragment | Element | (() => DocumentFragment | Element | null) | null,\n) => {\n  if (container) {\n    return typeof container === 'function' ? container() : container\n  }\n\n  return document.body\n}\n\nexport interface CConditionalPortalProps {\n  /**\n   * @ignore\n   */\n  children: ReactNode\n  /**\n   * An HTML element or function that returns a single element, with `document.body` as the default.\n   *\n   * @since 4.11.0\n   */\n  container?: DocumentFragment | Element | (() => DocumentFragment | Element | null) | null\n  /**\n   * Render some children into a different part of the DOM\n   */\n  portal: boolean\n}\n\nexport const CConditionalPortal: FC<CConditionalPortalProps> = ({\n  children,\n  container,\n  portal,\n}) => {\n  const [_container, setContainer] = useState<ReturnType<typeof getContainer>>(null)\n\n  useEffect(() => {\n    portal && setContainer(getContainer(container) || document.body)\n  }, [container, portal])\n\n  return typeof window !== 'undefined' && portal && _container ? (\n    createPortal(children, _container)\n  ) : (\n    <>{children}</>\n  )\n}\n\nCConditionalPortal.propTypes = {\n  children: PropTypes.node,\n  container: PropTypes.any, // HTMLElement\n  portal: PropTypes.bool.isRequired,\n}\n\nCConditionalPortal.displayName = 'CConditionalPortal'\n"]},"metadata":{},"sourceType":"module"}