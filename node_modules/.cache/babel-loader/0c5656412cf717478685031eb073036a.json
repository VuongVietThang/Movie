{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useContext, useRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CTabsContext } from './CTabsContext.js';\nimport { useForkedRef } from '../../hooks/useForkedRef.js';\nimport '@popperjs/core';\nimport getTransitionDurationFromElement from '../../utils/getTransitionDurationFromElement.js';\nimport Transition from '../../node_modules/react-transition-group/esm/Transition.js';\nvar CTabPanel = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      className = _a.className,\n      itemKey = _a.itemKey,\n      onHide = _a.onHide,\n      onShow = _a.onShow,\n      _b = _a.transition,\n      transition = _b === void 0 ? true : _b,\n      visible = _a.visible,\n      rest = __rest(_a, [\"children\", \"className\", \"itemKey\", \"onHide\", \"onShow\", \"transition\", \"visible\"]);\n\n  var _c = useContext(CTabsContext),\n      _activeItemKey = _c._activeItemKey,\n      id = _c.id;\n\n  var tabPaneRef = useRef(null);\n  var forkedRef = useForkedRef(ref, tabPaneRef);\n\n  var _d = useState(visible || _activeItemKey === itemKey),\n      _visible = _d[0],\n      setVisible = _d[1];\n\n  useEffect(function () {\n    visible !== undefined && setVisible(visible);\n  }, [visible]);\n  useEffect(function () {\n    setVisible(_activeItemKey === itemKey);\n  }, [_activeItemKey]);\n  return React.createElement(Transition, {\n    in: _visible,\n    nodeRef: tabPaneRef,\n    onEnter: onShow,\n    onExit: onHide,\n    timeout: tabPaneRef.current ? getTransitionDurationFromElement(tabPaneRef.current) : 0\n  }, function (state) {\n    return React.createElement(\"div\", __assign({\n      className: classNames('tab-pane', {\n        active: _visible,\n        fade: transition,\n        show: state === 'entered'\n      }, className),\n      id: \"\".concat(id).concat(itemKey, \"-tab-pane\"),\n      role: \"tabpanel\",\n      \"aria-labelledby\": \"\".concat(id).concat(itemKey, \"-tab\"),\n      tabIndex: 0,\n      ref: forkedRef\n    }, rest), children);\n  });\n});\nCTabPanel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  itemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  onHide: PropTypes.func,\n  onShow: PropTypes.func,\n  transition: PropTypes.bool,\n  visible: PropTypes.bool\n};\nCTabPanel.displayName = 'CTabPanel';\nexport { CTabPanel };","map":{"version":3,"mappings":";;;;;;;;;IAoCaA,SAAS,GAAGC,UAAU,CACjC,UAACC,EAAD,EAAwFC,GAAxF,EAA2F;AAAxF,cAAQ,cAAR;AAAA,MAAUC,SAAS,eAAnB;AAAA,MAAqBC,OAAO,aAA5B;AAAA,MAA8BC,MAAM,YAApC;AAAA,MAAsCC,MAAM,YAA5C;AAAA,MAA8CC,kBAA9C;AAAA,MAA8CC,UAAU,GAAGD,uBAAIA,EAA/D;AAAA,MAAiEE,OAAO,aAAxE;AAAA,MAA6EC,IAAI,GAAnFC,6FAAE;;AACK,WAAyBC,UAAU,CAACC,YAAD,CAAnC;AAAA,MAAEC,cAAc,oBAAhB;AAAA,MAAkBC,EAAE,QAApB;;AAEN,MAAMC,UAAU,GAAGC,MAAM,CAAC,IAAD,CAAzB;AACA,MAAMC,SAAS,GAAGC,YAAY,CAACjB,GAAD,EAAMc,UAAN,CAA9B;;AAEM,QAAyB,WAAQ,CAACP,OAAO,IAAIK,cAAc,KAAKV,OAA/B,CAAjC;AAAA,MAACgB,QAAQ,QAAT;AAAA,MAAWC,UAAU,QAArB;;AAENC,WAAS,CAAC;AACRb,WAAO,KAAKc,SAAZ,IAAyBF,UAAU,CAACZ,OAAD,CAAnC;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAIAa,WAAS,CAAC;AACRD,cAAU,CAACP,cAAc,KAAKV,OAApB,CAAV;AACD,GAFQ,EAEN,CAACU,cAAD,CAFM,CAAT;AAIA,SACEU,oBAACC,UAAD,EAAW;AACTC,MAAE,EAAEN,QADK;AAETO,WAAO,EAAEX,UAFA;AAGTY,WAAO,EAAEtB,MAHA;AAITuB,UAAM,EAAExB,MAJC;AAKTyB,WAAO,EAAEd,UAAU,CAACe,OAAX,GAAqBC,gCAAgC,CAAChB,UAAU,CAACe,OAAZ,CAArD,GAA4E;AAL5E,GAAX,EAOG,UAACE,KAAD,EAAW;AAAA,WACVT;AACErB,eAAS,EAAE+B,UAAU,CACnB,UADmB,EAEnB;AACEC,cAAM,EAAEf,QADV;AAEEgB,YAAI,EAAE5B,UAFR;AAGE6B,YAAI,EAAEJ,KAAK,KAAK;AAHlB,OAFmB,EAOnB9B,SAPmB,CADvB;AAUEY,QAAE,EAAE,UAAGA,EAAH,EAAKuB,MAAL,CAAQlC,OAAR,EAAe,WAAf,CAVN;AAWEmC,UAAI,EAAC,UAXP;AAYmB,mCAAGxB,EAAH,EAAQuB,MAAR,CAAQlC,OAAR,EAAqB,MAArB,CAZnB;AAaEoC,cAAQ,EAAE,CAbZ;AAcEtC,SAAG,EAAEgB;AAdP,OAeMR,IAfN,GAiBG+B,QAjBH,CADU;AAoBX,GA3BH,CADF;AA+BD,CAhDgC;AAmDnC1C,SAAS,CAAC2C,SAAV,GAAsB;AACpBD,UAAQ,EAAEE,SAAS,CAACC,IADA;AAEpBzC,WAAS,EAAEwC,SAAS,CAACE,MAFD;AAGpBzC,SAAO,EAAEuC,SAAS,CAACG,SAAV,CAAoB,CAACH,SAAS,CAACI,MAAX,EAAmBJ,SAAS,CAACE,MAA7B,CAApB,EAA0DG,UAH/C;AAIpB3C,QAAM,EAAEsC,SAAS,CAACM,IAJE;AAKpB3C,QAAM,EAAEqC,SAAS,CAACM,IALE;AAMpBzC,YAAU,EAAEmC,SAAS,CAACO,IANF;AAOpBzC,SAAO,EAAEkC,SAAS,CAACO;AAPC,CAAtB;AAUAnD,SAAS,CAACoD,WAAV,GAAwB,WAAxB","names":["CTabPanel","forwardRef","_a","ref","className","itemKey","onHide","onShow","_b","transition","visible","rest","__rest","useContext","CTabsContext","_activeItemKey","id","tabPaneRef","useRef","forkedRef","useForkedRef","_visible","setVisible","useEffect","undefined","React","Transition","in","nodeRef","onEnter","onExit","timeout","current","getTransitionDurationFromElement","state","classNames","active","fade","show","concat","role","tabIndex","children","propTypes","PropTypes","node","string","oneOfType","number","isRequired","func","bool","displayName"],"sources":["C:\\wamp64\\www\\Movie\\node_modules\\@coreui\\react\\src\\components\\tabs\\CTabPanel.tsx"],"sourcesContent":["import React, { HTMLAttributes, forwardRef, useContext, useEffect, useRef, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { Transition } from 'react-transition-group'\n\nimport { CTabsContext } from './CTabsContext'\nimport { useForkedRef } from '../../hooks'\nimport { getTransitionDurationFromElement } from '../../utils'\n\nexport interface CTabPanelProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Item key.\n   */\n  itemKey: number | string\n  /**\n   * Callback fired when the component requests to be hidden.\n   */\n  onHide?: () => void\n  /**\n   * Callback fired when the component requests to be shown.\n   */\n  onShow?: () => void\n  /**\n   * Enable fade in and fade out transition.\n   */\n  transition?: boolean\n  /**\n   * Toggle the visibility of component.\n   */\n  visible?: boolean\n}\n\nexport const CTabPanel = forwardRef<HTMLDivElement, CTabPanelProps>(\n  ({ children, className, itemKey, onHide, onShow, transition = true, visible, ...rest }, ref) => {\n    const { _activeItemKey, id } = useContext(CTabsContext)\n\n    const tabPaneRef = useRef(null)\n    const forkedRef = useForkedRef(ref, tabPaneRef)\n\n    const [_visible, setVisible] = useState(visible || _activeItemKey === itemKey)\n\n    useEffect(() => {\n      visible !== undefined && setVisible(visible)\n    }, [visible])\n\n    useEffect(() => {\n      setVisible(_activeItemKey === itemKey)\n    }, [_activeItemKey])\n\n    return (\n      <Transition\n        in={_visible}\n        nodeRef={tabPaneRef}\n        onEnter={onShow}\n        onExit={onHide}\n        timeout={tabPaneRef.current ? getTransitionDurationFromElement(tabPaneRef.current) : 0}\n      >\n        {(state) => (\n          <div\n            className={classNames(\n              'tab-pane',\n              {\n                active: _visible,\n                fade: transition,\n                show: state === 'entered',\n              },\n              className,\n            )}\n            id={`${id}${itemKey}-tab-pane`}\n            role=\"tabpanel\"\n            aria-labelledby={`${id}${itemKey}-tab`}\n            tabIndex={0}\n            ref={forkedRef}\n            {...rest}\n          >\n            {children}\n          </div>\n        )}\n      </Transition>\n    )\n  },\n)\n\nCTabPanel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  itemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  onHide: PropTypes.func,\n  onShow: PropTypes.func,\n  transition: PropTypes.bool,\n  visible: PropTypes.bool,\n}\n\nCTabPanel.displayName = 'CTabPanel'\n"]},"metadata":{},"sourceType":"module"}