{"ast":null,"code":"import _objectWithoutPropertiesLoose from '../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js';\nimport _inheritsLoose from '../../@babel/runtime/helpers/esm/inheritsLoose.js';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport config from './config.js';\nimport { timeoutsShape } from './utils/PropTypes.js';\nimport TransitionGroupContext from './TransitionGroupContext.js';\nimport { forceReflow } from './utils/reflow.js';\nvar UNMOUNTED = 'unmounted';\nvar EXITED = 'exited';\nvar ENTERING = 'entering';\nvar ENTERED = 'entered';\nvar EXITING = 'exiting';\n/**\n * The Transition component lets you describe a transition from one component\n * state to another _over time_ with a simple declarative API. Most commonly\n * it's used to animate the mounting and unmounting of a component, but can also\n * be used to describe in-place transition states as well.\n *\n * ---\n *\n * **Note**: `Transition` is a platform-agnostic base component. If you're using\n * transitions in CSS, you'll probably want to use\n * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)\n * instead. It inherits all the features of `Transition`, but contains\n * additional features necessary to play nice with CSS transitions (hence the\n * name of the component).\n *\n * ---\n *\n * By default the `Transition` component does not alter the behavior of the\n * component it renders, it only tracks \"enter\" and \"exit\" states for the\n * components. It's up to you to give meaning and effect to those states. For\n * example we can add styles to a component when it enters or exits:\n *\n * ```jsx\n * import { Transition } from 'react-transition-group';\n *\n * const duration = 300;\n *\n * const defaultStyle = {\n *   transition: `opacity ${duration}ms ease-in-out`,\n *   opacity: 0,\n * }\n *\n * const transitionStyles = {\n *   entering: { opacity: 1 },\n *   entered:  { opacity: 1 },\n *   exiting:  { opacity: 0 },\n *   exited:  { opacity: 0 },\n * };\n *\n * const Fade = ({ in: inProp }) => (\n *   <Transition in={inProp} timeout={duration}>\n *     {state => (\n *       <div style={{\n *         ...defaultStyle,\n *         ...transitionStyles[state]\n *       }}>\n *         I'm a fade Transition!\n *       </div>\n *     )}\n *   </Transition>\n * );\n * ```\n *\n * There are 4 main states a Transition can be in:\n *  - `'entering'`\n *  - `'entered'`\n *  - `'exiting'`\n *  - `'exited'`\n *\n * Transition state is toggled via the `in` prop. When `true` the component\n * begins the \"Enter\" stage. During this stage, the component will shift from\n * its current transition state, to `'entering'` for the duration of the\n * transition and then to the `'entered'` stage once it's complete. Let's take\n * the following example (we'll use the\n * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <Transition in={inProp} timeout={500}>\n *         {state => (\n *           // ...\n *         )}\n *       </Transition>\n *       <button onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the button is clicked the component will shift to the `'entering'` state\n * and stay there for 500ms (the value of `timeout`) before it finally switches\n * to `'entered'`.\n *\n * When `in` is `false` the same thing happens except the state moves from\n * `'exiting'` to `'exited'`.\n */\n\nvar Transition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Transition, _React$Component);\n\n  function Transition(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears\n\n    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;\n    var initialStatus;\n    _this.appearStatus = null;\n\n    if (props.in) {\n      if (appear) {\n        initialStatus = EXITED;\n        _this.appearStatus = ENTERING;\n      } else {\n        initialStatus = ENTERED;\n      }\n    } else {\n      if (props.unmountOnExit || props.mountOnEnter) {\n        initialStatus = UNMOUNTED;\n      } else {\n        initialStatus = EXITED;\n      }\n    }\n\n    _this.state = {\n      status: initialStatus\n    };\n    _this.nextCallback = null;\n    return _this;\n  }\n\n  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {\n    var nextIn = _ref.in;\n\n    if (nextIn && prevState.status === UNMOUNTED) {\n      return {\n        status: EXITED\n      };\n    }\n\n    return null;\n  } // getSnapshotBeforeUpdate(prevProps) {\n  //   let nextStatus = null\n  //   if (prevProps !== this.props) {\n  //     const { status } = this.state\n  //     if (this.props.in) {\n  //       if (status !== ENTERING && status !== ENTERED) {\n  //         nextStatus = ENTERING\n  //       }\n  //     } else {\n  //       if (status === ENTERING || status === ENTERED) {\n  //         nextStatus = EXITING\n  //       }\n  //     }\n  //   }\n  //   return { nextStatus }\n  // }\n  ;\n\n  var _proto = Transition.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateStatus(true, this.appearStatus);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var nextStatus = null;\n\n    if (prevProps !== this.props) {\n      var status = this.state.status;\n\n      if (this.props.in) {\n        if (status !== ENTERING && status !== ENTERED) {\n          nextStatus = ENTERING;\n        }\n      } else {\n        if (status === ENTERING || status === ENTERED) {\n          nextStatus = EXITING;\n        }\n      }\n    }\n\n    this.updateStatus(false, nextStatus);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.cancelNextCallback();\n  };\n\n  _proto.getTimeouts = function getTimeouts() {\n    var timeout = this.props.timeout;\n    var exit, enter, appear;\n    exit = enter = appear = timeout;\n\n    if (timeout != null && typeof timeout !== 'number') {\n      exit = timeout.exit;\n      enter = timeout.enter; // TODO: remove fallback for next major\n\n      appear = timeout.appear !== undefined ? timeout.appear : enter;\n    }\n\n    return {\n      exit: exit,\n      enter: enter,\n      appear: appear\n    };\n  };\n\n  _proto.updateStatus = function updateStatus(mounting, nextStatus) {\n    if (mounting === void 0) {\n      mounting = false;\n    }\n\n    if (nextStatus !== null) {\n      // nextStatus will always be ENTERING or EXITING.\n      this.cancelNextCallback();\n\n      if (nextStatus === ENTERING) {\n        if (this.props.unmountOnExit || this.props.mountOnEnter) {\n          var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this); // https://github.com/reactjs/react-transition-group/pull/749\n          // With unmountOnExit or mountOnEnter, the enter animation should happen at the transition between `exited` and `entering`.\n          // To make the animation happen,  we have to separate each rendering and avoid being processed as batched.\n\n          if (node) forceReflow(node);\n        }\n\n        this.performEnter(mounting);\n      } else {\n        this.performExit();\n      }\n    } else if (this.props.unmountOnExit && this.state.status === EXITED) {\n      this.setState({\n        status: UNMOUNTED\n      });\n    }\n  };\n\n  _proto.performEnter = function performEnter(mounting) {\n    var _this2 = this;\n\n    var enter = this.props.enter;\n    var appearing = this.context ? this.context.isMounting : mounting;\n\n    var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing],\n        maybeNode = _ref2[0],\n        maybeAppearing = _ref2[1];\n\n    var timeouts = this.getTimeouts();\n    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED\n    // if we are mounting and running this it means appear _must_ be set\n\n    if (!mounting && !enter || config.disabled) {\n      this.safeSetState({\n        status: ENTERED\n      }, function () {\n        _this2.props.onEntered(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onEnter(maybeNode, maybeAppearing);\n    this.safeSetState({\n      status: ENTERING\n    }, function () {\n      _this2.props.onEntering(maybeNode, maybeAppearing);\n\n      _this2.onTransitionEnd(enterTimeout, function () {\n        _this2.safeSetState({\n          status: ENTERED\n        }, function () {\n          _this2.props.onEntered(maybeNode, maybeAppearing);\n        });\n      });\n    });\n  };\n\n  _proto.performExit = function performExit() {\n    var _this3 = this;\n\n    var exit = this.props.exit;\n    var timeouts = this.getTimeouts();\n    var maybeNode = this.props.nodeRef ? undefined : ReactDOM.findDOMNode(this); // no exit animation skip right to EXITED\n\n    if (!exit || config.disabled) {\n      this.safeSetState({\n        status: EXITED\n      }, function () {\n        _this3.props.onExited(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onExit(maybeNode);\n    this.safeSetState({\n      status: EXITING\n    }, function () {\n      _this3.props.onExiting(maybeNode);\n\n      _this3.onTransitionEnd(timeouts.exit, function () {\n        _this3.safeSetState({\n          status: EXITED\n        }, function () {\n          _this3.props.onExited(maybeNode);\n        });\n      });\n    });\n  };\n\n  _proto.cancelNextCallback = function cancelNextCallback() {\n    if (this.nextCallback !== null) {\n      this.nextCallback.cancel();\n      this.nextCallback = null;\n    }\n  };\n\n  _proto.safeSetState = function safeSetState(nextState, callback) {\n    // This shouldn't be necessary, but there are weird race conditions with\n    // setState callbacks and unmounting in testing, so always make sure that\n    // we can cancel any pending setState callbacks after we unmount.\n    callback = this.setNextCallback(callback);\n    this.setState(nextState, callback);\n  };\n\n  _proto.setNextCallback = function setNextCallback(callback) {\n    var _this4 = this;\n\n    var active = true;\n\n    this.nextCallback = function (event) {\n      if (active) {\n        active = false;\n        _this4.nextCallback = null;\n        callback(event);\n      }\n    };\n\n    this.nextCallback.cancel = function () {\n      active = false;\n    };\n\n    return this.nextCallback;\n  };\n\n  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {\n    this.setNextCallback(handler);\n    var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);\n    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;\n\n    if (!node || doesNotHaveTimeoutOrListener) {\n      setTimeout(this.nextCallback, 0);\n      return;\n    }\n\n    if (this.props.addEndListener) {\n      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],\n          maybeNode = _ref3[0],\n          maybeNextCallback = _ref3[1];\n\n      this.props.addEndListener(maybeNode, maybeNextCallback);\n    }\n\n    if (timeout != null) {\n      setTimeout(this.nextCallback, timeout);\n    }\n  };\n\n  _proto.render = function render() {\n    var status = this.state.status;\n\n    if (status === UNMOUNTED) {\n      return null;\n    }\n\n    var _this$props = this.props,\n        children = _this$props.children;\n    _this$props.in;\n    _this$props.mountOnEnter;\n    _this$props.unmountOnExit;\n    _this$props.appear;\n    _this$props.enter;\n    _this$props.exit;\n    _this$props.timeout;\n    _this$props.addEndListener;\n    _this$props.onEnter;\n    _this$props.onEntering;\n    _this$props.onEntered;\n    _this$props.onExit;\n    _this$props.onExiting;\n    _this$props.onExited;\n    _this$props.nodeRef;\n\n    var childProps = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"in\", \"mountOnEnter\", \"unmountOnExit\", \"appear\", \"enter\", \"exit\", \"timeout\", \"addEndListener\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"nodeRef\"]);\n\n    return (\n      /*#__PURE__*/\n      // allows for nested Transitions\n      React.createElement(TransitionGroupContext.Provider, {\n        value: null\n      }, typeof children === 'function' ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps))\n    );\n  };\n\n  return Transition;\n}(React.Component);\n\nTransition.contextType = TransitionGroupContext;\nTransition.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * A React reference to DOM element that need to transition:\n   * https://stackoverflow.com/a/51127130/4671932\n   *\n   *   - When `nodeRef` prop is used, `node` is not passed to callback functions\n   *      (e.g. `onEnter`) because user already has direct access to the node.\n   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new\n   *     `nodeRef` need to be provided to `Transition` with changed `key` prop\n   *     (see\n   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).\n   */\n  nodeRef: PropTypes.shape({\n    current: typeof Element === 'undefined' ? PropTypes.any : function (propValue, key, componentName, location, propFullName, secret) {\n      var value = propValue[key];\n      return PropTypes.instanceOf(value && 'ownerDocument' in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);\n    }\n  }),\n\n  /**\n   * A `function` child can be used instead of a React element. This function is\n   * called with the current transition status (`'entering'`, `'entered'`,\n   * `'exiting'`, `'exited'`), which can be used to apply context\n   * specific props to a component.\n   *\n   * ```jsx\n   * <Transition in={this.state.in} timeout={150}>\n   *   {state => (\n   *     <MyComponent className={`fade fade-${state}`} />\n   *   )}\n   * </Transition>\n   * ```\n   */\n  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,\n\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in: PropTypes.bool,\n\n  /**\n   * By default the child component is mounted immediately along with\n   * the parent `Transition` component. If you want to \"lazy mount\" the component on the\n   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay\n   * mounted, even on \"exited\", unless you also specify `unmountOnExit`.\n   */\n  mountOnEnter: PropTypes.bool,\n\n  /**\n   * By default the child component stays mounted after it reaches the `'exited'` state.\n   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.\n   */\n  unmountOnExit: PropTypes.bool,\n\n  /**\n   * By default the child component does not perform the enter transition when\n   * it first mounts, regardless of the value of `in`. If you want this\n   * behavior, set both `appear` and `in` to `true`.\n   *\n   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop\n   * > only adds an additional enter transition. However, in the\n   * > `<CSSTransition>` component that first enter transition does result in\n   * > additional `.appear-*` classes, that way you can choose to style it\n   * > differently.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * Enable or disable enter transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * Enable or disable exit transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * The duration of the transition, in milliseconds.\n   * Required unless `addEndListener` is provided.\n   *\n   * You may specify a single timeout for all transitions:\n   *\n   * ```jsx\n   * timeout={500}\n   * ```\n   *\n   * or individually:\n   *\n   * ```jsx\n   * timeout={{\n   *  appear: 500,\n   *  enter: 300,\n   *  exit: 500,\n   * }}\n   * ```\n   *\n   * - `appear` defaults to the value of `enter`\n   * - `enter` defaults to `0`\n   * - `exit` defaults to `0`\n   *\n   * @type {number | { enter?: number, exit?: number, appear?: number }}\n   */\n  timeout: function timeout(props) {\n    var pt = timeoutsShape;\n    if (!props.addEndListener) pt = pt.isRequired;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return pt.apply(void 0, [props].concat(args));\n  },\n\n  /**\n   * Add a custom transition end trigger. Called with the transitioning\n   * DOM node and a `done` callback. Allows for more fine grained transition end\n   * logic. Timeouts are still used as a fallback if provided.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * ```jsx\n   * addEndListener={(node, done) => {\n   *   // use the css transitionend event to mark the finish of a transition\n   *   node.addEventListener('transitionend', done, false);\n   * }}\n   * ```\n   */\n  addEndListener: PropTypes.func,\n\n  /**\n   * Callback fired before the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entered\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExited: PropTypes.func\n} : {}; // Name the function so it is clearer in the documentation\n\nfunction noop() {}\n\nTransition.defaultProps = {\n  in: false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  onEnter: noop,\n  onEntering: noop,\n  onEntered: noop,\n  onExit: noop,\n  onExiting: noop,\n  onExited: noop\n};\nTransition.UNMOUNTED = UNMOUNTED;\nTransition.EXITED = EXITED;\nTransition.ENTERING = ENTERING;\nTransition.ENTERED = ENTERED;\nTransition.EXITING = EXITING;\nexport { ENTERED, ENTERING, EXITED, EXITING, UNMOUNTED, Transition as default };","map":{"version":3,"mappings":"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","names":["UNMOUNTED","EXITED","ENTERING","ENTERED","EXITING","Transition","_React$Component","_inheritsLoose","props","context","_this","call","parentGroup","appear","isMounting","enter","initialStatus","appearStatus","in","unmountOnExit","mountOnEnter","state","status","nextCallback","getDerivedStateFromProps","_ref","prevState","nextIn","_proto","prototype","componentDidMount","updateStatus","componentDidUpdate","prevProps","nextStatus","componentWillUnmount","cancelNextCallback","getTimeouts","timeout","exit","undefined","mounting","node","nodeRef","current","ReactDOM","findDOMNode","forceReflow","performEnter","performExit","setState","_this2","appearing","_ref2","maybeNode","maybeAppearing","timeouts","enterTimeout","config","disabled","safeSetState","onEntered","onEnter","onEntering","onTransitionEnd","_this3","onExited","onExit","onExiting","cancel","nextState","callback","setNextCallback","_this4","active","event","handler","doesNotHaveTimeoutOrListener","addEndListener","setTimeout","_ref3","maybeNextCallback","render","_this$props","children","childProps","_objectWithoutPropertiesLoose","React","createElement","TransitionGroupContext","Provider","value","cloneElement","Children","only","Component","contextType","propTypes","process","env","NODE_ENV","PropTypes","shape","Element","any","propValue","key","componentName","location","propFullName","secret","instanceOf","ownerDocument","defaultView","oneOfType","func","isRequired","element","bool","pt","timeoutsShape","_len","arguments","length","args","Array","_key","apply","concat","noop","defaultProps"],"sources":["C:\\wamp64\\www\\Movie\\node_modules\\@coreui\\react-transition-group\\esm\\Transition.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport config from './config';\nimport { timeoutsShape } from './utils/PropTypes';\nimport TransitionGroupContext from './TransitionGroupContext';\nimport { forceReflow } from './utils/reflow';\nexport var UNMOUNTED = 'unmounted';\nexport var EXITED = 'exited';\nexport var ENTERING = 'entering';\nexport var ENTERED = 'entered';\nexport var EXITING = 'exiting';\n/**\n * The Transition component lets you describe a transition from one component\n * state to another _over time_ with a simple declarative API. Most commonly\n * it's used to animate the mounting and unmounting of a component, but can also\n * be used to describe in-place transition states as well.\n *\n * ---\n *\n * **Note**: `Transition` is a platform-agnostic base component. If you're using\n * transitions in CSS, you'll probably want to use\n * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)\n * instead. It inherits all the features of `Transition`, but contains\n * additional features necessary to play nice with CSS transitions (hence the\n * name of the component).\n *\n * ---\n *\n * By default the `Transition` component does not alter the behavior of the\n * component it renders, it only tracks \"enter\" and \"exit\" states for the\n * components. It's up to you to give meaning and effect to those states. For\n * example we can add styles to a component when it enters or exits:\n *\n * ```jsx\n * import { Transition } from 'react-transition-group';\n *\n * const duration = 300;\n *\n * const defaultStyle = {\n *   transition: `opacity ${duration}ms ease-in-out`,\n *   opacity: 0,\n * }\n *\n * const transitionStyles = {\n *   entering: { opacity: 1 },\n *   entered:  { opacity: 1 },\n *   exiting:  { opacity: 0 },\n *   exited:  { opacity: 0 },\n * };\n *\n * const Fade = ({ in: inProp }) => (\n *   <Transition in={inProp} timeout={duration}>\n *     {state => (\n *       <div style={{\n *         ...defaultStyle,\n *         ...transitionStyles[state]\n *       }}>\n *         I'm a fade Transition!\n *       </div>\n *     )}\n *   </Transition>\n * );\n * ```\n *\n * There are 4 main states a Transition can be in:\n *  - `'entering'`\n *  - `'entered'`\n *  - `'exiting'`\n *  - `'exited'`\n *\n * Transition state is toggled via the `in` prop. When `true` the component\n * begins the \"Enter\" stage. During this stage, the component will shift from\n * its current transition state, to `'entering'` for the duration of the\n * transition and then to the `'entered'` stage once it's complete. Let's take\n * the following example (we'll use the\n * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <Transition in={inProp} timeout={500}>\n *         {state => (\n *           // ...\n *         )}\n *       </Transition>\n *       <button onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the button is clicked the component will shift to the `'entering'` state\n * and stay there for 500ms (the value of `timeout`) before it finally switches\n * to `'entered'`.\n *\n * When `in` is `false` the same thing happens except the state moves from\n * `'exiting'` to `'exited'`.\n */\n\nvar Transition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Transition, _React$Component);\n\n  function Transition(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears\n\n    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;\n    var initialStatus;\n    _this.appearStatus = null;\n\n    if (props.in) {\n      if (appear) {\n        initialStatus = EXITED;\n        _this.appearStatus = ENTERING;\n      } else {\n        initialStatus = ENTERED;\n      }\n    } else {\n      if (props.unmountOnExit || props.mountOnEnter) {\n        initialStatus = UNMOUNTED;\n      } else {\n        initialStatus = EXITED;\n      }\n    }\n\n    _this.state = {\n      status: initialStatus\n    };\n    _this.nextCallback = null;\n    return _this;\n  }\n\n  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {\n    var nextIn = _ref.in;\n\n    if (nextIn && prevState.status === UNMOUNTED) {\n      return {\n        status: EXITED\n      };\n    }\n\n    return null;\n  } // getSnapshotBeforeUpdate(prevProps) {\n  //   let nextStatus = null\n  //   if (prevProps !== this.props) {\n  //     const { status } = this.state\n  //     if (this.props.in) {\n  //       if (status !== ENTERING && status !== ENTERED) {\n  //         nextStatus = ENTERING\n  //       }\n  //     } else {\n  //       if (status === ENTERING || status === ENTERED) {\n  //         nextStatus = EXITING\n  //       }\n  //     }\n  //   }\n  //   return { nextStatus }\n  // }\n  ;\n\n  var _proto = Transition.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateStatus(true, this.appearStatus);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var nextStatus = null;\n\n    if (prevProps !== this.props) {\n      var status = this.state.status;\n\n      if (this.props.in) {\n        if (status !== ENTERING && status !== ENTERED) {\n          nextStatus = ENTERING;\n        }\n      } else {\n        if (status === ENTERING || status === ENTERED) {\n          nextStatus = EXITING;\n        }\n      }\n    }\n\n    this.updateStatus(false, nextStatus);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.cancelNextCallback();\n  };\n\n  _proto.getTimeouts = function getTimeouts() {\n    var timeout = this.props.timeout;\n    var exit, enter, appear;\n    exit = enter = appear = timeout;\n\n    if (timeout != null && typeof timeout !== 'number') {\n      exit = timeout.exit;\n      enter = timeout.enter; // TODO: remove fallback for next major\n\n      appear = timeout.appear !== undefined ? timeout.appear : enter;\n    }\n\n    return {\n      exit: exit,\n      enter: enter,\n      appear: appear\n    };\n  };\n\n  _proto.updateStatus = function updateStatus(mounting, nextStatus) {\n    if (mounting === void 0) {\n      mounting = false;\n    }\n\n    if (nextStatus !== null) {\n      // nextStatus will always be ENTERING or EXITING.\n      this.cancelNextCallback();\n\n      if (nextStatus === ENTERING) {\n        if (this.props.unmountOnExit || this.props.mountOnEnter) {\n          var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this); // https://github.com/reactjs/react-transition-group/pull/749\n          // With unmountOnExit or mountOnEnter, the enter animation should happen at the transition between `exited` and `entering`.\n          // To make the animation happen,  we have to separate each rendering and avoid being processed as batched.\n\n          if (node) forceReflow(node);\n        }\n\n        this.performEnter(mounting);\n      } else {\n        this.performExit();\n      }\n    } else if (this.props.unmountOnExit && this.state.status === EXITED) {\n      this.setState({\n        status: UNMOUNTED\n      });\n    }\n  };\n\n  _proto.performEnter = function performEnter(mounting) {\n    var _this2 = this;\n\n    var enter = this.props.enter;\n    var appearing = this.context ? this.context.isMounting : mounting;\n\n    var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing],\n        maybeNode = _ref2[0],\n        maybeAppearing = _ref2[1];\n\n    var timeouts = this.getTimeouts();\n    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED\n    // if we are mounting and running this it means appear _must_ be set\n\n    if (!mounting && !enter || config.disabled) {\n      this.safeSetState({\n        status: ENTERED\n      }, function () {\n        _this2.props.onEntered(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onEnter(maybeNode, maybeAppearing);\n    this.safeSetState({\n      status: ENTERING\n    }, function () {\n      _this2.props.onEntering(maybeNode, maybeAppearing);\n\n      _this2.onTransitionEnd(enterTimeout, function () {\n        _this2.safeSetState({\n          status: ENTERED\n        }, function () {\n          _this2.props.onEntered(maybeNode, maybeAppearing);\n        });\n      });\n    });\n  };\n\n  _proto.performExit = function performExit() {\n    var _this3 = this;\n\n    var exit = this.props.exit;\n    var timeouts = this.getTimeouts();\n    var maybeNode = this.props.nodeRef ? undefined : ReactDOM.findDOMNode(this); // no exit animation skip right to EXITED\n\n    if (!exit || config.disabled) {\n      this.safeSetState({\n        status: EXITED\n      }, function () {\n        _this3.props.onExited(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onExit(maybeNode);\n    this.safeSetState({\n      status: EXITING\n    }, function () {\n      _this3.props.onExiting(maybeNode);\n\n      _this3.onTransitionEnd(timeouts.exit, function () {\n        _this3.safeSetState({\n          status: EXITED\n        }, function () {\n          _this3.props.onExited(maybeNode);\n        });\n      });\n    });\n  };\n\n  _proto.cancelNextCallback = function cancelNextCallback() {\n    if (this.nextCallback !== null) {\n      this.nextCallback.cancel();\n      this.nextCallback = null;\n    }\n  };\n\n  _proto.safeSetState = function safeSetState(nextState, callback) {\n    // This shouldn't be necessary, but there are weird race conditions with\n    // setState callbacks and unmounting in testing, so always make sure that\n    // we can cancel any pending setState callbacks after we unmount.\n    callback = this.setNextCallback(callback);\n    this.setState(nextState, callback);\n  };\n\n  _proto.setNextCallback = function setNextCallback(callback) {\n    var _this4 = this;\n\n    var active = true;\n\n    this.nextCallback = function (event) {\n      if (active) {\n        active = false;\n        _this4.nextCallback = null;\n        callback(event);\n      }\n    };\n\n    this.nextCallback.cancel = function () {\n      active = false;\n    };\n\n    return this.nextCallback;\n  };\n\n  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {\n    this.setNextCallback(handler);\n    var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);\n    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;\n\n    if (!node || doesNotHaveTimeoutOrListener) {\n      setTimeout(this.nextCallback, 0);\n      return;\n    }\n\n    if (this.props.addEndListener) {\n      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],\n          maybeNode = _ref3[0],\n          maybeNextCallback = _ref3[1];\n\n      this.props.addEndListener(maybeNode, maybeNextCallback);\n    }\n\n    if (timeout != null) {\n      setTimeout(this.nextCallback, timeout);\n    }\n  };\n\n  _proto.render = function render() {\n    var status = this.state.status;\n\n    if (status === UNMOUNTED) {\n      return null;\n    }\n\n    var _this$props = this.props,\n        children = _this$props.children,\n        _in = _this$props.in,\n        _mountOnEnter = _this$props.mountOnEnter,\n        _unmountOnExit = _this$props.unmountOnExit,\n        _appear = _this$props.appear,\n        _enter = _this$props.enter,\n        _exit = _this$props.exit,\n        _timeout = _this$props.timeout,\n        _addEndListener = _this$props.addEndListener,\n        _onEnter = _this$props.onEnter,\n        _onEntering = _this$props.onEntering,\n        _onEntered = _this$props.onEntered,\n        _onExit = _this$props.onExit,\n        _onExiting = _this$props.onExiting,\n        _onExited = _this$props.onExited,\n        _nodeRef = _this$props.nodeRef,\n        childProps = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"in\", \"mountOnEnter\", \"unmountOnExit\", \"appear\", \"enter\", \"exit\", \"timeout\", \"addEndListener\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"nodeRef\"]);\n\n    return (\n      /*#__PURE__*/\n      // allows for nested Transitions\n      React.createElement(TransitionGroupContext.Provider, {\n        value: null\n      }, typeof children === 'function' ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps))\n    );\n  };\n\n  return Transition;\n}(React.Component);\n\nTransition.contextType = TransitionGroupContext;\nTransition.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * A React reference to DOM element that need to transition:\n   * https://stackoverflow.com/a/51127130/4671932\n   *\n   *   - When `nodeRef` prop is used, `node` is not passed to callback functions\n   *      (e.g. `onEnter`) because user already has direct access to the node.\n   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new\n   *     `nodeRef` need to be provided to `Transition` with changed `key` prop\n   *     (see\n   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).\n   */\n  nodeRef: PropTypes.shape({\n    current: typeof Element === 'undefined' ? PropTypes.any : function (propValue, key, componentName, location, propFullName, secret) {\n      var value = propValue[key];\n      return PropTypes.instanceOf(value && 'ownerDocument' in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);\n    }\n  }),\n\n  /**\n   * A `function` child can be used instead of a React element. This function is\n   * called with the current transition status (`'entering'`, `'entered'`,\n   * `'exiting'`, `'exited'`), which can be used to apply context\n   * specific props to a component.\n   *\n   * ```jsx\n   * <Transition in={this.state.in} timeout={150}>\n   *   {state => (\n   *     <MyComponent className={`fade fade-${state}`} />\n   *   )}\n   * </Transition>\n   * ```\n   */\n  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,\n\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in: PropTypes.bool,\n\n  /**\n   * By default the child component is mounted immediately along with\n   * the parent `Transition` component. If you want to \"lazy mount\" the component on the\n   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay\n   * mounted, even on \"exited\", unless you also specify `unmountOnExit`.\n   */\n  mountOnEnter: PropTypes.bool,\n\n  /**\n   * By default the child component stays mounted after it reaches the `'exited'` state.\n   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.\n   */\n  unmountOnExit: PropTypes.bool,\n\n  /**\n   * By default the child component does not perform the enter transition when\n   * it first mounts, regardless of the value of `in`. If you want this\n   * behavior, set both `appear` and `in` to `true`.\n   *\n   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop\n   * > only adds an additional enter transition. However, in the\n   * > `<CSSTransition>` component that first enter transition does result in\n   * > additional `.appear-*` classes, that way you can choose to style it\n   * > differently.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * Enable or disable enter transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * Enable or disable exit transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * The duration of the transition, in milliseconds.\n   * Required unless `addEndListener` is provided.\n   *\n   * You may specify a single timeout for all transitions:\n   *\n   * ```jsx\n   * timeout={500}\n   * ```\n   *\n   * or individually:\n   *\n   * ```jsx\n   * timeout={{\n   *  appear: 500,\n   *  enter: 300,\n   *  exit: 500,\n   * }}\n   * ```\n   *\n   * - `appear` defaults to the value of `enter`\n   * - `enter` defaults to `0`\n   * - `exit` defaults to `0`\n   *\n   * @type {number | { enter?: number, exit?: number, appear?: number }}\n   */\n  timeout: function timeout(props) {\n    var pt = timeoutsShape;\n    if (!props.addEndListener) pt = pt.isRequired;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return pt.apply(void 0, [props].concat(args));\n  },\n\n  /**\n   * Add a custom transition end trigger. Called with the transitioning\n   * DOM node and a `done` callback. Allows for more fine grained transition end\n   * logic. Timeouts are still used as a fallback if provided.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * ```jsx\n   * addEndListener={(node, done) => {\n   *   // use the css transitionend event to mark the finish of a transition\n   *   node.addEventListener('transitionend', done, false);\n   * }}\n   * ```\n   */\n  addEndListener: PropTypes.func,\n\n  /**\n   * Callback fired before the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entered\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExited: PropTypes.func\n} : {}; // Name the function so it is clearer in the documentation\n\nfunction noop() {}\n\nTransition.defaultProps = {\n  in: false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  onEnter: noop,\n  onEntering: noop,\n  onEntered: noop,\n  onExit: noop,\n  onExiting: noop,\n  onExited: noop\n};\nTransition.UNMOUNTED = UNMOUNTED;\nTransition.EXITED = EXITED;\nTransition.ENTERING = ENTERING;\nTransition.ENTERED = ENTERED;\nTransition.EXITING = EXITING;\nexport default Transition;"]},"metadata":{},"sourceType":"module"}