{"ast":null,"code":"import { __spreadArray } from '../../node_modules/tslib/tslib.es6.js';\n/**\n * Converts an ISO week string to a Date object representing the Monday of that week.\n * @param isoWeek - The ISO week string (e.g., \"2023W05\" or \"2023w05\").\n * @returns The Date object for the Monday of the specified week, or null if invalid.\n */\n\nvar convertIsoWeekToDate = function (isoWeek) {\n  var _a = isoWeek.split(/[Ww]/),\n      year = _a[0],\n      week = _a[1];\n\n  var date = new Date(Number(year), 0, 4); // 4th Jan is always in week 1\n\n  date.setDate(date.getDate() - (date.getDay() || 7) + 1 + (Number(week) - 1) * 7);\n  return date;\n};\n/**\n * Converts a date string or Date object to a Date object based on selection type.\n * @param date - The date to convert.\n * @param selectionType - The type of selection ('day', 'week', 'month', 'year').\n * @returns The corresponding Date object or null if invalid.\n */\n\n\nvar convertToDateObject = function (date, selectionType) {\n  if (date instanceof Date) {\n    return date;\n  }\n\n  if (selectionType === 'week') {\n    return convertIsoWeekToDate(date);\n  }\n\n  if (selectionType === 'month' || selectionType === 'year') {\n    var _date = new Date(Date.parse(date));\n\n    var userTimezoneOffset = _date.getTimezoneOffset() * 60000;\n    return new Date(_date.getTime() + userTimezoneOffset);\n  }\n\n  return new Date(Date.parse(date));\n};\n/**\n * Creates groups from an array.\n * @param arr - The array to group.\n * @param numberOfGroups - Number of groups to create.\n * @returns An array of grouped arrays.\n */\n\n\nvar createGroupsInArray = function (arr, numberOfGroups) {\n  var perGroup = Math.ceil(arr.length / numberOfGroups);\n  return Array.from({\n    length: numberOfGroups\n  }).fill('').map(function (_, i) {\n    return arr.slice(i * perGroup, (i + 1) * perGroup);\n  });\n};\n/**\n * Adjusts the calendar date based on order and view type.\n * @param calendarDate - The current calendar date.\n * @param order - The order to adjust by.\n * @param view - The current view type.\n * @returns The adjusted Date object.\n */\n\n\nvar getCalendarDate = function (calendarDate, order, view) {\n  if (order !== 0 && view === 'days') {\n    return new Date(calendarDate.getFullYear(), calendarDate.getMonth() + order, 1);\n  }\n\n  if (order !== 0 && view === 'months') {\n    return new Date(calendarDate.getFullYear() + order, calendarDate.getMonth(), 1);\n  }\n\n  if (order !== 0 && view === 'years') {\n    return new Date(calendarDate.getFullYear() + 12 * order, calendarDate.getMonth(), 1);\n  }\n\n  return calendarDate;\n};\n/**\n * Formats a date based on the selection type.\n * @param date - The date to format.\n * @param selectionType - The type of selection ('day', 'week', 'month', 'year').\n * @returns A formatted date string or the original Date object.\n */\n\n\nvar getDateBySelectionType = function (date, selectionType) {\n  if (date === null) {\n    return null;\n  }\n\n  if (selectionType === 'week') {\n    return \"\".concat(date.getFullYear(), \"W\").concat(getWeekNumber(date));\n  }\n\n  if (selectionType === 'month') {\n    var monthNumber = \"0\".concat(date.getMonth() + 1).slice(-2);\n    return \"\".concat(date.getFullYear(), \"-\").concat(monthNumber);\n  }\n\n  if (selectionType === 'year') {\n    return \"\".concat(date.getFullYear());\n  }\n\n  return date;\n};\n/**\n * Retrieves an array of month names based on locale and format.\n * @param locale - The locale string (e.g., 'en-US').\n * @param format - The format of the month names ('short' or 'long').\n * @returns An array of month names.\n */\n\n\nvar getMonthsNames = function (locale, format) {\n  if (format === void 0) {\n    format = 'short';\n  }\n\n  return Array.from({\n    length: 12\n  }, function (_, i) {\n    return new Date(2000, i, 1).toLocaleString(locale, {\n      month: format\n    });\n  });\n};\n/**\n * Retrieves an array of selectable dates from the given element.\n * @param element - The HTML element to search for selectable dates.\n * @param selector - The CSS selector used to identify selectable dates. Defaults to 'tr[tabindex=\"0\"], td[tabindex=\"0\"]'.\n * @returns An array of HTMLElements representing the selectable dates.\n */\n\n\nvar getSelectableDates = function (element, selector) {\n  if (selector === void 0) {\n    selector = 'tr[tabindex=\"0\"], td[tabindex=\"0\"]';\n  }\n\n  return __spreadArray([], Element.prototype.querySelectorAll.call(element, selector), true);\n};\n/**\n * Generates an array of years centered around a given year.\n * @param year - The central year.\n * @param range - The number of years before and after the central year.\n * @returns An array of years.\n */\n\n\nvar getYears = function (year, range) {\n  if (range === void 0) {\n    range = 6;\n  }\n\n  return Array.from({\n    length: range * 2\n  }, function (_, i) {\n    return year - range + i;\n  });\n};\n/**\n * Retrieves leading days (from the previous month) for a calendar view.\n * @param year - The year.\n * @param month - The month (0-11).\n * @param firstDayOfWeek - The first day of the week (0-6, where 0 is Sunday).\n * @returns An array of leading day objects.\n */\n\n\nvar getLeadingDays = function (year, month, firstDayOfWeek) {\n  // 0: sunday\n  // 1: monday\n  var dates = [];\n  var d = new Date(year, month);\n  var y = d.getFullYear();\n  var m = d.getMonth();\n  var firstWeekday = new Date(y, m, 1).getDay();\n  var leadingDays = 6 - (6 - firstWeekday) - firstDayOfWeek;\n\n  if (firstDayOfWeek) {\n    leadingDays = leadingDays < 0 ? 7 + leadingDays : leadingDays;\n  }\n\n  for (var i = leadingDays * -1; i < 0; i++) {\n    dates.push({\n      date: new Date(y, m, i + 1),\n      month: 'previous'\n    });\n  }\n\n  return dates;\n};\n/**\n * Retrieves all days within a specific month.\n * @param year - The year.\n * @param month - The month (0-11).\n * @returns An array of day objects.\n */\n\n\nvar getMonthDays = function (year, month) {\n  var dates = [];\n  var lastDay = new Date(year, month + 1, 0).getDate();\n\n  for (var i = 1; i <= lastDay; i++) {\n    dates.push({\n      date: new Date(year, month, i),\n      month: 'current'\n    });\n  }\n\n  return dates;\n};\n/**\n * Retrieves trailing days (from the next month) for a calendar view.\n * @param year - The year.\n * @param month - The month (0-11).\n * @param leadingDays - Array of leading day objects.\n * @param monthDays - Array of current month day objects.\n * @returns An array of trailing day objects.\n */\n\n\nvar getTrailingDays = function (year, month, leadingDays, monthDays) {\n  var dates = [];\n  var days = 42 - (leadingDays.length + monthDays.length);\n\n  for (var i = 1; i <= days; i++) {\n    dates.push({\n      date: new Date(year, month + 1, i),\n      month: 'next'\n    });\n  }\n\n  return dates;\n};\n/**\n * Calculates the ISO week number for a given date.\n * @param date - The date to calculate the week number for.\n * @returns The ISO week number.\n */\n\n\nvar getWeekNumber = function (date) {\n  var tempDate = new Date(date.getTime());\n  tempDate.setHours(0, 0, 0, 0); // Thursday in current week decides the year\n\n  tempDate.setDate(tempDate.getDate() + 3 - (tempDate.getDay() + 6) % 7);\n  var week1 = new Date(tempDate.getFullYear(), 0, 4); // Calculate full weeks to the date\n\n  var weekNumber = 1 + Math.round((tempDate.getTime() - week1.getTime()) / 86400000 / 7);\n  return weekNumber;\n};\n/**\n * Retrieves detailed information about each week in a month for calendar rendering.\n * @param year - The year.\n * @param month - The month (0-11).\n * @param firstDayOfWeek - The first day of the week (0-6, where 0 is Sunday).\n * @returns An array of week objects containing week numbers and day details.\n */\n\n\nvar getMonthDetails = function (year, month, firstDayOfWeek) {\n  var daysPrevMonth = getLeadingDays(year, month, firstDayOfWeek);\n  var daysThisMonth = getMonthDays(year, month);\n  var daysNextMonth = getTrailingDays(year, month, daysPrevMonth, daysThisMonth);\n\n  var days = __spreadArray(__spreadArray(__spreadArray([], daysPrevMonth, true), daysThisMonth, true), daysNextMonth, true);\n\n  var weeks = [];\n  days.forEach(function (day, index) {\n    if (index % 7 === 0 || weeks.length === 0) {\n      weeks.push({\n        days: []\n      });\n    }\n\n    if ((index + 1) % 7 === 0) {\n      weeks[weeks.length - 1].weekNumber = getWeekNumber(day.date);\n    }\n\n    weeks[weeks.length - 1].days.push(day);\n  });\n  return weeks;\n};\n/**\n * Checks if a date is disabled based on the 'date' period type.\n * @param date - The date to check.\n * @param min - Minimum allowed date.\n * @param max - Maximum allowed date.\n * @param disabledDates - Criteria for disabled dates.\n * @returns True if the date is disabled, false otherwise.\n */\n\n\nvar isDateDisabled = function (date, min, max, disabledDates) {\n  if (min && date < min) {\n    return true;\n  }\n\n  if (max && date > max) {\n    return true;\n  }\n\n  if (disabledDates === undefined) {\n    return false;\n  }\n\n  if (typeof disabledDates === 'function') {\n    return disabledDates(date);\n  }\n\n  if (disabledDates instanceof Date && isSameDateAs(date, disabledDates)) {\n    return true;\n  }\n\n  if (Array.isArray(disabledDates) && disabledDates) {\n    for (var _i = 0, disabledDates_1 = disabledDates; _i < disabledDates_1.length; _i++) {\n      var _date = disabledDates_1[_i];\n\n      if (typeof _date === 'function' && _date(date)) {\n        return true;\n      }\n\n      if (Array.isArray(_date) && isDateInRange(date, _date[0], _date[1])) {\n        return true;\n      }\n\n      if (_date instanceof Date && isSameDateAs(date, _date)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n/**\n * Checks if a date is within a specified range.\n * @param date - The date to check.\n * @param start - Start date of the range.\n * @param end - End date of the range.\n * @returns True if the date is within the range, false otherwise.\n */\n\n\nvar isDateInRange = function (date, start, end) {\n  var _date = removeTimeFromDate(date);\n\n  var _start = start ? removeTimeFromDate(start) : null;\n\n  var _end = end ? removeTimeFromDate(end) : null;\n\n  return !!(_start && _end && _start <= _date && _date <= _end);\n};\n/**\n * Checks if a date is selected based on start and end dates.\n * @param date - The date to check.\n * @param start - Start date.\n * @param end - End date.\n * @returns True if the date is selected, false otherwise.\n */\n\n\nvar isDateSelected = function (date, start, end) {\n  if (start !== null && isSameDateAs(start, date)) {\n    return true;\n  }\n\n  if (end !== null && isSameDateAs(end, date)) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * Determines if any date within a range is disabled.\n * @param startDate - Start date of the range.\n * @param endDate - End date of the range.\n * @param disabledDates - Criteria for disabled dates.\n * @returns True if any date in the range is disabled, false otherwise.\n */\n\n\nvar isDisableDateInRange = function (startDate, endDate, disabledDates) {\n  if (startDate && endDate) {\n    var date = new Date(startDate);\n    var disabled = false;\n\n    while (date < endDate) {\n      date.setDate(date.getDate() + 1);\n\n      if (isDateDisabled(date, null, null, disabledDates)) {\n        disabled = true;\n        break;\n      }\n    }\n\n    return disabled;\n  }\n\n  return false;\n};\n/**\n * Checks if a month is disabled based on the 'month' period type.\n * @param date - The date representing the month to check.\n * @param min - Minimum allowed date.\n * @param max - Maximum allowed date.\n * @param disabledDates - Criteria for disabled dates.\n * @returns True if the month is disabled, false otherwise.\n */\n\n\nvar isMonthDisabled = function (date, min, max, disabledDates) {\n  var current = date.getFullYear() * 12 + date.getMonth();\n\n  var _min = min ? min.getFullYear() * 12 + min.getMonth() : null;\n\n  var _max = max ? max.getFullYear() * 12 + max.getMonth() : null;\n\n  if (_min && current < _min) {\n    return true;\n  }\n\n  if (_max && current > _max) {\n    return true;\n  }\n\n  if (disabledDates === undefined) {\n    return false;\n  }\n\n  var start = min ? Math.max(date.getTime(), min.getTime()) : date;\n  var end = max ? Math.min(date.getTime(), max.getTime()) : new Date(new Date().getFullYear(), 11, 31);\n\n  for (var currentDate = new Date(start); currentDate <= end; currentDate.setDate(currentDate.getDate() + 1)) {\n    if (!isDateDisabled(currentDate, min, max, disabledDates)) {\n      return false;\n    }\n  }\n\n  return false;\n};\n/**\n * Checks if a month is selected based on start and end dates.\n * @param date - The date representing the month.\n * @param start - Start date.\n * @param end - End date.\n * @returns True if the month is selected, false otherwise.\n */\n\n\nvar isMonthSelected = function (date, start, end) {\n  var year = date.getFullYear();\n  var month = date.getMonth();\n\n  if (start !== null && year === start.getFullYear() && month === start.getMonth()) {\n    return true;\n  }\n\n  if (end !== null && year === end.getFullYear() && month === end.getMonth()) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * Checks if a month is within a specified range.\n * @param date - The date representing the month.\n * @param start - Start date.\n * @param end - End date.\n * @returns True if the month is within the range, false otherwise.\n */\n\n\nvar isMonthInRange = function (date, start, end) {\n  var year = date.getFullYear();\n  var month = date.getMonth();\n\n  var _start = start ? start.getFullYear() * 12 + start.getMonth() : null;\n\n  var _end = end ? end.getFullYear() * 12 + end.getMonth() : null;\n\n  var _date = year * 12 + month;\n\n  return !!(_start && _end && _start <= _date && _date <= _end);\n};\n/**\n * Checks if two dates are the same calendar date.\n * @param date - First date.\n * @param date2 - Second date.\n * @returns True if both dates are the same, false otherwise.\n */\n\n\nvar isSameDateAs = function (date, date2) {\n  if (date instanceof Date && date2 instanceof Date) {\n    return date.getDate() === date2.getDate() && date.getMonth() === date2.getMonth() && date.getFullYear() === date2.getFullYear();\n  }\n\n  if (date === null && date2 === null) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * Checks if a date is today.\n * @param date - The date to check.\n * @returns True if the date is today, false otherwise.\n */\n\n\nvar isToday = function (date) {\n  var today = new Date();\n  return isSameDateAs(date, today);\n};\n/**\n * Checks if a year is disabled based on the 'year' period type.\n * @param date - The date representing the year to check.\n * @param min - Minimum allowed date.\n * @param max - Maximum allowed date.\n * @param disabledDates - Criteria for disabled dates.\n * @returns True if the year is disabled, false otherwise.\n */\n\n\nvar isYearDisabled = function (date, min, max, disabledDates) {\n  var year = date.getFullYear();\n  var minYear = min ? min.getFullYear() : null;\n  var maxYear = max ? max.getFullYear() : null;\n\n  if (minYear && year < minYear) {\n    return true;\n  }\n\n  if (maxYear && year > maxYear) {\n    return true;\n  }\n\n  if (disabledDates === undefined) {\n    return false;\n  }\n\n  var start = min ? Math.max(date.getTime(), min.getTime()) : date;\n  var end = max ? Math.min(date.getTime(), max.getTime()) : new Date(new Date().getFullYear(), 11, 31);\n\n  for (var currentDate = new Date(start); currentDate <= end; currentDate.setDate(currentDate.getDate() + 1)) {\n    if (!isDateDisabled(currentDate, min, max, disabledDates)) {\n      return false;\n    }\n  }\n\n  return false;\n};\n/**\n * Checks if a year is selected based on start and end dates.\n * @param date - The date representing the year.\n * @param start - Start date.\n * @param end - End date.\n * @returns True if the year matches the start's or end's year, false otherwise.\n */\n\n\nvar isYearSelected = function (date, start, end) {\n  var year = date.getFullYear();\n\n  if (start !== null && year === start.getFullYear()) {\n    return true;\n  }\n\n  if (end !== null && year === end.getFullYear()) {\n    return true;\n  }\n\n  return false;\n};\n/**\n * Checks if a year is within a specified range.\n * @param date - The date representing the year.\n * @param start - Start date.\n * @param end - End date.\n * @returns True if the year's value lies between start's year and end's year, false otherwise.\n */\n\n\nvar isYearInRange = function (date, start, end) {\n  var year = date.getFullYear();\n\n  var _start = start ? start.getFullYear() : null;\n\n  var _end = end ? end.getFullYear() : null;\n\n  return !!(_start && _end && _start <= year && year <= _end);\n};\n/**\n * Removes the time component from a Date object.\n * @param date - The original date.\n * @returns A new Date object with the time set to 00:00:00.\n */\n\n\nvar removeTimeFromDate = function (date) {\n  var clearedDate = new Date(date);\n  clearedDate.setHours(0, 0, 0, 0);\n  return clearedDate;\n};\n/**\n * Copies the time (hours, minutes, seconds, milliseconds) from one Date to another.\n *\n * @param {Date} target - The date whose time will be updated.\n * @param {Date | null} source - The date to copy the time from.\n * @returns {Date} A new Date instance with the date from `target` and time from `source`.\n */\n\n\nvar setTimeFromDate = function (target, source) {\n  if (!(source instanceof Date)) {\n    return target;\n  }\n\n  var result = new Date(target); // create a copy to avoid mutation\n\n  result.setHours(source.getHours(), source.getMinutes(), source.getSeconds(), source.getMilliseconds());\n  return result;\n};\n\nexport { convertIsoWeekToDate, convertToDateObject, createGroupsInArray, getCalendarDate, getDateBySelectionType, getMonthDetails, getMonthsNames, getSelectableDates, getWeekNumber, getYears, isDateDisabled, isDateInRange, isDateSelected, isDisableDateInRange, isMonthDisabled, isMonthInRange, isMonthSelected, isSameDateAs, isToday, isYearDisabled, isYearInRange, isYearSelected, removeTimeFromDate, setTimeFromDate };","map":{"version":3,"mappings":"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","names":["convertIsoWeekToDate","isoWeek","split","year","week","date","Date","Number","setDate","getDate","getDay","selectionType","_date","parse","userTimezoneOffset","getTimezoneOffset","getTime","arr","numberOfGroups","perGroup","Math","ceil","length","Array","from","fill","map","_","i","slice","getCalendarDate","calendarDate","order","view","getFullYear","getMonth","concat","getWeekNumber","monthNumber","locale","format","toLocaleString","month","element","selector","__spreadArray","prototype","querySelectorAll","call","range","getLeadingDays","firstDayOfWeek","dates","d","y","m","firstWeekday","leadingDays","push","getMonthDays","lastDay","getTrailingDays","monthDays","days","tempDate","setHours","week1","weekNumber","round","getMonthDetails","daysPrevMonth","daysThisMonth","daysNextMonth","weeks","forEach","day","index","min","max","disabledDates","undefined","isSameDateAs","isArray","_i","isDateInRange","start","end","removeTimeFromDate","_start","_end","isDateSelected","isDisableDateInRange","startDate","endDate","disabled","isDateDisabled","current","_min","_max","currentDate","isMonthSelected","isMonthInRange","date2","isToday","today","minYear","maxYear","isYearSelected","isYearInRange","clearedDate","target","source","result","getHours","getMinutes","getSeconds","getMilliseconds"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\calendar\\utils.ts"],"sourcesContent":["import type { DisabledDate, SelectionTypes, ViewTypes } from './types'\n\n/**\n * Converts an ISO week string to a Date object representing the Monday of that week.\n * @param isoWeek - The ISO week string (e.g., \"2023W05\" or \"2023w05\").\n * @returns The Date object for the Monday of the specified week, or null if invalid.\n */\nexport const convertIsoWeekToDate = (isoWeek: string): Date => {\n  const [year, week] = isoWeek.split(/[Ww]/)\n  const date = new Date(Number(year), 0, 4) // 4th Jan is always in week 1\n  date.setDate(date.getDate() - (date.getDay() || 7) + 1 + (Number(week) - 1) * 7)\n  return date\n}\n\n/**\n * Converts a date string or Date object to a Date object based on selection type.\n * @param date - The date to convert.\n * @param selectionType - The type of selection ('day', 'week', 'month', 'year').\n * @returns The corresponding Date object or null if invalid.\n */\nexport const convertToDateObject = (date: Date | string, selectionType?: SelectionTypes): Date => {\n  if (date instanceof Date) {\n    return date\n  }\n\n  if (selectionType === 'week') {\n    return convertIsoWeekToDate(date as string)\n  }\n\n  if (selectionType === 'month' || selectionType === 'year') {\n    const _date = new Date(Date.parse(date))\n    const userTimezoneOffset = _date.getTimezoneOffset() * 60_000\n    return new Date(_date.getTime() + userTimezoneOffset)\n  }\n\n  return new Date(Date.parse(date))\n}\n\n/**\n * Creates groups from an array.\n * @param arr - The array to group.\n * @param numberOfGroups - Number of groups to create.\n * @returns An array of grouped arrays.\n */\nexport const createGroupsInArray = <T>(arr: T[], numberOfGroups: number): T[][] => {\n  const perGroup = Math.ceil(arr.length / numberOfGroups)\n  return Array.from({ length: numberOfGroups })\n    .fill('')\n    .map((_, i) => arr.slice(i * perGroup, (i + 1) * perGroup))\n}\n\n/**\n * Adjusts the calendar date based on order and view type.\n * @param calendarDate - The current calendar date.\n * @param order - The order to adjust by.\n * @param view - The current view type.\n * @returns The adjusted Date object.\n */\nexport const getCalendarDate = (calendarDate: Date, order: number, view: ViewTypes): Date => {\n  if (order !== 0 && view === 'days') {\n    return new Date(calendarDate.getFullYear(), calendarDate.getMonth() + order, 1)\n  }\n\n  if (order !== 0 && view === 'months') {\n    return new Date(calendarDate.getFullYear() + order, calendarDate.getMonth(), 1)\n  }\n\n  if (order !== 0 && view === 'years') {\n    return new Date(calendarDate.getFullYear() + 12 * order, calendarDate.getMonth(), 1)\n  }\n\n  return calendarDate\n}\n\n/**\n * Formats a date based on the selection type.\n * @param date - The date to format.\n * @param selectionType - The type of selection ('day', 'week', 'month', 'year').\n * @returns A formatted date string or the original Date object.\n */\nexport const getDateBySelectionType = (\n  date: Date | null,\n  selectionType: SelectionTypes\n): string | Date | null => {\n  if (date === null) {\n    return null\n  }\n\n  if (selectionType === 'week') {\n    return `${date.getFullYear()}W${getWeekNumber(date)}`\n  }\n\n  if (selectionType === 'month') {\n    const monthNumber = `0${date.getMonth() + 1}`.slice(-2)\n    return `${date.getFullYear()}-${monthNumber}`\n  }\n\n  if (selectionType === 'year') {\n    return `${date.getFullYear()}`\n  }\n\n  return date\n}\n\n/**\n * Retrieves the first available date within a range that is not disabled.\n * @param startDate - Start date of the range.\n * @param endDate - End date of the range.\n * @param min - Minimum allowed date.\n * @param max - Maximum allowed date.\n * @param disabledDates - Criteria for disabled dates.\n * @returns The first available Date object or null if none found.\n */\nexport const getFirstAvailableDateInRange = (\n  startDate: Date,\n  endDate: Date,\n  min?: Date | null,\n  max?: Date | null,\n  disabledDates?: DisabledDate | DisabledDate[]\n): Date | null => {\n  const _min = min ? new Date(Math.max(startDate.getTime(), min.getTime())) : startDate\n  const _max = max ? new Date(Math.min(endDate.getTime(), max.getTime())) : endDate\n\n  if (disabledDates === undefined) {\n    return _min\n  }\n\n  for (\n    const currentDate = new Date(_min);\n    currentDate <= _max;\n    currentDate.setDate(currentDate.getDate() + 1)\n  ) {\n    if (!isDateDisabled(currentDate, min, max, disabledDates)) {\n      return currentDate\n    }\n  }\n\n  return null\n}\n\n/**\n * Retrieves an array of month names based on locale and format.\n * @param locale - The locale string (e.g., 'en-US').\n * @param format - The format of the month names ('short' or 'long').\n * @returns An array of month names.\n */\nexport const getMonthsNames = (locale: string, format: 'short' | 'long' = 'short'): string[] => {\n  return Array.from({ length: 12 }, (_, i) => {\n    return new Date(2000, i, 1).toLocaleString(locale, { month: format })\n  })\n}\n\n/**\n * Retrieves an array of selectable dates from the given element.\n * @param element - The HTML element to search for selectable dates.\n * @param selector - The CSS selector used to identify selectable dates. Defaults to 'tr[tabindex=\"0\"], td[tabindex=\"0\"]'.\n * @returns An array of HTMLElements representing the selectable dates.\n */\nexport const getSelectableDates = (\n  element: HTMLElement,\n  selector: string = 'tr[tabindex=\"0\"], td[tabindex=\"0\"]'\n) => {\n  return [...Element.prototype.querySelectorAll.call(element, selector)] as HTMLElement[]\n}\n\n/**\n * Generates an array of years centered around a given year.\n * @param year - The central year.\n * @param range - The number of years before and after the central year.\n * @returns An array of years.\n */\nexport const getYears = (year: number, range: number = 6): number[] => {\n  return Array.from({ length: range * 2 }, (_, i) => year - range + i)\n}\n\n/**\n * Retrieves leading days (from the previous month) for a calendar view.\n * @param year - The year.\n * @param month - The month (0-11).\n * @param firstDayOfWeek - The first day of the week (0-6, where 0 is Sunday).\n * @returns An array of leading day objects.\n */\nconst getLeadingDays = (\n  year: number,\n  month: number,\n  firstDayOfWeek: number\n): { date: Date; month: string }[] => {\n  // 0: sunday\n  // 1: monday\n  const dates = []\n  const d = new Date(year, month)\n  const y = d.getFullYear()\n  const m = d.getMonth()\n  const firstWeekday = new Date(y, m, 1).getDay()\n  let leadingDays = 6 - (6 - firstWeekday) - firstDayOfWeek\n\n  if (firstDayOfWeek) {\n    leadingDays = leadingDays < 0 ? 7 + leadingDays : leadingDays\n  }\n\n  for (let i = leadingDays * -1; i < 0; i++) {\n    dates.push({\n      date: new Date(y, m, i + 1),\n      month: 'previous',\n    })\n  }\n\n  return dates\n}\n\n/**\n * Retrieves all days within a specific month.\n * @param year - The year.\n * @param month - The month (0-11).\n * @returns An array of day objects.\n */\nconst getMonthDays = (year: number, month: number): { date: Date; month: string }[] => {\n  const dates = []\n  const lastDay = new Date(year, month + 1, 0).getDate()\n  for (let i = 1; i <= lastDay; i++) {\n    dates.push({\n      date: new Date(year, month, i),\n      month: 'current',\n    })\n  }\n\n  return dates\n}\n\n/**\n * Retrieves trailing days (from the next month) for a calendar view.\n * @param year - The year.\n * @param month - The month (0-11).\n * @param leadingDays - Array of leading day objects.\n * @param monthDays - Array of current month day objects.\n * @returns An array of trailing day objects.\n */\nconst getTrailingDays = (\n  year: number,\n  month: number,\n  leadingDays: { date: Date; month: string }[],\n  monthDays: { date: Date; month: string }[]\n) => {\n  const dates = []\n  const days = 42 - (leadingDays.length + monthDays.length)\n  for (let i = 1; i <= days; i++) {\n    dates.push({\n      date: new Date(year, month + 1, i),\n      month: 'next',\n    })\n  }\n\n  return dates\n}\n\n/**\n * Calculates the ISO week number for a given date.\n * @param date - The date to calculate the week number for.\n * @returns The ISO week number.\n */\nexport const getWeekNumber = (date: Date): number => {\n  const tempDate = new Date(date.getTime())\n  tempDate.setHours(0, 0, 0, 0)\n\n  // Thursday in current week decides the year\n  tempDate.setDate(tempDate.getDate() + 3 - ((tempDate.getDay() + 6) % 7))\n\n  const week1 = new Date(tempDate.getFullYear(), 0, 4)\n\n  // Calculate full weeks to the date\n  const weekNumber = 1 + Math.round((tempDate.getTime() - week1.getTime()) / 86_400_000 / 7)\n\n  return weekNumber\n}\n\n/**\n * Retrieves detailed information about each week in a month for calendar rendering.\n * @param year - The year.\n * @param month - The month (0-11).\n * @param firstDayOfWeek - The first day of the week (0-6, where 0 is Sunday).\n * @returns An array of week objects containing week numbers and day details.\n */\nexport const getMonthDetails = (\n  year: number,\n  month: number,\n  firstDayOfWeek: number\n): { weekNumber?: number; days: { date: Date; month: string }[] }[] => {\n  const daysPrevMonth = getLeadingDays(year, month, firstDayOfWeek)\n  const daysThisMonth = getMonthDays(year, month)\n  const daysNextMonth = getTrailingDays(year, month, daysPrevMonth, daysThisMonth)\n  const days = [...daysPrevMonth, ...daysThisMonth, ...daysNextMonth]\n  const weeks: { weekNumber?: number; days: { date: Date; month: string }[] }[] = []\n\n  days.forEach((day, index) => {\n    if (index % 7 === 0 || weeks.length === 0) {\n      weeks.push({\n        days: [],\n      })\n    }\n\n    if ((index + 1) % 7 === 0) {\n      weeks[weeks.length - 1].weekNumber = getWeekNumber(day.date)\n    }\n\n    weeks[weeks.length - 1].days.push(day)\n  })\n\n  return weeks\n}\n\n/**\n * Checks if a date is disabled based on the 'date' period type.\n * @param date - The date to check.\n * @param min - Minimum allowed date.\n * @param max - Maximum allowed date.\n * @param disabledDates - Criteria for disabled dates.\n * @returns True if the date is disabled, false otherwise.\n */\nexport const isDateDisabled = (\n  date: Date,\n  min?: Date | null,\n  max?: Date | null,\n  disabledDates?: DisabledDate | DisabledDate[]\n): boolean => {\n  if (min && date < min) {\n    return true\n  }\n\n  if (max && date > max) {\n    return true\n  }\n\n  if (disabledDates === undefined) {\n    return false\n  }\n\n  if (typeof disabledDates === 'function') {\n    return disabledDates(date)\n  }\n\n  if (disabledDates instanceof Date && isSameDateAs(date, disabledDates)) {\n    return true\n  }\n\n  if (Array.isArray(disabledDates) && disabledDates) {\n    for (const _date of disabledDates) {\n      if (typeof _date === 'function' && _date(date)) {\n        return true\n      }\n\n      if (Array.isArray(_date) && isDateInRange(date, _date[0], _date[1])) {\n        return true\n      }\n\n      if (_date instanceof Date && isSameDateAs(date, _date)) {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n\n/**\n * Checks if a date is within a specified range.\n * @param date - The date to check.\n * @param start - Start date of the range.\n * @param end - End date of the range.\n * @returns True if the date is within the range, false otherwise.\n */\nexport const isDateInRange = (date: Date, start: Date | null, end: Date | null): boolean => {\n  const _date = removeTimeFromDate(date)\n  const _start = start ? removeTimeFromDate(start) : null\n  const _end = end ? removeTimeFromDate(end) : null\n\n  return !!(_start && _end && _start <= _date && _date <= _end)\n}\n\n/**\n * Checks if a date is selected based on start and end dates.\n * @param date - The date to check.\n * @param start - Start date.\n * @param end - End date.\n * @returns True if the date is selected, false otherwise.\n */\nexport const isDateSelected = (date: Date, start: Date | null, end: Date | null): boolean => {\n  if (start !== null && isSameDateAs(start, date)) {\n    return true\n  }\n\n  if (end !== null && isSameDateAs(end, date)) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Determines if any date within a range is disabled.\n * @param startDate - Start date of the range.\n * @param endDate - End date of the range.\n * @param disabledDates - Criteria for disabled dates.\n * @returns True if any date in the range is disabled, false otherwise.\n */\nexport const isDisableDateInRange = (\n  startDate?: Date | null,\n  endDate?: Date | null,\n  disabledDates?: DisabledDate | DisabledDate[]\n): boolean => {\n  if (startDate && endDate) {\n    const date = new Date(startDate)\n    let disabled = false\n\n    while (date < endDate) {\n      date.setDate(date.getDate() + 1)\n      if (isDateDisabled(date, null, null, disabledDates)) {\n        disabled = true\n        break\n      }\n    }\n\n    return disabled\n  }\n\n  return false\n}\n\n/**\n * Checks if a month is disabled based on the 'month' period type.\n * @param date - The date representing the month to check.\n * @param min - Minimum allowed date.\n * @param max - Maximum allowed date.\n * @param disabledDates - Criteria for disabled dates.\n * @returns True if the month is disabled, false otherwise.\n */\nexport const isMonthDisabled = (\n  date: Date,\n  min?: Date | null,\n  max?: Date | null,\n  disabledDates?: DisabledDate | DisabledDate[]\n) => {\n  const current = date.getFullYear() * 12 + date.getMonth()\n  const _min = min ? min.getFullYear() * 12 + min.getMonth() : null\n  const _max = max ? max.getFullYear() * 12 + max.getMonth() : null\n\n  if (_min && current < _min) {\n    return true\n  }\n\n  if (_max && current > _max) {\n    return true\n  }\n\n  if (disabledDates === undefined) {\n    return false\n  }\n\n  const start = min ? Math.max(date.getTime(), min.getTime()) : date\n  const end = max\n    ? Math.min(date.getTime(), max.getTime())\n    : new Date(new Date().getFullYear(), 11, 31)\n\n  for (\n    const currentDate = new Date(start);\n    currentDate <= end;\n    currentDate.setDate(currentDate.getDate() + 1)\n  ) {\n    if (!isDateDisabled(currentDate, min, max, disabledDates)) {\n      return false\n    }\n  }\n\n  return false\n}\n\n/**\n * Checks if a month is selected based on start and end dates.\n * @param date - The date representing the month.\n * @param start - Start date.\n * @param end - End date.\n * @returns True if the month is selected, false otherwise.\n */\nexport const isMonthSelected = (date: Date, start: Date | null, end: Date | null): boolean => {\n  const year = date.getFullYear()\n  const month = date.getMonth()\n\n  if (start !== null && year === start.getFullYear() && month === start.getMonth()) {\n    return true\n  }\n\n  if (end !== null && year === end.getFullYear() && month === end.getMonth()) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Checks if a month is within a specified range.\n * @param date - The date representing the month.\n * @param start - Start date.\n * @param end - End date.\n * @returns True if the month is within the range, false otherwise.\n */\nexport const isMonthInRange = (date: Date, start: Date | null, end: Date | null): boolean => {\n  const year = date.getFullYear()\n  const month = date.getMonth()\n  const _start = start ? start.getFullYear() * 12 + start.getMonth() : null\n  const _end = end ? end.getFullYear() * 12 + end.getMonth() : null\n  const _date = year * 12 + month\n\n  return !!(_start && _end && _start <= _date && _date <= _end)\n}\n\n/**\n * Checks if two dates are the same calendar date.\n * @param date - First date.\n * @param date2 - Second date.\n * @returns True if both dates are the same, false otherwise.\n */\nexport const isSameDateAs = (date: Date | null, date2: Date | null): boolean => {\n  if (date instanceof Date && date2 instanceof Date) {\n    return (\n      date.getDate() === date2.getDate() &&\n      date.getMonth() === date2.getMonth() &&\n      date.getFullYear() === date2.getFullYear()\n    )\n  }\n\n  if (date === null && date2 === null) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Checks if a date is today.\n * @param date - The date to check.\n * @returns True if the date is today, false otherwise.\n */\nexport const isToday = (date: Date): boolean => {\n  const today = new Date()\n  return isSameDateAs(date, today)\n}\n\n/**\n * Checks if a year is disabled based on the 'year' period type.\n * @param date - The date representing the year to check.\n * @param min - Minimum allowed date.\n * @param max - Maximum allowed date.\n * @param disabledDates - Criteria for disabled dates.\n * @returns True if the year is disabled, false otherwise.\n */\nexport const isYearDisabled = (\n  date: Date,\n  min?: Date | null,\n  max?: Date | null,\n  disabledDates?: DisabledDate | DisabledDate[]\n) => {\n  const year = date.getFullYear()\n  const minYear = min ? min.getFullYear() : null\n  const maxYear = max ? max.getFullYear() : null\n\n  if (minYear && year < minYear) {\n    return true\n  }\n\n  if (maxYear && year > maxYear) {\n    return true\n  }\n\n  if (disabledDates === undefined) {\n    return false\n  }\n\n  const start = min ? Math.max(date.getTime(), min.getTime()) : date\n  const end = max\n    ? Math.min(date.getTime(), max.getTime())\n    : new Date(new Date().getFullYear(), 11, 31)\n\n  for (\n    const currentDate = new Date(start);\n    currentDate <= end;\n    currentDate.setDate(currentDate.getDate() + 1)\n  ) {\n    if (!isDateDisabled(currentDate, min, max, disabledDates)) {\n      return false\n    }\n  }\n\n  return false\n}\n\n/**\n * Checks if a year is selected based on start and end dates.\n * @param date - The date representing the year.\n * @param start - Start date.\n * @param end - End date.\n * @returns True if the year matches the start's or end's year, false otherwise.\n */\nexport const isYearSelected = (date: Date, start: Date | null, end: Date | null): boolean => {\n  const year = date.getFullYear()\n\n  if (start !== null && year === start.getFullYear()) {\n    return true\n  }\n\n  if (end !== null && year === end.getFullYear()) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Checks if a year is within a specified range.\n * @param date - The date representing the year.\n * @param start - Start date.\n * @param end - End date.\n * @returns True if the year's value lies between start's year and end's year, false otherwise.\n */\nexport const isYearInRange = (date: Date, start: Date | null, end: Date | null): boolean => {\n  const year = date.getFullYear()\n  const _start = start ? start.getFullYear() : null\n  const _end = end ? end.getFullYear() : null\n\n  return !!(_start && _end && _start <= year && year <= _end)\n}\n\n/**\n * Removes the time component from a Date object.\n * @param date - The original date.\n * @returns A new Date object with the time set to 00:00:00.\n */\nexport const removeTimeFromDate = (date: Date): Date => {\n  const clearedDate = new Date(date)\n  clearedDate.setHours(0, 0, 0, 0)\n  return clearedDate\n}\n\n/**\n * Copies the time (hours, minutes, seconds, milliseconds) from one Date to another.\n *\n * @param {Date} target - The date whose time will be updated.\n * @param {Date | null} source - The date to copy the time from.\n * @returns {Date} A new Date instance with the date from `target` and time from `source`.\n */\nexport const setTimeFromDate = (target: Date, source: Date | null): Date => {\n  if (!(source instanceof Date)) {\n    return target\n  }\n\n  const result = new Date(target) // create a copy to avoid mutation\n  result.setHours(\n    source.getHours(),\n    source.getMinutes(),\n    source.getSeconds(),\n    source.getMilliseconds()\n  )\n\n  return result\n}\n"]},"metadata":{},"sourceType":"module"}