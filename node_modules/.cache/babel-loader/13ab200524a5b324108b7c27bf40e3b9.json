{"ast":null,"code":"import { __rest, __spreadArray, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CConditionalPortal } from '../conditional-portal/CConditionalPortal.js';\nvar CToaster = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      className = _a.className,\n      placement = _a.placement,\n      push = _a.push,\n      rest = __rest(_a, [\"children\", \"className\", \"placement\", \"push\"]);\n\n  var _b = useState([]),\n      toasts = _b[0],\n      setToasts = _b[1];\n\n  var index = useRef(0);\n  useEffect(function () {\n    index.current++;\n\n    if (push) {\n      addToast(push);\n    }\n  }, [push]);\n\n  var addToast = function (push) {\n    setToasts(function (state) {\n      return __spreadArray(__spreadArray([], state, true), [React.cloneElement(push, {\n        index: index.current,\n        innerKey: index.current,\n        onClose: function (index) {\n          return setToasts(function (state) {\n            return state.filter(function (i) {\n              return i.props.index !== index;\n            });\n          });\n        }\n      })], false);\n    });\n  };\n\n  return React.createElement(CConditionalPortal, {\n    portal: typeof placement === 'string'\n  }, toasts.length > 0 || children ? React.createElement(\"div\", __assign({\n    className: classNames('toaster toast-container', {\n      'position-fixed': placement,\n      'top-0': placement && placement.includes('top'),\n      'top-50 translate-middle-y': placement && placement.includes('middle'),\n      'bottom-0': placement && placement.includes('bottom'),\n      'start-0': placement && placement.includes('start'),\n      'start-50 translate-middle-x': placement && placement.includes('center'),\n      'end-0': placement && placement.includes('end')\n    }, className)\n  }, rest, {\n    ref: ref\n  }), children, toasts.map(function (toast, index) {\n    return React.cloneElement(toast, {\n      visible: true,\n      key: index\n    });\n  })) : null);\n});\nCToaster.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  placement: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf(['top-start', 'top-center', 'top-end', 'middle-start', 'middle-center', 'middle-end', 'bottom-start', 'bottom-center', 'bottom-end'])]),\n  push: PropTypes.any\n};\nCToaster.displayName = 'CToaster';\nexport { CToaster };","map":{"version":3,"mappings":"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","names":["CToaster","forwardRef","_a","ref","className","placement","push","rest","useState","toasts","setToasts","index","useRef","useEffect","current","addToast","state","React","cloneElement","innerKey","onClose","filter","i","props","CConditionalPortal","portal","length","children","__assign","classNames","includes","map","toast","visible","key","propTypes","PropTypes","node","string","oneOfType","oneOf","any","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\toast\\CToaster.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes, useEffect, useState, useRef, ReactElement } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { CConditionalPortal } from '../conditional-portal'\n\nimport type { CToastProps } from './CToast'\n\nexport interface CToasterProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Describes the placement of your component.\n   *\n   * @type 'top-start' | 'top' | 'top-end' | 'middle-start' | 'middle' | 'middle-end' | 'bottom-start' | 'bottom' | 'bottom-end' | string\n   */\n  placement?:\n    | 'top-start'\n    | 'top-center'\n    | 'top-end'\n    | 'middle-start'\n    | 'middle-center'\n    | 'middle-end'\n    | 'bottom-start'\n    | 'bottom-center'\n    | 'bottom-end'\n    | string\n  /**\n   * Adds new `CToast` to `CToaster`.\n   */\n  push?: ReactElement<CToastProps>\n}\n\nexport const CToaster = forwardRef<HTMLDivElement, CToasterProps>(\n  ({ children, className, placement, push, ...rest }, ref) => {\n    const [toasts, setToasts] = useState<ReactElement<CToastProps>[]>([])\n    const index = useRef<number>(0)\n\n    useEffect(() => {\n      index.current++\n      if (push) {\n        addToast(push)\n      }\n    }, [push])\n\n    const addToast = (push: ReactElement<CToastProps>) => {\n      setToasts((state) => [\n        ...state,\n        React.cloneElement(push, {\n          index: index.current,\n          innerKey: index.current,\n          onClose: (index: number) =>\n            setToasts((state) => state.filter((i) => i.props.index !== index)),\n        }),\n      ])\n    }\n\n    return (\n      <CConditionalPortal portal={typeof placement === 'string'}>\n        {toasts.length > 0 || children ? (\n          <div\n            className={classNames(\n              'toaster toast-container',\n              {\n                'position-fixed': placement,\n                'top-0': placement && placement.includes('top'),\n                'top-50 translate-middle-y': placement && placement.includes('middle'),\n                'bottom-0': placement && placement.includes('bottom'),\n                'start-0': placement && placement.includes('start'),\n                'start-50 translate-middle-x': placement && placement.includes('center'),\n                'end-0': placement && placement.includes('end'),\n              },\n              className\n            )}\n            {...rest}\n            ref={ref}\n          >\n            {children}\n            {toasts.map((toast, index) => React.cloneElement(toast, { visible: true, key: index }))}\n          </div>\n        ) : null}\n      </CConditionalPortal>\n    )\n  }\n)\n\nCToaster.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  placement: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.oneOf([\n      'top-start',\n      'top-center',\n      'top-end',\n      'middle-start',\n      'middle-center',\n      'middle-end',\n      'bottom-start',\n      'bottom-center',\n      'bottom-end',\n    ]),\n  ]),\n  push: PropTypes.any,\n}\n\nCToaster.displayName = 'CToaster'\n"]},"metadata":{},"sourceType":"module"}