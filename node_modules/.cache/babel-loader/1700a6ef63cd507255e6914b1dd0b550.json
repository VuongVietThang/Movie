{"ast":null,"code":"import { __rest, __spreadArray, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useRef, useState, useMemo, useEffect } from 'react';\nimport classNames from '../../_virtual/index.js';\nimport PropTypes from 'prop-types';\nimport { CFormControlWrapper } from '../form/CFormControlWrapper.js';\nimport { CConditionalPortal } from '../conditional-portal/CConditionalPortal.js';\nimport { CMultiSelectNativeSelect } from './CMultiSelectNativeSelect.js';\nimport { CMultiSelectOptions } from './CMultiSelectOptions.js';\nimport { CMultiSelectSelection } from './CMultiSelectSelection.js';\nimport { useDropdownWithPopper } from '../../hooks/useDropdownWithPopper.js';\nimport '@popperjs/core';\nimport getNextActiveElement from '../../utils/getNextActiveElement.js';\nimport { flattenOptionsArray, isExternalSearch, filterOptionsList, createOption, selectOptions, isGlobalSearch, getOptionsList } from './utils.js';\nvar CMultiSelect = forwardRef(function (_a, ref) {\n  var _b;\n\n  var allowCreateOptions = _a.allowCreateOptions,\n      _c = _a.ariaCleanerLabel,\n      ariaCleanerLabel = _c === void 0 ? 'Clear all selections' : _c,\n      className = _a.className,\n      _d = _a.cleaner,\n      cleaner = _d === void 0 ? true : _d,\n      clearSearchOnSelect = _a.clearSearchOnSelect,\n      container = _a.container,\n      disabled = _a.disabled,\n      feedback = _a.feedback,\n      feedbackInvalid = _a.feedbackInvalid,\n      feedbackValid = _a.feedbackValid,\n      id = _a.id,\n      invalid = _a.invalid,\n      label = _a.label,\n      loading = _a.loading,\n      _e = _a.multiple,\n      multiple = _e === void 0 ? true : _e,\n      name = _a.name,\n      onChange = _a.onChange,\n      onFilterChange = _a.onFilterChange,\n      onHide = _a.onHide,\n      onShow = _a.onShow,\n      options = _a.options,\n      _f = _a.optionsMaxHeight,\n      optionsMaxHeight = _f === void 0 ? 'auto' : _f,\n      _g = _a.optionsStyle,\n      optionsStyle = _g === void 0 ? 'checkbox' : _g,\n      optionsTemplate = _a.optionsTemplate,\n      optionsGroupsTemplate = _a.optionsGroupsTemplate,\n      _h = _a.placeholder,\n      placeholder = _h === void 0 ? 'Select...' : _h,\n      _j = _a.portal,\n      portal = _j === void 0 ? false : _j,\n      required = _a.required,\n      _k = _a.resetSelectionOnOptionsChange,\n      resetSelectionOnOptionsChange = _k === void 0 ? false : _k,\n      _l = _a.search,\n      search = _l === void 0 ? true : _l,\n      _m = _a.searchNoResultsLabel,\n      searchNoResultsLabel = _m === void 0 ? 'No results found' : _m,\n      _o = _a.selectAll,\n      selectAll = _o === void 0 ? true : _o,\n      _p = _a.selectAllLabel,\n      selectAllLabel = _p === void 0 ? 'Select all options' : _p,\n      _q = _a.selectionType,\n      selectionType = _q === void 0 ? 'tags' : _q,\n      _r = _a.selectionTypeCounterText,\n      selectionTypeCounterText = _r === void 0 ? 'item(s) selected' : _r,\n      size = _a.size,\n      text = _a.text,\n      tooltipFeedback = _a.tooltipFeedback,\n      valid = _a.valid,\n      value = _a.value,\n      virtualScroller = _a.virtualScroller,\n      _s = _a.visible,\n      visible = _s === void 0 ? false : _s,\n      _t = _a.visibleItems,\n      visibleItems = _t === void 0 ? 10 : _t,\n      rest = __rest(_a, [\"allowCreateOptions\", \"ariaCleanerLabel\", \"className\", \"cleaner\", \"clearSearchOnSelect\", \"container\", \"disabled\", \"feedback\", \"feedbackInvalid\", \"feedbackValid\", \"id\", \"invalid\", \"label\", \"loading\", \"multiple\", \"name\", \"onChange\", \"onFilterChange\", \"onHide\", \"onShow\", \"options\", \"optionsMaxHeight\", \"optionsStyle\", \"optionsTemplate\", \"optionsGroupsTemplate\", \"placeholder\", \"portal\", \"required\", \"resetSelectionOnOptionsChange\", \"search\", \"searchNoResultsLabel\", \"selectAll\", \"selectAllLabel\", \"selectionType\", \"selectionTypeCounterText\", \"size\", \"text\", \"tooltipFeedback\", \"valid\", \"value\", \"virtualScroller\", \"visible\", \"visibleItems\"]);\n\n  var _u = useDropdownWithPopper(),\n      dropdownMenuElement = _u.dropdownMenuElement,\n      dropdownRefElement = _u.dropdownRefElement,\n      isOpen = _u.isOpen,\n      closeDropdown = _u.closeDropdown,\n      openDropdown = _u.openDropdown,\n      toggleDropdown = _u.toggleDropdown,\n      updatePopper = _u.updatePopper;\n\n  var nativeSelectRef = useRef(null);\n  var searchRef = useRef(null);\n  var isInitialMount = useRef(true);\n\n  var _v = useState(''),\n      searchValue = _v[0],\n      setSearchValue = _v[1];\n\n  var _w = useState([]),\n      selected = _w[0],\n      setSelected = _w[1];\n\n  var _x = useState([]),\n      userOptions = _x[0],\n      setUserOptions = _x[1];\n\n  var filteredOptions = useMemo(function () {\n    return flattenOptionsArray(isExternalSearch(search) ? __spreadArray(__spreadArray([], options, true), filterOptionsList(searchValue, userOptions), true) : filterOptionsList(searchValue, __spreadArray(__spreadArray([], options, true), userOptions, true)), true);\n  }, [options, searchValue, userOptions]);\n  var flattenedOptions = useMemo(function () {\n    return flattenOptionsArray(options).map(function (option) {\n      if (value && Array.isArray(value)) {\n        return __assign(__assign({}, option), {\n          selected: value.includes(option.value)\n        });\n      }\n\n      if (value === option.value) {\n        return __assign(__assign({}, option), {\n          selected: true\n        });\n      }\n\n      return option;\n    });\n  }, [options, value]);\n  var userOption = useMemo(function () {\n    if (allowCreateOptions && filteredOptions.some(function (option) {\n      return option.label && option.label.toLowerCase() === searchValue.toLowerCase();\n    })) {\n      return false;\n    }\n\n    return searchRef.current && createOption(String(searchValue), flattenedOptions);\n  }, [filteredOptions, searchValue]);\n  useEffect(function () {\n    if (resetSelectionOnOptionsChange) {\n      return setSelected([]);\n    }\n\n    var _selected = flattenedOptions.filter(function (option) {\n      return option.selected === true;\n    });\n\n    var deselected = flattenedOptions.filter(function (option) {\n      return option.selected === false;\n    });\n\n    if (_selected.length > 0) {\n      setSelected(selectOptions(multiple, _selected, selected, deselected));\n    }\n  }, [flattenedOptions]);\n  useEffect(function () {\n    if (!isInitialMount.current && onFilterChange) {\n      onFilterChange(searchValue);\n    }\n  }, [searchValue]);\n  useEffect(function () {\n    if (!isInitialMount.current && nativeSelectRef.current) {\n      nativeSelectRef.current.dispatchEvent(new Event('change', {\n        bubbles: true\n      }));\n    }\n\n    updatePopper();\n  }, [JSON.stringify(selected)]);\n  useEffect(function () {\n    visible ? openDropdown() : closeDropdown();\n  }, [visible]);\n  useEffect(function () {\n    var _a;\n\n    if (isOpen) {\n      if (onShow) onShow();\n\n      if (portal && dropdownMenuElement.current && dropdownRefElement.current) {\n        dropdownMenuElement.current.style.minWidth = \"\".concat(dropdownRefElement.current.offsetWidth, \"px\");\n      }\n\n      (_a = searchRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n\n    return function () {\n      if (onHide) onHide();\n      setSearchValue('');\n\n      if (searchRef.current) {\n        searchRef.current.value = '';\n      }\n    };\n  }, [isOpen]);\n  useEffect(function () {\n    isInitialMount.current = false;\n  }, []);\n\n  var handleSearchChange = function (event) {\n    setSearchValue(event.target.value);\n  };\n\n  var handleSearchKeyDown = function (event) {\n    if (!isOpen) {\n      openDropdown();\n    }\n\n    if (event.key === 'ArrowDown' && dropdownMenuElement.current && searchRef.current && searchRef.current.value.length === searchRef.current.selectionStart) {\n      event.preventDefault();\n      var items = getOptionsList(dropdownMenuElement.current);\n      var target = event.target;\n      getNextActiveElement(items, target, event.key === 'ArrowDown', !items.includes(target)).focus();\n      return;\n    }\n\n    if (event.key === 'Enter' && searchValue && allowCreateOptions) {\n      event.preventDefault();\n\n      if (userOption) {\n        setSelected(__spreadArray(__spreadArray([], selected, true), userOption, true));\n        setUserOptions(__spreadArray(__spreadArray([], userOptions, true), userOption, true));\n      }\n\n      if (!userOption) {\n        setSelected(__spreadArray(__spreadArray([], selected, true), [filteredOptions.find(function (option) {\n          return String(option.label).toLowerCase() === searchValue.toLowerCase();\n        })], false));\n      }\n\n      setSearchValue('');\n\n      if (searchRef.current) {\n        searchRef.current.value = '';\n      }\n\n      return;\n    }\n\n    if (searchValue.length > 0) {\n      return;\n    }\n\n    if (event.key === 'Backspace' || event.key === 'Delete') {\n      var last_1 = selected.filter(function (option) {\n        return !option.disabled;\n      }).pop();\n\n      if (last_1) {\n        setSelected(selected.filter(function (option) {\n          return option.value !== last_1.value;\n        }));\n      }\n    }\n  };\n\n  var handleTogglerKeyDown = function (event) {\n    if (!isOpen && (event.key === 'Enter' || event.key === 'ArrowDown')) {\n      event.preventDefault();\n      openDropdown();\n      return;\n    }\n\n    if (isOpen && dropdownMenuElement.current && event.key === 'ArrowDown') {\n      event.preventDefault();\n      var items = getOptionsList(dropdownMenuElement.current);\n      var target = event.target;\n      getNextActiveElement(items, target, event.key === 'ArrowDown', !items.includes(target)).focus();\n    }\n  };\n\n  var handleGlobalSearch = function (event) {\n    if (isGlobalSearch(search) && searchRef.current && (event.key.length === 1 || event.key === 'Backspace' || event.key === 'Delete')) {\n      searchRef.current.focus();\n    }\n  };\n\n  var handleOnOptionClick = function (option) {\n    if (!multiple) {\n      setSelected([option]);\n      closeDropdown();\n      setSearchValue('');\n\n      if (searchRef.current) {\n        searchRef.current.value = '';\n      }\n\n      return;\n    }\n\n    if (option.custom && !userOptions.some(function (_option) {\n      return _option.value === option.value;\n    })) {\n      setUserOptions(__spreadArray(__spreadArray([], userOptions, true), [option], false));\n    }\n\n    if (clearSearchOnSelect || option.custom) {\n      setSearchValue('');\n\n      if (searchRef.current) {\n        searchRef.current.value = '';\n        searchRef.current.focus();\n      }\n    }\n\n    if (selected.some(function (_option) {\n      return _option.value === option.value;\n    })) {\n      setSelected(selected.filter(function (_option) {\n        return _option.value !== option.value;\n      }));\n    } else {\n      setSelected(__spreadArray(__spreadArray([], selected, true), [option], false));\n    }\n  };\n\n  var handleSelectAll = function () {\n    setSelected(selectOptions(multiple, __spreadArray(__spreadArray([], flattenedOptions.filter(function (option) {\n      return !option.disabled;\n    }), true), userOptions, true), selected));\n  };\n\n  var handleDeselectAll = function () {\n    setSelected(selected.filter(function (option) {\n      return option.disabled;\n    }));\n  };\n\n  return React.createElement(CFormControlWrapper, {\n    describedby: rest['aria-describedby'],\n    feedback: feedback,\n    feedbackInvalid: feedbackInvalid,\n    feedbackValid: feedbackValid,\n    id: id,\n    invalid: invalid,\n    label: label,\n    text: text,\n    tooltipFeedback: tooltipFeedback,\n    valid: valid\n  }, React.createElement(CMultiSelectNativeSelect, {\n    id: id,\n    multiple: multiple,\n    name: name,\n    options: selected,\n    required: required,\n    value: multiple ? selected.map(function (option) {\n      return option.value.toString();\n    }) : selected.map(function (option) {\n      return option.value;\n    })[0],\n    onChange: function () {\n      return onChange && onChange(selected);\n    },\n    ref: nativeSelectRef\n  }), React.createElement(\"div\", {\n    className: classNames('form-multi-select', (_b = {}, _b[\"form-multi-select-\".concat(size)] = size, _b.disabled = disabled, _b['is-invalid'] = invalid, _b['is-valid'] = valid, _b.show = isOpen, _b), className),\n    onKeyDown: handleGlobalSearch,\n    \"aria-expanded\": isOpen,\n    ref: ref\n  }, React.createElement(\"div\", __assign({\n    className: \"form-multi-select-input-group\"\n  }, !search && !disabled && {\n    tabIndex: 0\n  }, {\n    onClick: function () {\n      return !disabled && openDropdown();\n    },\n    onKeyDown: handleTogglerKeyDown,\n    ref: dropdownRefElement\n  }), React.createElement(CMultiSelectSelection, {\n    disabled: disabled,\n    multiple: multiple,\n    onRemove: function (option) {\n      return !disabled && handleOnOptionClick(option);\n    },\n    placeholder: placeholder,\n    search: search,\n    selected: selected,\n    selectionType: selectionType,\n    selectionTypeCounterText: selectionTypeCounterText\n  }, search && React.createElement(\"input\", __assign({\n    type: \"text\",\n    className: \"form-multi-select-search\",\n    disabled: disabled,\n    autoComplete: \"off\",\n    onChange: handleSearchChange,\n    onKeyDown: handleSearchKeyDown\n  }, selected.length === 0 && {\n    placeholder: placeholder\n  }, selected.length > 0 && selectionType === 'counter' && {\n    placeholder: \"\".concat(selected.length, \" \").concat(selectionTypeCounterText)\n  }, selected.length > 0 && !multiple && {\n    placeholder: selected.map(function (option) {\n      return option.label;\n    })[0]\n  }, multiple && selected.length > 0 && selectionType !== 'counter' && {\n    size: searchValue.length + 2\n  }, {\n    ref: searchRef\n  })), !search && selected.length === 0 && React.createElement(\"span\", {\n    className: \"form-multi-select-placeholder\"\n  }, placeholder)), React.createElement(\"div\", {\n    className: \"form-multi-select-buttons\"\n  }, !disabled && cleaner && selected.length > 0 && React.createElement(\"button\", {\n    type: \"button\",\n    className: \"form-multi-select-cleaner\",\n    onClick: function () {\n      return handleDeselectAll();\n    },\n    \"aria-label\": ariaCleanerLabel\n  }), React.createElement(\"button\", __assign({\n    type: \"button\",\n    className: \"form-multi-select-indicator\",\n    onClick: function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (!disabled) {\n        toggleDropdown();\n      }\n    }\n  }, disabled && {\n    tabIndex: -1\n  })))), React.createElement(CConditionalPortal, {\n    container: container,\n    portal: portal\n  }, React.createElement(\"div\", {\n    className: classNames('form-multi-select-dropdown', {\n      show: portal && isOpen\n    }),\n    onKeyDown: handleGlobalSearch,\n    role: \"menu\",\n    ref: dropdownMenuElement\n  }, multiple && selectAll && React.createElement(\"button\", {\n    type: \"button\",\n    className: \"form-multi-select-all\",\n    onClick: function () {\n      return handleSelectAll();\n    }\n  }, selectAllLabel), React.createElement(CMultiSelectOptions, {\n    loading: loading,\n    onOptionOnClick: function (option) {\n      return !disabled && handleOnOptionClick(option);\n    },\n    options: filteredOptions.length === 0 && allowCreateOptions ? userOption || [] : filteredOptions,\n    optionsMaxHeight: optionsMaxHeight,\n    optionsStyle: optionsStyle,\n    optionsTemplate: optionsTemplate,\n    optionsGroupsTemplate: optionsGroupsTemplate,\n    searchNoResultsLabel: searchNoResultsLabel,\n    selected: selected,\n    virtualScroller: virtualScroller,\n    visibleItems: visibleItems\n  })))));\n});\nCMultiSelect.propTypes = __assign({\n  allowCreateOptions: PropTypes.bool,\n  ariaCleanerLabel: PropTypes.string,\n  className: PropTypes.string,\n  cleaner: PropTypes.bool,\n  clearSearchOnSelect: PropTypes.bool,\n  container: PropTypes.any,\n  disabled: PropTypes.bool,\n  loading: PropTypes.bool,\n  multiple: PropTypes.bool,\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  onFilterChange: PropTypes.func,\n  onHide: PropTypes.func,\n  onShow: PropTypes.func,\n  options: PropTypes.array.isRequired,\n  optionsMaxHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  optionsStyle: PropTypes.oneOf(['checkbox', 'text']),\n  optionsTemplate: PropTypes.func,\n  optionsGroupsTemplate: PropTypes.func,\n  placeholder: PropTypes.string,\n  portal: PropTypes.bool,\n  required: PropTypes.bool,\n  resetSelectionOnOptionsChange: PropTypes.bool,\n  search: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['external', 'global']), PropTypes.shape({\n    external: PropTypes.bool.isRequired,\n    global: PropTypes.bool.isRequired\n  })]),\n  searchNoResultsLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  selectAll: PropTypes.bool,\n  selectAllLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  selectionType: PropTypes.oneOf(['counter', 'tags', 'text']),\n  selectionTypeCounterText: PropTypes.string,\n  size: PropTypes.oneOf(['sm', 'lg']),\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.arrayOf(PropTypes.number), PropTypes.arrayOf(PropTypes.string)]),\n  virtualScroller: PropTypes.bool,\n  visible: PropTypes.bool,\n  visibleItems: PropTypes.number\n}, CFormControlWrapper.propTypes);\nCMultiSelect.displayName = 'CMultiSelect';\nexport { CMultiSelect };","map":{"version":3,"mappings":"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","names":["CMultiSelect","forwardRef","_a","ref","_c","ariaCleanerLabel","className","_d","cleaner","clearSearchOnSelect","container","disabled","feedback","feedbackInvalid","feedbackValid","id","invalid","label","loading","_e","multiple","name","onChange","onFilterChange","onHide","onShow","options","_f","optionsMaxHeight","_g","optionsStyle","optionsTemplate","optionsGroupsTemplate","_h","placeholder","_j","portal","required","_k","resetSelectionOnOptionsChange","_l","search","_m","searchNoResultsLabel","_o","selectAll","_p","selectAllLabel","_q","selectionType","_r","selectionTypeCounterText","size","text","tooltipFeedback","valid","value","virtualScroller","_s","visible","_t","visibleItems","rest","__rest","useDropdownWithPopper","dropdownMenuElement","dropdownRefElement","isOpen","closeDropdown","openDropdown","toggleDropdown","updatePopper","nativeSelectRef","useRef","searchRef","isInitialMount","useState","searchValue","setSearchValue","selected","setSelected","userOptions","setUserOptions","filteredOptions","useMemo","isExternalSearch","__spreadArray","filterOptionsList","flattenedOptions","map","option","Array","isArray","includes","userOption","allowCreateOptions","some","toLowerCase","current","createOption","String","useEffect","_selected","filter","deselected","length","selectOptions","dispatchEvent","Event","bubbles","JSON","stringify","style","minWidth","concat","offsetWidth","handleSearchChange","event","target","handleSearchKeyDown","key","selectionStart","preventDefault","items","getOptionsList","getNextActiveElement","focus","find","last_1","pop","handleTogglerKeyDown","handleGlobalSearch","isGlobalSearch","handleOnOptionClick","custom","_option","handleSelectAll","handleDeselectAll","React","CFormControlWrapper","describedby","CMultiSelectNativeSelect","toString","classNames","_b","onKeyDown","tabIndex","onClick","CMultiSelectSelection","onRemove","__assign","type","autoComplete","stopPropagation","CConditionalPortal","show","role","CMultiSelectOptions","onOptionOnClick","propTypes","PropTypes","bool","string","any","func","array","isRequired","oneOfType","number","oneOf","shape","external","global","node","arrayOf","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\multi-select\\CMultiSelect.tsx"],"sourcesContent":["import React, {\n  forwardRef,\n  HTMLAttributes,\n  ReactNode,\n  useEffect,\n  useState,\n  useRef,\n  useMemo,\n} from 'react'\n\nimport classNames from 'classnames'\nimport PropTypes from 'prop-types'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from '../form/CFormControlWrapper'\n\nimport { CConditionalPortal } from '../conditional-portal'\nimport { CMultiSelectNativeSelect } from './CMultiSelectNativeSelect'\nimport { CMultiSelectOptions } from './CMultiSelectOptions'\nimport { CMultiSelectSelection } from './CMultiSelectSelection'\n\nimport { useDropdownWithPopper } from '../../hooks'\nimport { getNextActiveElement } from '../../utils'\nimport {\n  createOption,\n  filterOptionsList,\n  flattenOptionsArray,\n  getOptionsList,\n  isExternalSearch,\n  isGlobalSearch,\n  selectOptions,\n} from './utils'\nimport type { Option, OptionsGroup, Search, SelectedOption } from './types'\n\nexport interface CMultiSelectProps\n  extends Omit<CFormControlWrapperProps, 'floatingClassName' | 'floatingLabel'>,\n    Omit<HTMLAttributes<HTMLDivElement>, 'onChange'> {\n  /**\n   * Allow users to create options if they are not in the list of options.\n   *\n   * @since 4.11.0\n   */\n  allowCreateOptions?: boolean\n  /**\n   * A string that provides an accessible label for the cleaner button. This label is read by screen readers to describe the action associated with the button.\n   *\n   * @since 5.8.0\n   */\n  ariaCleanerLabel?: string\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Enables selection cleaner element.\n   */\n  cleaner?: boolean\n  /**\n   * Clear current search on selecting an item.\n   *\n   * @since 4.11.0\n   */\n  clearSearchOnSelect?: boolean\n  /**\n   * Appends the dropdown to a specific element. You can pass an HTML element or function that returns a single element.\n   *\n   * @since 5.8.0\n   */\n  container?: DocumentFragment | Element | (() => DocumentFragment | Element | null) | null\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Set the id attribute for the native select element.\n   *\n   * **[Deprecated since v5.3.0]** The name attribute for the native select element is generated based on the `id` property:\n   * - `<select name=\"\\{id\\}-multi-select\" />`\n   */\n  id?: string\n  /**\n   * When set, the options list will have a loading style: loading spinner and reduced opacity.\n   *\n   * @since 4.11.0\n   */\n  loading?: boolean\n  /**\n   * It specifies that multiple options can be selected at once.\n   */\n  multiple?: boolean\n  /**\n   * The name attribute for the select element.\n   *\n   * @since 5.3.0\n   */\n  name?: string\n  /**\n   * Execute a function when a user changes the selected option.\n   */\n  onChange?: (selected: Option[]) => void\n  /**\n   * Execute a function when the filter value changed.\n   *\n   * @since 4.8.0\n   */\n  onFilterChange?: (value: string) => void\n  /**\n   * The callback is fired when the Multi Select component requests to be hidden.\n   */\n  onHide?: () => void\n  /**\n   * The callback is fired when the Multi Select component requests to be shown.\n   */\n  onShow?: () => void\n  /**\n   * List of option elements.\n   */\n  options: (Option | OptionsGroup)[]\n  /**\n   * Sets maxHeight of options list.\n   */\n  optionsMaxHeight?: number | string\n  /**\n   * Sets option style.\n   */\n  optionsStyle?: 'checkbox' | 'text'\n  /**\n   * Custom template for options.\n   *\n   * @since 4.12.0\n   */\n  optionsTemplate?: (option: Option) => ReactNode\n  /**\n   * Custom template for options groups.\n   *\n   * @since 4.12.0\n   */\n  optionsGroupsTemplate?: (option: OptionsGroup) => ReactNode\n  /**\n   * Specifies a short hint that is visible in the search input.\n   */\n  placeholder?: string\n  /**\n   * Generates dropdown menu using createPortal.\n   *\n   * @since 5.8.0\n   */\n  portal?: boolean\n  /**\n   * When it is present, it indicates that the user must choose a value before submitting the form.\n   */\n  required?: boolean\n  /**\n   * Determines whether the selected options should be cleared when the options list is updated. When set to true, any previously selected options will be reset whenever the options list undergoes a change. This ensures that outdated selections are not retained when new options are provided.\n   *\n   * @since 5.3.0\n   */\n  resetSelectionOnOptionsChange?: boolean\n  /**\n   * The `search` prop determines how the search input element is enabled and behaves. It accepts multiple types to provide flexibility in configuring search behavior:\n   *\n   * - `true` : Enables the default search input element with standard behavior.\n   * - `'external'`: Enables an external search mechanism, possibly integrating with external APIs or services.\n   * - `'global'`: When set, the user can perform searches across the entire component, regardless of where their focus is within the component.\n   * - `{ external?: boolean; global?: boolean }`: Allows for granular control over the search behavior by specifying individual properties.  It is useful when you also want to use external and global search.\n   */\n  search?: Search\n  /**\n   * Sets the label for no results when filtering.\n   */\n  searchNoResultsLabel?: string | ReactNode\n  /**\n   * Enables select all button.\n   */\n  selectAll?: boolean\n  /**\n   * Sets the select all button label.\n   */\n  selectAllLabel?: string | ReactNode\n  /**\n   * Sets the selection style.\n   */\n  selectionType?: 'counter' | 'tags' | 'text'\n  /**\n   * Sets the counter selection label.\n   */\n  selectionTypeCounterText?: string\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Sets the initially selected values for the multi-select component.\n   *\n   * @since 5.13.0\n   */\n  value?: string | number | (string | number)[]\n  /**\n   * Enable virtual scroller for the options list.\n   *\n   * @since 4.8.0\n   */\n  virtualScroller?: boolean\n  /**\n   * Toggle the visibility of multi select dropdown.\n   */\n  visible?: boolean\n  /**\n   * Amount of visible items when virtualScroller is set to `true`.\n   *\n   * @since 4.8.0\n   */\n  visibleItems?: number\n}\n\nexport const CMultiSelect = forwardRef<HTMLDivElement, CMultiSelectProps>(\n  (\n    {\n      allowCreateOptions,\n      ariaCleanerLabel = 'Clear all selections',\n      className,\n      cleaner = true,\n      clearSearchOnSelect,\n      container,\n      disabled,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      id,\n      invalid,\n      label,\n      loading,\n      multiple = true,\n      name,\n      onChange,\n      onFilterChange,\n      onHide,\n      onShow,\n      options,\n      optionsMaxHeight = 'auto',\n      optionsStyle = 'checkbox',\n      optionsTemplate,\n      optionsGroupsTemplate,\n      placeholder = 'Select...',\n      portal = false,\n      required,\n      resetSelectionOnOptionsChange = false,\n      search = true,\n      searchNoResultsLabel = 'No results found',\n      selectAll = true,\n      selectAllLabel = 'Select all options',\n      selectionType = 'tags',\n      selectionTypeCounterText = 'item(s) selected',\n      size,\n      text,\n      tooltipFeedback,\n      valid,\n      value,\n      virtualScroller,\n      visible = false,\n      visibleItems = 10,\n      ...rest\n    },\n    ref\n  ) => {\n    const {\n      dropdownMenuElement,\n      dropdownRefElement,\n      isOpen,\n      closeDropdown,\n      openDropdown,\n      toggleDropdown,\n      updatePopper,\n    } = useDropdownWithPopper()\n    const nativeSelectRef = useRef<HTMLSelectElement>(null)\n    const searchRef = useRef<HTMLInputElement>(null)\n    const isInitialMount = useRef(true)\n\n    const [searchValue, setSearchValue] = useState('')\n    const [selected, setSelected] = useState<SelectedOption[]>([])\n    const [userOptions, setUserOptions] = useState<Option[]>([])\n\n    const filteredOptions = useMemo(\n      () =>\n        flattenOptionsArray(\n          isExternalSearch(search)\n            ? [...options, ...filterOptionsList(searchValue, userOptions)]\n            : filterOptionsList(searchValue, [...options, ...userOptions]),\n          true\n        ),\n      [options, searchValue, userOptions]\n    )\n\n    const flattenedOptions = useMemo(\n      () =>\n        flattenOptionsArray(options).map((option) => {\n          if (value && Array.isArray(value)) {\n            return {\n              ...option,\n              selected: value.includes(option.value),\n            }\n          }\n\n          if (value === option.value) {\n            return {\n              ...option,\n              selected: true,\n            }\n          }\n\n          return option\n        }),\n      [options, value]\n    )\n\n    const userOption = useMemo(() => {\n      if (\n        allowCreateOptions &&\n        filteredOptions.some(\n          (option) => option.label && option.label.toLowerCase() === searchValue.toLowerCase()\n        )\n      ) {\n        return false\n      }\n\n      return searchRef.current && createOption(String(searchValue), flattenedOptions)\n    }, [filteredOptions, searchValue])\n\n    useEffect(() => {\n      if (resetSelectionOnOptionsChange) {\n        return setSelected([])\n      }\n\n      const _selected = flattenedOptions.filter((option: Option) => option.selected === true)\n      const deselected = flattenedOptions.filter(\n        (option: Option) => option.selected === false\n      ) as Option[]\n\n      if (_selected.length > 0) {\n        setSelected(selectOptions(multiple, _selected, selected, deselected))\n      }\n    }, [flattenedOptions])\n\n    useEffect(() => {\n      if (!isInitialMount.current && onFilterChange) {\n        onFilterChange(searchValue)\n      }\n    }, [searchValue])\n\n    useEffect(() => {\n      if (!isInitialMount.current && nativeSelectRef.current) {\n        nativeSelectRef.current.dispatchEvent(new Event('change', { bubbles: true }))\n      }\n\n      updatePopper()\n    }, [JSON.stringify(selected)])\n\n    useEffect(() => {\n      visible ? openDropdown() : closeDropdown()\n    }, [visible])\n\n    useEffect(() => {\n      if (isOpen) {\n        if (onShow) onShow()\n\n        if (portal && dropdownMenuElement.current && dropdownRefElement.current) {\n          dropdownMenuElement.current.style.minWidth = `${(dropdownRefElement.current as HTMLElement).offsetWidth}px`\n        }\n\n        searchRef.current?.focus()\n      }\n\n      return () => {\n        if (onHide) onHide()\n\n        setSearchValue('')\n        if (searchRef.current) {\n          searchRef.current.value = ''\n        }\n      }\n    }, [isOpen])\n\n    useEffect(() => {\n      isInitialMount.current = false\n    }, [])\n\n    const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      setSearchValue(event.target.value)\n    }\n\n    const handleSearchKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (!isOpen) {\n        openDropdown()\n      }\n\n      if (\n        event.key === 'ArrowDown' &&\n        dropdownMenuElement.current &&\n        searchRef.current &&\n        searchRef.current.value.length === searchRef.current.selectionStart\n      ) {\n        event.preventDefault()\n\n        const items = getOptionsList(dropdownMenuElement.current)\n        const target = event.target as HTMLDivElement\n\n        getNextActiveElement(\n          items,\n          target,\n          event.key === 'ArrowDown',\n          !items.includes(target)\n        ).focus()\n        return\n      }\n\n      if (event.key === 'Enter' && searchValue && allowCreateOptions) {\n        event.preventDefault()\n\n        if (userOption) {\n          setSelected([...selected, ...userOption])\n          setUserOptions([...userOptions, ...userOption])\n        }\n\n        if (!userOption) {\n          setSelected([\n            ...selected,\n            filteredOptions.find(\n              (option) => String(option.label).toLowerCase() === searchValue.toLowerCase()\n            ) as Option,\n          ])\n        }\n\n        setSearchValue('')\n        if (searchRef.current) {\n          searchRef.current.value = ''\n        }\n\n        return\n      }\n\n      if (searchValue.length > 0) {\n        return\n      }\n\n      if (event.key === 'Backspace' || event.key === 'Delete') {\n        const last = selected.filter((option: Option) => !option.disabled).pop()\n\n        if (last) {\n          setSelected(selected.filter((option: Option) => option.value !== last.value))\n        }\n      }\n    }\n\n    const handleTogglerKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (!isOpen && (event.key === 'Enter' || event.key === 'ArrowDown')) {\n        event.preventDefault()\n        openDropdown()\n        return\n      }\n\n      if (isOpen && dropdownMenuElement.current && event.key === 'ArrowDown') {\n        event.preventDefault()\n        const items = getOptionsList(dropdownMenuElement.current)\n        const target = event.target as HTMLDivElement\n\n        getNextActiveElement(\n          items,\n          target,\n          event.key === 'ArrowDown',\n          !items.includes(target)\n        ).focus()\n      }\n    }\n\n    const handleGlobalSearch = (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (\n        isGlobalSearch(search) &&\n        searchRef.current &&\n        (event.key.length === 1 || event.key === 'Backspace' || event.key === 'Delete')\n      ) {\n        searchRef.current.focus()\n      }\n    }\n\n    const handleOnOptionClick = (option: Option) => {\n      if (!multiple) {\n        setSelected([option] as SelectedOption[])\n        closeDropdown()\n        setSearchValue('')\n        if (searchRef.current) {\n          searchRef.current.value = ''\n        }\n\n        return\n      }\n\n      if (option.custom && !userOptions.some((_option) => _option.value === option.value)) {\n        setUserOptions([...userOptions, option])\n      }\n\n      if (clearSearchOnSelect || option.custom) {\n        setSearchValue('')\n        if (searchRef.current) {\n          searchRef.current.value = ''\n          searchRef.current.focus()\n        }\n      }\n\n      if (selected.some((_option) => _option.value === option.value)) {\n        setSelected(selected.filter((_option) => _option.value !== option.value))\n      } else {\n        setSelected([...selected, option] as SelectedOption[])\n      }\n    }\n\n    const handleSelectAll = () => {\n      setSelected(\n        selectOptions(\n          multiple,\n          [...flattenedOptions.filter((option: Option) => !option.disabled), ...userOptions],\n          selected\n        )\n      )\n    }\n\n    const handleDeselectAll = () => {\n      setSelected(selected.filter((option) => option.disabled))\n    }\n\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <CMultiSelectNativeSelect\n          id={id}\n          multiple={multiple}\n          name={name}\n          options={selected}\n          required={required}\n          value={\n            multiple\n              ? selected.map((option: SelectedOption) => option.value.toString())\n              : selected.map((option: SelectedOption) => option.value)[0]\n          }\n          onChange={() => onChange && onChange(selected)}\n          ref={nativeSelectRef}\n        />\n        <div\n          className={classNames(\n            'form-multi-select',\n            {\n              [`form-multi-select-${size}`]: size,\n              disabled,\n              'is-invalid': invalid,\n              'is-valid': valid,\n              show: isOpen,\n            },\n            className\n          )}\n          onKeyDown={handleGlobalSearch}\n          aria-expanded={isOpen}\n          ref={ref}\n        >\n          <div\n            className=\"form-multi-select-input-group\"\n            {...(!search && !disabled && { tabIndex: 0 })}\n            onClick={() => !disabled && openDropdown()}\n            onKeyDown={handleTogglerKeyDown}\n            ref={dropdownRefElement}\n          >\n            <CMultiSelectSelection\n              disabled={disabled}\n              multiple={multiple}\n              onRemove={(option) => !disabled && handleOnOptionClick(option)}\n              placeholder={placeholder}\n              search={search}\n              selected={selected}\n              selectionType={selectionType}\n              selectionTypeCounterText={selectionTypeCounterText}\n            >\n              {search && (\n                <input\n                  type=\"text\"\n                  className=\"form-multi-select-search\"\n                  disabled={disabled}\n                  autoComplete=\"off\"\n                  onChange={handleSearchChange}\n                  onKeyDown={handleSearchKeyDown}\n                  {...(selected.length === 0 && { placeholder: placeholder })}\n                  {...(selected.length > 0 &&\n                    selectionType === 'counter' && {\n                      placeholder: `${selected.length} ${selectionTypeCounterText}`,\n                    })}\n                  {...(selected.length > 0 &&\n                    !multiple && { placeholder: selected.map((option) => option.label)[0] })}\n                  {...(multiple &&\n                    selected.length > 0 &&\n                    selectionType !== 'counter' && { size: searchValue.length + 2 })}\n                  ref={searchRef}\n                ></input>\n              )}\n              {!search && selected.length === 0 && (\n                <span className=\"form-multi-select-placeholder\">{placeholder}</span>\n              )}\n            </CMultiSelectSelection>\n            <div className=\"form-multi-select-buttons\">\n              {!disabled && cleaner && selected.length > 0 && (\n                <button\n                  type=\"button\"\n                  className=\"form-multi-select-cleaner\"\n                  onClick={() => handleDeselectAll()}\n                  aria-label={ariaCleanerLabel}\n                ></button>\n              )}\n              <button\n                type=\"button\"\n                className=\"form-multi-select-indicator\"\n                onClick={(event) => {\n                  event.preventDefault()\n                  event.stopPropagation()\n\n                  if (!disabled) {\n                    toggleDropdown()\n                  }\n                }}\n                {...(disabled && { tabIndex: -1 })}\n              ></button>\n            </div>\n          </div>\n          <CConditionalPortal container={container} portal={portal}>\n            <div\n              className={classNames('form-multi-select-dropdown', {\n                show: portal && isOpen,\n              })}\n              onKeyDown={handleGlobalSearch}\n              role=\"menu\"\n              ref={dropdownMenuElement}\n            >\n              {multiple && selectAll && (\n                <button\n                  type=\"button\"\n                  className=\"form-multi-select-all\"\n                  onClick={() => handleSelectAll()}\n                >\n                  {selectAllLabel}\n                </button>\n              )}\n              <CMultiSelectOptions\n                loading={loading}\n                onOptionOnClick={(option) => !disabled && handleOnOptionClick(option)}\n                options={\n                  filteredOptions.length === 0 && allowCreateOptions\n                    ? userOption || []\n                    : filteredOptions\n                }\n                optionsMaxHeight={optionsMaxHeight}\n                optionsStyle={optionsStyle}\n                optionsTemplate={optionsTemplate}\n                optionsGroupsTemplate={optionsGroupsTemplate}\n                searchNoResultsLabel={searchNoResultsLabel}\n                selected={selected}\n                virtualScroller={virtualScroller}\n                visibleItems={visibleItems}\n              />\n            </div>\n          </CConditionalPortal>\n        </div>\n      </CFormControlWrapper>\n    )\n  }\n)\n\nCMultiSelect.propTypes = {\n  allowCreateOptions: PropTypes.bool,\n  ariaCleanerLabel: PropTypes.string,\n  className: PropTypes.string,\n  cleaner: PropTypes.bool,\n  clearSearchOnSelect: PropTypes.bool,\n  container: PropTypes.any,\n  disabled: PropTypes.bool,\n  loading: PropTypes.bool,\n  multiple: PropTypes.bool,\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  onFilterChange: PropTypes.func,\n  onHide: PropTypes.func,\n  onShow: PropTypes.func,\n  options: PropTypes.array.isRequired,\n  optionsMaxHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  optionsStyle: PropTypes.oneOf(['checkbox', 'text']),\n  optionsTemplate: PropTypes.func,\n  optionsGroupsTemplate: PropTypes.func,\n  placeholder: PropTypes.string,\n  portal: PropTypes.bool,\n  required: PropTypes.bool,\n  resetSelectionOnOptionsChange: PropTypes.bool,\n  search: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'external' | 'global'>(['external', 'global']),\n    PropTypes.shape({\n      external: PropTypes.bool.isRequired,\n      global: PropTypes.bool.isRequired,\n    }),\n  ]),\n  searchNoResultsLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  selectAll: PropTypes.bool,\n  selectAllLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  selectionType: PropTypes.oneOf(['counter', 'tags', 'text']),\n  selectionTypeCounterText: PropTypes.string,\n  size: PropTypes.oneOf(['sm', 'lg']),\n  value: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.number),\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  virtualScroller: PropTypes.bool,\n  visible: PropTypes.bool,\n  visibleItems: PropTypes.number,\n  ...CFormControlWrapper.propTypes,\n}\n\nCMultiSelect.displayName = 'CMultiSelect'\n"]},"metadata":{},"sourceType":"module"}