{"ast":null,"code":"import { __rest, __assign, __spreadArray } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useRef, useId, useState, useEffect, useCallback, useImperativeHandle } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CCollapse } from '../collapse/CCollapse.js';\nimport getNextActiveElement from '../../utils/getNextActiveElement.js';\nvar CStepper = forwardRef(function (_a, ref) {\n  var controlledActiveStepIndex = _a.activeStepIndex,\n      className = _a.className,\n      _b = _a.defaultActiveStepIndex,\n      defaultActiveStepIndex = _b === void 0 ? 0 : _b,\n      _c = _a.layout,\n      layout = _c === void 0 ? 'horizontal' : _c,\n      _d = _a.linear,\n      linear = _d === void 0 ? true : _d,\n      onFinish = _a.onFinish,\n      onReset = _a.onReset,\n      onStepChange = _a.onStepChange,\n      onStepValidationComplete = _a.onStepValidationComplete,\n      _e = _a.steps,\n      steps = _e === void 0 ? [] : _e,\n      _f = _a.stepButtonLayout,\n      stepButtonLayout = _f === void 0 ? 'horizontal' : _f,\n      _g = _a.validation,\n      validation = _g === void 0 ? true : _g,\n      rest = __rest(_a, [\"activeStepIndex\", \"className\", \"defaultActiveStepIndex\", \"layout\", \"linear\", \"onFinish\", \"onReset\", \"onStepChange\", \"onStepValidationComplete\", \"steps\", \"stepButtonLayout\", \"validation\"]);\n\n  var stepperRef = useRef(null);\n  var stepsRef = useRef(null);\n  var stepButtonRefs = useRef([]);\n  var uniqueId = useId();\n  var isControlled = controlledActiveStepIndex !== undefined;\n\n  var _h = useState(isControlled ? controlledActiveStepIndex : defaultActiveStepIndex),\n      internalActiveStepIndex = _h[0],\n      setInternalActiveStepIndex = _h[1];\n\n  var _j = useState(false),\n      isFinished = _j[0],\n      setIsFinished = _j[1];\n\n  var activeStepIndex = isControlled ? controlledActiveStepIndex : internalActiveStepIndex; // Sync state if controlled prop changes\n\n  useEffect(function () {\n    if (isControlled) {\n      setInternalActiveStepIndex(controlledActiveStepIndex);\n    }\n  }, [controlledActiveStepIndex, isControlled]); // Ensure stepButtonRefs array has the correct size\n\n  useEffect(function () {\n    stepButtonRefs.current = stepButtonRefs.current.slice(0, steps.length);\n  }, [steps.length]);\n  var isStepValid = useCallback(function (index) {\n    var _a;\n\n    if (!validation) {\n      return true;\n    }\n\n    var currentStepData = steps[index];\n    var form = (_a = currentStepData === null || currentStepData === void 0 ? void 0 : currentStepData.formRef) === null || _a === void 0 ? void 0 : _a.current;\n\n    if (form) {\n      var isValid = form.checkValidity();\n      onStepValidationComplete === null || onStepValidationComplete === void 0 ? void 0 : onStepValidationComplete({\n        stepNumber: index + 1,\n        isValid: isValid\n      });\n\n      if (form && !isValid) {\n        form.reportValidity();\n        return false;\n      }\n    }\n\n    return true;\n  }, [steps, validation]);\n  var setActiveStep = useCallback(function (index, bypassValidation) {\n    if (bypassValidation === void 0) {\n      bypassValidation = false;\n    }\n\n    if (index < 0 || index >= steps.length || index === activeStepIndex) {\n      return;\n    } // Validate current step before moving forward\n\n\n    if (!bypassValidation && index > activeStepIndex && !isStepValid(activeStepIndex)) {\n      return;\n    }\n\n    if (!isControlled) {\n      setInternalActiveStepIndex(index);\n    }\n\n    onStepChange === null || onStepChange === void 0 ? void 0 : onStepChange(index + 1);\n  }, [steps.length, activeStepIndex, isStepValid, isControlled, onStepChange]);\n\n  var handleStepClick = function (index) {\n    if (linear) {\n      setActiveStep(index, index <= activeStepIndex);\n      return;\n    }\n\n    setActiveStep(index, true);\n  };\n\n  var handleNext = function () {\n    if (activeStepIndex < steps.length - 1) {\n      setActiveStep(activeStepIndex + 1);\n    } else {\n      handleFinish(); // Attempt finish if already on last step\n    }\n  };\n\n  var handlePrev = function () {\n    if (activeStepIndex > 0) {\n      setActiveStep(activeStepIndex - 1, true); // Bypass validation when going back\n    }\n  };\n\n  var handleFinish = function () {\n    if (activeStepIndex === steps.length - 1 && isStepValid(activeStepIndex)) {\n      setIsFinished(true);\n      onFinish === null || onFinish === void 0 ? void 0 : onFinish();\n    }\n  };\n\n  var handleReset = function () {\n    var _a;\n\n    if (validation) {\n      steps.forEach(function (step) {\n        var _a, _b;\n\n        return (_b = (_a = step.formRef) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.reset();\n      });\n    }\n\n    if (!isControlled) {\n      setInternalActiveStepIndex(defaultActiveStepIndex);\n    }\n\n    setIsFinished(false);\n    onStepChange === null || onStepChange === void 0 ? void 0 : onStepChange(defaultActiveStepIndex);\n    onReset === null || onReset === void 0 ? void 0 : onReset();\n    (_a = stepButtonRefs.current[defaultActiveStepIndex]) === null || _a === void 0 ? void 0 : _a.focus();\n  };\n\n  var handleKeyDown = function (event) {\n    var target = event.target;\n    var currentButton = target.closest('button.stepper-step-button');\n\n    if (!currentButton || !stepsRef.current) {\n      return;\n    }\n\n    var buttons = __spreadArray([], stepsRef.current.querySelectorAll('button.stepper-step-button'), true);\n\n    var nextElement = null;\n\n    switch (event.key) {\n      case 'ArrowRight':\n      case 'ArrowDown':\n        {\n          nextElement = getNextActiveElement(buttons, currentButton, true, false);\n          break;\n        }\n\n      case 'ArrowLeft':\n      case 'ArrowUp':\n        {\n          nextElement = getNextActiveElement(buttons, currentButton, false, false);\n          break;\n        }\n\n      case 'Home':\n        {\n          nextElement = buttons[0];\n          break;\n        }\n\n      case 'End':\n        {\n          nextElement = buttons.at(-1);\n          break;\n        }\n\n      default:\n        {\n          return;\n        }\n    }\n\n    if (nextElement) {\n      event.preventDefault();\n      nextElement.focus();\n    }\n  }; // Expose methods via ref\n\n\n  useImperativeHandle(ref, function () {\n    return {\n      next: handleNext,\n      prev: handlePrev,\n      finish: handleFinish,\n      reset: handleReset\n    };\n  });\n  var isVertical = layout === 'vertical';\n  return React.createElement(\"div\", __assign({\n    className: classNames('stepper', {\n      'stepper-vertical': isVertical\n    }, className),\n    ref: stepperRef\n  }, rest), React.createElement(\"ol\", {\n    className: \"stepper-steps\",\n    \"aria-orientation\": isVertical ? 'vertical' : 'horizontal',\n    ref: stepsRef,\n    onKeyDown: handleKeyDown,\n    role: \"tablist\"\n  }, steps.map(function (step, index) {\n    var _a;\n\n    var isActive = !isFinished && index === activeStepIndex;\n    var isComplete = isFinished || index < activeStepIndex;\n    var isDisabled = isFinished || linear && index > activeStepIndex + 1;\n    var stepId = \"stepper-\".concat(rest.id || uniqueId, \"-step-\").concat(index);\n    var panelId = \"stepper-\".concat(rest.id || uniqueId, \"-panel-\").concat(index);\n    return React.createElement(\"li\", {\n      key: index,\n      className: classNames('stepper-step', stepButtonLayout),\n      role: \"presentation\"\n    }, React.createElement(\"button\", __assign({\n      type: \"button\",\n      className: classNames('stepper-step-button', {\n        active: isActive,\n        complete: isComplete\n      }),\n      disabled: isDisabled,\n      id: stepId,\n      role: \"tab\",\n      onClick: function () {\n        return handleStepClick(index);\n      },\n      ref: function (el) {\n        return stepButtonRefs.current[index] = el;\n      },\n      \"aria-selected\": isActive\n    }, step.content && {\n      'aria-controls': panelId\n    }, {\n      tabIndex: isActive ? 0 : -1\n    }), React.createElement(\"span\", {\n      className: \"stepper-step-indicator\"\n    }, isComplete ? React.createElement(\"span\", {\n      className: \"stepper-step-indicator-icon\"\n    }) : React.createElement(\"span\", {\n      className: \"stepper-step-indicator-text\"\n    }, (_a = step.indicator) !== null && _a !== void 0 ? _a : index + 1)), React.createElement(\"span\", {\n      className: \"stepper-step-label\"\n    }, step.label)), index < steps.length - 1 && React.createElement(\"div\", {\n      className: \"stepper-step-connector\"\n    }), step.content && isVertical && React.createElement(CCollapse, {\n      className: \"stepper-step-content\",\n      id: panelId,\n      role: \"tabpanel\",\n      visible: isActive,\n      \"aria-hidden\": !isActive,\n      \"aria-labelledby\": stepId,\n      \"aria-live\": \"polite\"\n    }, step.content));\n  })), !isVertical && steps.some(function (step) {\n    return step.content !== undefined && step.content !== null;\n  }) && React.createElement(\"div\", {\n    className: \"stepper-content\"\n  }, steps.map(function (step, index) {\n    var isActive = !isFinished && index === activeStepIndex;\n    var stepId = \"stepper-\".concat(rest.id || uniqueId, \"-step-\").concat(index);\n    var panelId = \"stepper-\".concat(rest.id || uniqueId, \"-panel-\").concat(index);\n    return React.createElement(\"div\", {\n      key: index,\n      className: classNames('stepper-pane', {\n        show: isActive,\n        active: isActive\n      }),\n      id: panelId,\n      role: \"tabpanel\",\n      \"aria-hidden\": !isActive,\n      \"aria-labelledby\": stepId,\n      \"aria-live\": \"polite\"\n    }, step.content);\n  })));\n});\nCStepper.displayName = 'CStepper';\nCStepper.propTypes = {\n  activeStepIndex: PropTypes.number,\n  className: PropTypes.string,\n  defaultActiveStepIndex: PropTypes.number,\n  layout: PropTypes.oneOf(['horizontal', 'vertical']),\n  linear: PropTypes.bool,\n  onFinish: PropTypes.func,\n  onReset: PropTypes.func,\n  onStepChange: PropTypes.func,\n  onStepValidationComplete: PropTypes.func,\n  steps: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.node.isRequired,\n    content: PropTypes.node,\n    formRef: PropTypes.object // Check for object shape might be better\n\n  }).isRequired).isRequired,\n  stepButtonLayout: PropTypes.oneOf(['horizontal', 'vertical']),\n  validation: PropTypes.bool\n};\nexport { CStepper };","map":{"version":3,"mappings":"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","names":["CStepper","forwardRef","_a","ref","controlledActiveStepIndex","className","_b","defaultActiveStepIndex","_c","layout","_d","linear","onFinish","onReset","onStepChange","onStepValidationComplete","_e","steps","_f","stepButtonLayout","_g","validation","rest","stepperRef","useRef","stepsRef","stepButtonRefs","uniqueId","useId","isControlled","undefined","useState","internalActiveStepIndex","setInternalActiveStepIndex","isFinished","setIsFinished","activeStepIndex","useEffect","current","slice","length","isStepValid","useCallback","index","currentStepData","form","formRef","isValid","checkValidity","stepNumber","reportValidity","setActiveStep","bypassValidation","handleStepClick","handleNext","handleFinish","handlePrev","handleReset","forEach","step","focus","handleKeyDown","event","target","currentButton","closest","buttons","__spreadArray","querySelectorAll","nextElement","key","getNextActiveElement","at","preventDefault","useImperativeHandle","next","prev","finish","reset","isVertical","React","__assign","classNames","onKeyDown","role","map","isActive","isComplete","isDisabled","stepId","id","concat","panelId","type","active","complete","disabled","onClick","el","content","tabIndex","indicator","label","CCollapse","visible","some","show","displayName","propTypes","PropTypes","number","string","oneOf","bool","func","arrayOf","shape","node","isRequired","object"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\stepper\\CStepper.tsx"],"sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useRef,\n  useImperativeHandle,\n  forwardRef,\n  HTMLAttributes,\n  KeyboardEvent,\n  useCallback,\n  useId,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CCollapse } from '../collapse'\n\nimport { getNextActiveElement } from '../../utils'\nimport type { StepperRef, StepperStepData, StepperStepValidationResult } from './types'\n\nexport interface CStepperProps extends Omit<HTMLAttributes<HTMLDivElement>, 'onReset'> {\n  /**\n   * Controls the currently active step in the React Stepper component (Controlled mode).\n   *\n   * Use this prop when you want full control over the active step from the parent component.\n   */\n  activeStepIndex?: number\n\n  /**\n   * Custom CSS class name applied to the main React Stepper container.\n   */\n  className?: string\n\n  /**\n   * Sets the initial active step index for the Form Wizard when the React Stepper is used in Uncontrolled mode.\n   *\n   * Useful when you want the Stepper to manage its own state internally.\n   */\n  defaultActiveStepIndex?: number\n\n  /**\n   * Defines the overall layout orientation of the React Stepper component.\n   *\n   * - `'horizontal'`: Step indicators and content are placed horizontally (default).\n   * - `'vertical'`: Step indicators and content are stacked vertically.\n   *\n   * Choose `'vertical'` layout for mobile or narrow designs.\n   */\n  layout?: 'horizontal' | 'vertical'\n\n  /**\n   * Defines whether the Stepper enforces linear progression (cannot skip steps).\n   *\n   * - `true`: Users must complete steps sequentially.\n   * - `false`: Users can jump freely between steps.\n   */\n  linear?: boolean\n\n  /**\n   * Callback fired when the user completes the last step of the Form Wizard.\n   *\n   * Use this to trigger a submit action or redirect after the final step.\n   */\n  onFinish?: () => void\n\n  /**\n   * Callback fired when the user triggers the reset action on the React Stepper.\n   *\n   * Use this to reset the Stepper state or clear related form data.\n   */\n  onReset?: () => void\n\n  /**\n   * Callback fired when the active step changes in the React Stepper component.\n   */\n  onStepChange?: (stepNumber: number) => void\n\n  /**\n   * Callback fired after a validation check completes for a specific step in the Form Wizard.\n   *\n   * Receives an object with the step index and the validation result (`true` or `false`).\n   *\n   * Useful for custom validation handling across multi-step forms.\n   */\n  onStepValidationComplete?: ({ stepNumber, isValid }: StepperStepValidationResult) => void\n\n  /**\n   * Defines the steps for the React Sxtepper component.\n   *\n   * Each step is an object containing a label, optional content, and an optional `formRef` for validation.\n   */\n  steps: StepperStepData[]\n\n  /**\n   * Controls the internal layout of the step indicator (icon and label) inside each step when using a horizontal layout.\n   *\n   * - `'vertical'` – Places the label below the indicator icon.\n   * - `'horizontal'` – Places the label beside the indicator icon (default).\n   *\n   * This prop has no effect when `layout=\"vertical\"` is used.\n   */\n  stepButtonLayout?: 'vertical' | 'horizontal'\n\n  /**\n   * Enables or disables built-in form validation inside the React Stepper.\n   *\n   * When enabled (`true`), each step's associated form must be valid before advancing to the next step.\n   *\n   * Requires each step to provide a `formRef`.\n   */\n  validation?: boolean\n}\n\nexport const CStepper = forwardRef<StepperRef, CStepperProps>(\n  (\n    {\n      activeStepIndex: controlledActiveStepIndex,\n      className,\n      defaultActiveStepIndex = 0,\n      layout = 'horizontal',\n      linear = true,\n      onFinish,\n      onReset,\n      onStepChange,\n      onStepValidationComplete,\n      steps = [],\n      stepButtonLayout = 'horizontal',\n      validation = true,\n      ...rest\n    },\n    ref\n  ) => {\n    const stepperRef = useRef<HTMLDivElement>(null)\n    const stepsRef = useRef<HTMLOListElement>(null)\n    const stepButtonRefs = useRef<(HTMLButtonElement | null)[]>([])\n    const uniqueId = useId()\n\n    const isControlled = controlledActiveStepIndex !== undefined\n    const [internalActiveStepIndex, setInternalActiveStepIndex] = useState(\n      isControlled ? controlledActiveStepIndex : defaultActiveStepIndex\n    )\n    const [isFinished, setIsFinished] = useState(false)\n\n    const activeStepIndex = isControlled ? controlledActiveStepIndex : internalActiveStepIndex\n\n    // Sync state if controlled prop changes\n    useEffect(() => {\n      if (isControlled) {\n        setInternalActiveStepIndex(controlledActiveStepIndex)\n      }\n    }, [controlledActiveStepIndex, isControlled])\n\n    // Ensure stepButtonRefs array has the correct size\n    useEffect(() => {\n      stepButtonRefs.current = stepButtonRefs.current.slice(0, steps.length)\n    }, [steps.length])\n\n    const isStepValid = useCallback(\n      (index: number): boolean => {\n        if (!validation) {\n          return true\n        }\n\n        const currentStepData = steps[index]\n        const form = currentStepData?.formRef?.current\n\n        if (form) {\n          const isValid = form.checkValidity()\n          onStepValidationComplete?.({\n            stepNumber: index + 1,\n            isValid,\n          })\n\n          if (form && !isValid) {\n            form.reportValidity()\n            return false\n          }\n        }\n\n        return true\n      },\n      [steps, validation]\n    )\n\n    const setActiveStep = useCallback(\n      (index: number, bypassValidation = false) => {\n        if (index < 0 || index >= steps.length || index === activeStepIndex) {\n          return\n        }\n\n        // Validate current step before moving forward\n        if (!bypassValidation && index > activeStepIndex && !isStepValid(activeStepIndex)) {\n          return\n        }\n\n        if (!isControlled) {\n          setInternalActiveStepIndex(index)\n        }\n        onStepChange?.(index + 1)\n      },\n      [steps.length, activeStepIndex, isStepValid, isControlled, onStepChange]\n    )\n\n    const handleStepClick = (index: number) => {\n      if (linear) {\n        setActiveStep(index, index <= activeStepIndex)\n        return\n      }\n\n      setActiveStep(index, true)\n    }\n\n    const handleNext = () => {\n      if (activeStepIndex < steps.length - 1) {\n        setActiveStep(activeStepIndex + 1)\n      } else {\n        handleFinish() // Attempt finish if already on last step\n      }\n    }\n\n    const handlePrev = () => {\n      if (activeStepIndex > 0) {\n        setActiveStep(activeStepIndex - 1, true) // Bypass validation when going back\n      }\n    }\n\n    const handleFinish = () => {\n      if (activeStepIndex === steps.length - 1 && isStepValid(activeStepIndex)) {\n        setIsFinished(true)\n        onFinish?.()\n      }\n    }\n\n    const handleReset = () => {\n      if (validation) {\n        steps.forEach((step) => step.formRef?.current?.reset())\n      }\n\n      if (!isControlled) {\n        setInternalActiveStepIndex(defaultActiveStepIndex)\n      }\n\n      setIsFinished(false)\n      onStepChange?.(defaultActiveStepIndex)\n      onReset?.()\n      stepButtonRefs.current[defaultActiveStepIndex]?.focus()\n    }\n\n    const handleKeyDown = (event: KeyboardEvent<HTMLOListElement>) => {\n      const target = event.target as HTMLElement\n      const currentButton = target.closest('button.stepper-step-button') as HTMLButtonElement\n\n      if (!currentButton || !stepsRef.current) {\n        return\n      }\n\n      const buttons = [\n        ...stepsRef.current.querySelectorAll<HTMLButtonElement>('button.stepper-step-button'),\n      ]\n\n      let nextElement: HTMLElement | null = null\n\n      switch (event.key) {\n        case 'ArrowRight':\n        case 'ArrowDown': {\n          nextElement = getNextActiveElement(buttons, currentButton, true, false)\n          break\n        }\n        case 'ArrowLeft':\n        case 'ArrowUp': {\n          nextElement = getNextActiveElement(buttons, currentButton, false, false)\n          break\n        }\n        case 'Home': {\n          nextElement = buttons[0]\n          break\n        }\n        case 'End': {\n          nextElement = buttons.at(-1) as HTMLButtonElement\n          break\n        }\n        default: {\n          return\n        }\n      }\n\n      if (nextElement) {\n        event.preventDefault()\n        nextElement.focus()\n      }\n    }\n\n    // Expose methods via ref\n    useImperativeHandle(ref, () => ({\n      next: handleNext,\n      prev: handlePrev,\n      finish: handleFinish,\n      reset: handleReset,\n    }))\n\n    const isVertical = layout === 'vertical'\n\n    return (\n      <div\n        className={classNames(\n          'stepper',\n          {\n            'stepper-vertical': isVertical,\n          },\n          className\n        )}\n        ref={stepperRef}\n        {...rest}\n      >\n        <ol\n          className=\"stepper-steps\"\n          aria-orientation={isVertical ? 'vertical' : 'horizontal'}\n          ref={stepsRef}\n          onKeyDown={handleKeyDown}\n          role=\"tablist\"\n        >\n          {steps.map((step, index) => {\n            const isActive = !isFinished && index === activeStepIndex\n            const isComplete = isFinished || index < activeStepIndex\n            const isDisabled = isFinished || (linear && index > activeStepIndex + 1)\n            const stepId = `stepper-${rest.id || uniqueId}-step-${index}`\n            const panelId = `stepper-${rest.id || uniqueId}-panel-${index}`\n\n            return (\n              <li\n                key={index}\n                className={classNames('stepper-step', stepButtonLayout)}\n                role=\"presentation\"\n              >\n                <button\n                  type=\"button\"\n                  className={classNames('stepper-step-button', {\n                    active: isActive,\n                    complete: isComplete,\n                  })}\n                  disabled={isDisabled}\n                  id={stepId}\n                  role=\"tab\"\n                  onClick={() => handleStepClick(index)}\n                  ref={(el) => (stepButtonRefs.current[index] = el)}\n                  aria-selected={isActive}\n                  {...(step.content && {\n                    'aria-controls': panelId,\n                  })}\n                  tabIndex={isActive ? 0 : -1}\n                >\n                  <span className=\"stepper-step-indicator\">\n                    {isComplete ? (\n                      <span className=\"stepper-step-indicator-icon\" />\n                    ) : (\n                      <span className=\"stepper-step-indicator-text\">\n                        {step.indicator ?? index + 1}\n                      </span>\n                    )}\n                  </span>\n                  <span className=\"stepper-step-label\">{step.label}</span>\n                </button>\n                {index < steps.length - 1 && <div className=\"stepper-step-connector\" />}\n                {step.content && isVertical && (\n                  <CCollapse\n                    className=\"stepper-step-content\"\n                    id={panelId}\n                    role=\"tabpanel\"\n                    visible={isActive}\n                    aria-hidden={!isActive}\n                    aria-labelledby={stepId}\n                    aria-live=\"polite\"\n                  >\n                    {step.content}\n                  </CCollapse>\n                )}\n              </li>\n            )\n          })}\n        </ol>\n        {!isVertical &&\n          steps.some((step) => step.content !== undefined && step.content !== null) && (\n            <div className=\"stepper-content\">\n              {steps.map((step, index) => {\n                const isActive = !isFinished && index === activeStepIndex\n                const stepId = `stepper-${rest.id || uniqueId}-step-${index}`\n                const panelId = `stepper-${rest.id || uniqueId}-panel-${index}`\n                return (\n                  <div\n                    key={index}\n                    className={classNames('stepper-pane', {\n                      show: isActive,\n                      active: isActive,\n                    })}\n                    id={panelId}\n                    role=\"tabpanel\"\n                    aria-hidden={!isActive}\n                    aria-labelledby={stepId}\n                    aria-live=\"polite\"\n                  >\n                    {step.content}\n                  </div>\n                )\n              })}\n            </div>\n          )}\n      </div>\n    )\n  }\n)\n\nCStepper.displayName = 'CStepper'\n\nCStepper.propTypes = {\n  activeStepIndex: PropTypes.number,\n  className: PropTypes.string,\n  defaultActiveStepIndex: PropTypes.number,\n  layout: PropTypes.oneOf(['horizontal', 'vertical']),\n  linear: PropTypes.bool,\n  onFinish: PropTypes.func,\n  onReset: PropTypes.func,\n  onStepChange: PropTypes.func,\n  onStepValidationComplete: PropTypes.func,\n  steps: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.node.isRequired,\n      content: PropTypes.node,\n      formRef: PropTypes.object, // Check for object shape might be better\n    }).isRequired\n  ).isRequired,\n  stepButtonLayout: PropTypes.oneOf(['horizontal', 'vertical']),\n  validation: PropTypes.bool,\n}\n"]},"metadata":{},"sourceType":"module"}