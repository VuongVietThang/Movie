{"ast":null,"code":"import React, { forwardRef, useRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CConditionalPortal } from '../conditional-portal/CConditionalPortal.js';\nimport '../../node_modules/tslib/tslib.es6.js';\nimport { usePopper } from '../../hooks/usePopper.js';\nimport isRTL from '../../utils/isRTL.js';\nimport { useForkedRef } from '../../hooks/useForkedRef.js';\nvar CPicker = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      className = _a.className,\n      _b = _a.container,\n      container = _b === void 0 ? 'dropdown' : _b,\n      disabled = _a.disabled,\n      dropdownClassNames = _a.dropdownClassNames,\n      footer = _a.footer,\n      footerContent = _a.footerContent,\n      onHide = _a.onHide,\n      onShow = _a.onShow,\n      _c = _a.portal,\n      portal = _c === void 0 ? true : _c,\n      toggler = _a.toggler,\n      visible = _a.visible;\n  var pickerRef = useRef(null);\n  var pickerForkedRef = useForkedRef(ref, pickerRef);\n  var dropdownRef = useRef(null);\n  var togglerRef = useRef(null);\n\n  var _d = usePopper(),\n      initPopper = _d.initPopper,\n      destroyPopper = _d.destroyPopper;\n\n  var _e = useState(visible),\n      _visible = _e[0],\n      setVisible = _e[1];\n\n  var popperConfig = {\n    placement: isRTL(pickerRef.current) ? 'bottom-end' : 'bottom-start',\n    modifiers: [{\n      name: 'preventOverflow',\n      options: {\n        boundary: 'clippingParents'\n      }\n    }, {\n      name: 'offset',\n      options: {\n        offset: [0, 2]\n      }\n    }]\n  };\n  useEffect(function () {\n    setVisible(visible);\n  }, [visible]);\n  useEffect(function () {\n    if (container !== 'inline' && _visible) {\n      onShow && onShow();\n      window.addEventListener('mouseup', handleMouseUp);\n      window.addEventListener('keyup', handleKeyUp);\n      togglerRef.current && dropdownRef.current && initPopper(togglerRef.current, dropdownRef.current, popperConfig);\n    }\n\n    return function () {\n      onHide && onHide();\n      window.removeEventListener('mouseup', handleMouseUp);\n      window.removeEventListener('keyup', handleKeyUp);\n      destroyPopper();\n    };\n  }, [_visible]);\n\n  var handleKeyUp = function (event) {\n    if (event.key === 'Escape') {\n      setVisible(false);\n    }\n  };\n\n  var handleMouseUp = function (event) {\n    if (pickerRef.current && pickerRef.current.contains(event.target)) {\n      return;\n    }\n\n    if (dropdownRef.current && dropdownRef.current.contains(event.target)) {\n      return;\n    }\n\n    setVisible(false);\n  };\n\n  switch (container) {\n    case 'inline':\n      {\n        return React.createElement(\"div\", {\n          className: classNames('picker', className),\n          ref: pickerForkedRef\n        }, children);\n      }\n\n    default:\n      {\n        return React.createElement(\"div\", {\n          className: classNames(className, {\n            show: _visible\n          }),\n          onClick: function () {\n            return !disabled && setVisible(true);\n          },\n          ref: pickerForkedRef\n        }, toggler && React.isValidElement(toggler) && React.cloneElement(toggler, {\n          ref: togglerRef\n        }), React.createElement(CConditionalPortal, {\n          portal: portal\n        }, React.createElement(\"div\", {\n          className: classNames(dropdownClassNames, {\n            show: portal && _visible\n          }),\n          ref: dropdownRef\n        }, children, footer && footerContent)));\n      }\n  }\n});\nCPicker.displayName = 'CPicker';\nCPicker.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  container: PropTypes.oneOf(['dropdown', 'inline']),\n  disabled: PropTypes.bool,\n  dropdownClassNames: PropTypes.string,\n  footer: PropTypes.bool,\n  footerContent: PropTypes.node,\n  onHide: PropTypes.func,\n  onShow: PropTypes.func,\n  portal: PropTypes.bool,\n  toggler: PropTypes.node,\n  visible: PropTypes.bool\n};\nexport { CPicker };","map":{"version":3,"mappings":"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","names":["CPicker","forwardRef","_a","ref","className","_b","container","disabled","dropdownClassNames","footer","footerContent","onHide","onShow","_c","portal","toggler","visible","pickerRef","useRef","pickerForkedRef","useForkedRef","dropdownRef","togglerRef","usePopper","initPopper","destroyPopper","useState","_visible","setVisible","popperConfig","placement","isRTL","current","modifiers","name","options","boundary","offset","useEffect","window","addEventListener","handleMouseUp","handleKeyUp","removeEventListener","event","key","contains","target","React","classNames","children","show","onClick","isValidElement","cloneElement","CConditionalPortal","displayName","propTypes","PropTypes","node","string","oneOf","bool","func"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\picker\\CPicker.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes, ReactNode, useEffect, useRef, useState } from 'react'\n\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { Placement } from '@popperjs/core'\n\nimport { CConditionalPortal } from '../conditional-portal'\n\nimport { useForkedRef, usePopper } from '../../hooks'\nimport { isRTL } from '../../utils'\n\nexport interface CPickerProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Set container type for the component.\n   */\n  container?: 'dropdown' | 'inline'\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * A string of all className you want applied to the dropdown menu.\n   */\n  dropdownClassNames?: string\n  /**\n   * Toggle visibility of footer element.\n   */\n  footer?: boolean\n  /**\n   * Add custom elements to the footer.\n   */\n  footerContent?: ReactNode\n  /**\n   * Callback fired when the component requests to be hidden.\n   */\n  onHide?: () => void\n  /**\n   * Callback fired when the component requests to be shown.\n   */\n  onShow?: () => void\n  /**\n   * Generates dropdown menu using createPortal.\n   *\n   * @since 5.9.0\n   */\n  portal?: boolean\n  /**\n   * The content of toggler.\n   */\n  toggler?: ReactNode\n  /**\n   * Toggle the visibility of dropdown menu component.\n   */\n  visible?: boolean\n}\n\nexport const CPicker = forwardRef<HTMLDivElement | HTMLLIElement, CPickerProps>(\n  (\n    {\n      children,\n      className,\n      container = 'dropdown',\n      disabled,\n      dropdownClassNames,\n      footer,\n      footerContent,\n      onHide,\n      onShow,\n      portal = true,\n      toggler,\n      visible,\n    },\n    ref,\n  ) => {\n    const pickerRef = useRef<HTMLDivElement>(null)\n    const pickerForkedRef = useForkedRef(ref, pickerRef)\n    const dropdownRef = useRef<HTMLDivElement>(null)\n    const togglerRef = useRef<HTMLDivElement>(null)\n\n    const { initPopper, destroyPopper } = usePopper()\n\n    const [_visible, setVisible] = useState(visible)\n\n    const popperConfig = {\n      placement: (isRTL(pickerRef.current) ? 'bottom-end' : 'bottom-start') as Placement,\n      modifiers: [\n        {\n          name: 'preventOverflow',\n          options: {\n            boundary: 'clippingParents',\n          },\n        },\n        {\n          name: 'offset',\n          options: {\n            offset: [0, 2],\n          },\n        },\n      ],\n    }\n\n    useEffect(() => {\n      setVisible(visible)\n    }, [visible])\n\n    useEffect(() => {\n      if (container !== 'inline' && _visible) {\n        onShow && onShow()\n\n        window.addEventListener('mouseup', handleMouseUp)\n        window.addEventListener('keyup', handleKeyUp)\n\n        togglerRef.current &&\n          dropdownRef.current &&\n          initPopper(togglerRef.current, dropdownRef.current, popperConfig)\n      }\n\n      return () => {\n        onHide && onHide()\n\n        window.removeEventListener('mouseup', handleMouseUp)\n        window.removeEventListener('keyup', handleKeyUp)\n\n        destroyPopper()\n      }\n    }, [_visible])\n\n    const handleKeyUp = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        setVisible(false)\n      }\n    }\n\n    const handleMouseUp = (event: Event) => {\n      if (pickerRef.current && pickerRef.current.contains(event.target as HTMLElement)) {\n        return\n      }\n\n      if (dropdownRef.current && dropdownRef.current.contains(event.target as HTMLElement)) {\n        return\n      }\n\n      setVisible(false)\n    }\n\n    switch (container) {\n      case 'inline': {\n        return (\n          <div className={classNames('picker', className)} ref={pickerForkedRef}>\n            {children}\n          </div>\n        )\n      }\n      default: {\n        return (\n          <div\n            className={classNames(className, {\n              show: _visible,\n            })}\n            onClick={() => !disabled && setVisible(true)}\n            ref={pickerForkedRef}\n          >\n            {toggler &&\n              React.isValidElement(toggler) &&\n              React.cloneElement(toggler as React.ReactElement<any>, {\n                ref: togglerRef,\n              })}\n            <CConditionalPortal portal={portal}>\n              <div\n                className={classNames(dropdownClassNames, {\n                  show: portal && _visible,\n                })}\n                ref={dropdownRef}\n              >\n                {children}\n                {footer && footerContent}\n              </div>\n            </CConditionalPortal>\n          </div>\n        )\n      }\n    }\n  },\n)\n\nCPicker.displayName = 'CPicker'\n\nCPicker.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  container: PropTypes.oneOf(['dropdown', 'inline']),\n  disabled: PropTypes.bool,\n  dropdownClassNames: PropTypes.string,\n  footer: PropTypes.bool,\n  footerContent: PropTypes.node,\n  onHide: PropTypes.func,\n  onShow: PropTypes.func,\n  portal: PropTypes.bool,\n  toggler: PropTypes.node,\n  visible: PropTypes.bool,\n}\n"]},"metadata":{},"sourceType":"module"}