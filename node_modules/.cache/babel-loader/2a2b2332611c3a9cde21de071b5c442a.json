{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CFormControlWrapper } from './CFormControlWrapper.js';\nvar CFormSelect = forwardRef(function (_a, ref) {\n  var _b;\n\n  var children = _a.children,\n      className = _a.className,\n      feedback = _a.feedback,\n      feedbackInvalid = _a.feedbackInvalid,\n      feedbackValid = _a.feedbackValid,\n      floatingClassName = _a.floatingClassName,\n      floatingLabel = _a.floatingLabel,\n      htmlSize = _a.htmlSize,\n      id = _a.id,\n      invalid = _a.invalid,\n      label = _a.label,\n      options = _a.options,\n      size = _a.size,\n      text = _a.text,\n      tooltipFeedback = _a.tooltipFeedback,\n      valid = _a.valid,\n      rest = __rest(_a, [\"children\", \"className\", \"feedback\", \"feedbackInvalid\", \"feedbackValid\", \"floatingClassName\", \"floatingLabel\", \"htmlSize\", \"id\", \"invalid\", \"label\", \"options\", \"size\", \"text\", \"tooltipFeedback\", \"valid\"]);\n\n  return React.createElement(CFormControlWrapper, {\n    describedby: rest['aria-describedby'],\n    feedback: feedback,\n    feedbackInvalid: feedbackInvalid,\n    feedbackValid: feedbackValid,\n    floatingClassName: floatingClassName,\n    floatingLabel: floatingLabel,\n    id: id,\n    invalid: invalid,\n    label: label,\n    text: text,\n    tooltipFeedback: tooltipFeedback,\n    valid: valid\n  }, React.createElement(\"select\", __assign({\n    id: id,\n    className: classNames('form-select', (_b = {}, _b[\"form-select-\".concat(size)] = size, _b['is-invalid'] = invalid, _b['is-valid'] = valid, _b), className),\n    size: htmlSize\n  }, rest, {\n    ref: ref\n  }), options ? options.map(function (option, index) {\n    return React.createElement(\"option\", __assign({}, typeof option === 'object' && option.disabled && {\n      disabled: option.disabled\n    }, typeof option === 'object' && option.value !== undefined && {\n      value: option.value\n    }, {\n      key: index\n    }), typeof option === 'string' ? option : option.label);\n  }) : children));\n});\nCFormSelect.propTypes = __assign({\n  className: PropTypes.string,\n  htmlSize: PropTypes.number,\n  options: PropTypes.array\n}, CFormControlWrapper.propTypes);\nCFormSelect.displayName = 'CFormSelect';\nexport { CFormSelect };","map":{"version":3,"mappings":";;;;;IA+CaA,WAAW,GAAGC,UAAU,CACnC,UACEC,EADF,EAoBEC,GApBF,EAoBK;;;AAlBD,cAAQ,cAAR;AAAA,MACAC,SAAS,eADT;AAAA,MAEAC,QAAQ,cAFR;AAAA,MAGAC,eAAe,qBAHf;AAAA,MAIAC,aAAa,mBAJb;AAAA,MAKAC,iBAAiB,uBALjB;AAAA,MAMAC,aAAa,mBANb;AAAA,MAOAC,QAAQ,cAPR;AAAA,MAQAC,EAAE,QARF;AAAA,MASAC,OAAO,aATP;AAAA,MAUAC,KAAK,WAVL;AAAA,MAWAC,OAAO,aAXP;AAAA,MAYAC,IAAI,UAZJ;AAAA,MAaAC,IAAI,UAbJ;AAAA,MAcAC,eAAe,qBAdf;AAAA,MAeAC,KAAK,WAfL;AAAA,MAgBGC,IAAI,GAjBTC,wNACE;;AAoBF,SACEC,KAAC,cAAD,CAACC,mBAAD,EACE;AAAAC,eAAW,EAAEJ,IAAI,CAAC,kBAAD,CAAjB;AACAd,YAAQ,EAAEA,QADV;AAEAC,mBAAe,EAAEA,eAFjB;AAGAC,iBAAa,EAAEA,aAHf;AAIAC,qBAAiB,EAAEA,iBAJnB;AAKAC,iBAAa,EAAEA,aALf;AAMAE,MAAE,EAAEA,EANJ;AAOAC,WAAO,EAAEA,OAPT;AAQAC,SAAK,EAAEA,KARP;AASAG,QAAI,EAAEA,IATN;AAUAC,mBAAe,EAAEA,eAVjB;AAWAC,SAAK,EAAEA;AAXP,GADF,EAcEG,KACE,cADF,CACE,QADF,EACEG;AAAAb,MAAE,EAAEA,EAAJ;AACAP,aAAS,EAAEqB,UAAU,CACnB,aADmB,GACNC,SAEXA,GAAC,eAAeC,MAAf,CAAeZ,IAAf,CAAD,IAAyBA,IAFd,EAGXW,mBAAcd,OAHH,EAIXc,iBAAYR,KAJD,EAMbQ,EAPmB,GAOnBtB,SAPmB,CADrB;AAUAW,QAAI,EAAEL;AAVN,KAWIS,IAXJ,EAWQ;AACRhB,OAAG,EAAEA;AADG,GAXR,CADF,EAeGW,UACGA,OAAO,CAACc,GAAR,CAAY,UAACC,MAAD,EAASC,KAAT,EAAc;AACxB,WACET,KACM,cADN,CACM,QADN,EACMG,aAAC,OAAOK,MAAP,KAAkB,QAAlB,IACHA,MAAM,CAACE,QADJ,IACgB;AAAEA,cAAQ,EAAEF,MAAM,CAACE;AAAnB,KADjB,EAEC,OAAOF,MAAP,KAAkB,QAAlB,IACHA,MAAM,CAACG,KAAP,KAAiBC,SADd,IAC2B;AAAED,WAAK,EAAEH,MAAM,CAACG;AAAhB,KAH5B,EAGoD;AACxDE,SAAG,EAAEJ;AADmD,KAHpD,CADN,EAOG,OAAOD,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsCA,MAAM,CAAChB,KAPhD,CADF;AAWD,GAZD,CADH,GAcGsB,QA7BN,CAdF,CADF;AAgDD,CAvEkC;AA0ErCnC,WAAW,CAACoC,SAAZ,GAAqBZ;AACnBpB,WAAS,EAAEiC,SAAS,CAACC,MADF;AAEnB5B,UAAQ,EAAE2B,SAAS,CAACE,MAFD;AAGnBzB,SAAO,EAAEuB,SAAS,CAACG;AAHA,GAIhBlB,mBAAmB,CAACc,SAJJ,CAArB;AAOApC,WAAW,CAACyC,WAAZ,GAA0B,aAA1B","names":["CFormSelect","forwardRef","_a","ref","className","feedback","feedbackInvalid","feedbackValid","floatingClassName","floatingLabel","htmlSize","id","invalid","label","options","size","text","tooltipFeedback","valid","rest","__rest","React","CFormControlWrapper","describedby","__assign","classNames","_b","concat","map","option","index","disabled","value","undefined","key","children","propTypes","PropTypes","string","number","array","displayName"],"sources":["C:\\wamp64\\www\\Movie\\node_modules\\@coreui\\react\\src\\components\\form\\CFormSelect.tsx"],"sourcesContent":["import React, { ChangeEventHandler, forwardRef, InputHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\ntype Option = {\n  disabled?: boolean\n  label?: string\n  selected?: boolean\n  value?: string\n}\n\nexport interface CFormSelectProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLSelectElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Specifies the number of visible options in a drop-down list.\n   */\n  htmlSize?: number\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLSelectElement>\n  /**\n   * Options list of the select component. Available keys: `label`, `value`, `disabled`.\n   * Examples:\n   * - `options={[{ value: 'js', label: 'JavaScript' }, { value: 'html', label: 'HTML', disabled: true }]}`\n   * - `options={['js', 'html']}`\n   */\n  options?: Option[] | string[]\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   */\n  value?: string | string[] | number\n}\n\nexport const CFormSelect = forwardRef<HTMLSelectElement, CFormSelectProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      htmlSize,\n      id,\n      invalid,\n      label,\n      options,\n      size,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <select\n          id={id}\n          className={classNames(\n            'form-select',\n            {\n              [`form-select-${size}`]: size,\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          size={htmlSize}\n          {...rest}\n          ref={ref}\n        >\n          {options\n            ? options.map((option, index) => {\n                return (\n                  <option\n                    {...(typeof option === 'object' &&\n                      option.disabled && { disabled: option.disabled })}\n                    {...(typeof option === 'object' &&\n                      option.value !== undefined && { value: option.value })}\n                    key={index}\n                  >\n                    {typeof option === 'string' ? option : option.label}\n                  </option>\n                )\n              })\n            : children}\n        </select>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormSelect.propTypes = {\n  className: PropTypes.string,\n  htmlSize: PropTypes.number,\n  options: PropTypes.array,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormSelect.displayName = 'CFormSelect'\n"]},"metadata":{},"sourceType":"module"}