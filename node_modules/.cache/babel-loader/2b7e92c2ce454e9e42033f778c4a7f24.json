{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nvar CCardTitle = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      _b = _a.as,\n      Component = _b === void 0 ? 'h5' : _b,\n      className = _a.className,\n      rest = __rest(_a, [\"children\", \"as\", \"className\"]);\n\n  return React.createElement(Component, __assign({\n    className: classNames('card-title', className)\n  }, rest, {\n    ref: ref\n  }), children);\n});\nCCardTitle.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string\n};\nCCardTitle.displayName = 'CCardTitle';\nexport { CCardTitle };","map":{"version":3,"mappings":";;;;IAiBaA,UAAU,GAA6DC,UAAU,CAG5F,UAACC,EAAD,EAAyDC,GAAzD,EAA4D;AAAzD,cAAQ,cAAR;AAAA,MAAUC,EAAoB,QAA9B;AAAA,MAAcC,SAAS,GAAGD,uBAAIA,EAA9B;AAAA,MAAgCE,SAAS,eAAzC;AAAA,MAA8CC,IAAI,cAApD,+BAAoD,CAAlD;;AACH,SACEC,oBAACH,SAAD,EAAUI;AAACH,aAAS,EAAEI,UAAU,CAAC,YAAD,EAAeJ,SAAf;AAAtB,KAAqDC,IAArD,EAAyD;AAAEJ,OAAG,EAAEA;AAAP,GAAzD,CAAV,EACGQ,QADH,CADF;AAKD,CAT6F;AAW9FX,UAAU,CAACY,SAAX,GAAuB;AACrBC,IAAE,EAAEC,SAAS,CAACC,WADO;AAErBJ,UAAQ,EAAEG,SAAS,CAACE,IAFC;AAGrBV,WAAS,EAAEQ,SAAS,CAACG;AAHA,CAAvB;AAMAjB,UAAU,CAACkB,WAAX,GAAyB,YAAzB","names":["CCardTitle","forwardRef","_a","ref","_b","Component","className","rest","React","__assign","classNames","children","propTypes","as","PropTypes","elementType","node","string","displayName"],"sources":["C:\\wamp64\\www\\Movie\\node_modules\\@coreui\\react\\src\\components\\card\\CCardTitle.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardTitleProps extends HTMLAttributes<HTMLHeadingElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CCardTitle: PolymorphicRefForwardingComponent<'h5', CCardTitleProps> = forwardRef<\n  HTMLHeadingElement,\n  CCardTitleProps\n>(({ children, as: Component = 'h5', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-title', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardTitle.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardTitle.displayName = 'CCardTitle'\n"]},"metadata":{},"sourceType":"module"}