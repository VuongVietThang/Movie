{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\n\nvar createNativeOptions = function (options) {\n  return options && options.map(function (option, index) {\n    return option.options ? React.createElement(\"optgroup\", {\n      label: option.label,\n      key: index\n    }, createNativeOptions(option.options)) : React.createElement(\"option\", {\n      value: option.value,\n      key: index,\n      disabled: option.disabled\n    }, option.label);\n  });\n};\n\nvar CMultiSelectNativeSelect = forwardRef(function (_a, ref) {\n  var id = _a.id,\n      name = _a.name,\n      options = _a.options,\n      rest = __rest(_a, [\"id\", \"name\", \"options\"]);\n\n  return React.createElement(\"select\", __assign({\n    id: id\n  }, id && !name && {\n    name: \"\".concat(id, \"-multi-select\")\n  }, name && {\n    name: name\n  }, {\n    tabIndex: -1,\n    style: {\n      display: 'none'\n    }\n  }, rest, {\n    ref: ref\n  }), options && createNativeOptions(options));\n});\nCMultiSelectNativeSelect.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  options: PropTypes.array,\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.arrayOf(PropTypes.string.isRequired)])\n};\nCMultiSelectNativeSelect.displayName = 'CMultiSelectNativeSelect';\nexport { CMultiSelectNativeSelect };","map":{"version":3,"mappings":";;;;AAWA,IAAMA,mBAAmB,GAAG,UAACC,OAAD,EAAkB;AAC5C,gBAAO,IACPA,OAAO,CAACC,GAAR,CAAY,UAACC,MAAD,EAAiBC,KAAjB,EAA8B;AACxC,iBAAM,CAACH,OAAP,GACEI,KAAU,cAAV,CAAU,UAAV,EAAU;AAAAC,WAAK,EAAEH,MAAM,CAACG,KAAd;AAAqBC,SAAG,EAAEH;AAA1B,KAAV,EACGJ,mBAAmB,CAACG,MAAM,CAACF,OAAR,CADtB,CADF,GAKEI,KAAQ,cAAR,CAAQ,QAAR,EAAQ;AAAAG,WAAK,EAAEL,MAAM,CAACK,KAAd;AAAqBD,SAAG,EAAEH,KAA1B;AAAiCK,cAAQ,EAAEN,MAAM,CAACM;AAAlD,KAAR,EACGN,MAAM,CAACG,KADV,CALF;AAQC,GATH,CADA;AAWC,CAZH;;IAcaI,wBAAwB,GAAGC,UAAU,CAGhD,UAACC,EAAD,EAAiCC,GAAjC,EAAoC;AAAjC,QAAE,QAAF;AAAA,MAAIC,IAAI,UAAR;AAAA,MAAUb,OAAO,aAAjB;AAAA,MAAsBc,IAAI,GAA5BC,qCAAE;;AACH,SACEX,KACE,cADF,CACE,QADF,EACEY;AAAAC,MAAE,EAAEA;AAAJ,KACKA,EAAE,IAAI,CAACJ,IAAP,IAAe;AAAEA,QAAI,EAAE,GAAGK,MAAH,CAAGD,EAAH,EAAoB,eAApB;AAAR,GADpB,EAEKJ,IAAI,IAAI;AAAEA,QAAI,EAAEA;AAAR,GAFb,EAGA;AAAAM,YAAQ,EAAE,EAAV;AACAC,SAAK,EAAE;AAAEC,aAAO,EAAE;AAAX;AADP,GAHA,EAKIP,IALJ,EAKQ;AACRF,OAAG,EAAEA;AADG,GALR,CADF,EASGZ,OAAO,IAAID,mBAAmB,CAACC,OAAD,CATjC,CADF;AAaD,CAjBiD;AAmBlDS,wBAAwB,CAACa,SAAzB,GAAqC;AACnCL,IAAE,EAAEM,SAAS,CAACC,MADqB;AAEnCX,MAAI,EAAEU,SAAS,CAACC,MAFmB;AAGnCxB,SAAO,EAAEuB,SAAS,CAACE,KAHgB;AAInClB,OAAK,EAAEgB,SAAS,CAACG,SAAV,CAAoB,CACzBH,SAAS,CAACI,MADe,EAEzBJ,SAAS,CAACC,MAFe,EAGzBD,SAAS,CAACK,OAAV,CAAkBL,SAAS,CAACC,MAAV,CAAiBK,UAAnC,CAHyB,CAApB;AAJ4B,CAArC;AAWApB,wBAAwB,CAACqB,WAAzB,GAAuC,0BAAvC","names":["createNativeOptions","options","map","option","index","React","label","key","value","disabled","CMultiSelectNativeSelect","forwardRef","_a","ref","name","rest","__rest","__assign","id","concat","tabIndex","style","display","propTypes","PropTypes","string","array","oneOfType","number","arrayOf","isRequired","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\multi-select\\CMultiSelectNativeSelect.tsx"],"sourcesContent":["import React, { forwardRef, InputHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\n\nimport type { Option } from './types'\n\nexport interface CMultiSelectNativeSelectProps\n  extends Omit<InputHTMLAttributes<HTMLSelectElement>, 'options'> {\n  options?: Option[]\n  value?: string | number | string[]\n}\n\nconst createNativeOptions = (options: Option[]) =>\n  options &&\n  options.map((option: Option, index: number) =>\n    option.options ? (\n      <optgroup label={option.label} key={index}>\n        {createNativeOptions(option.options)}\n      </optgroup>\n    ) : (\n      <option value={option.value} key={index} disabled={option.disabled}>\n        {option.label}\n      </option>\n    ),\n  )\n\nexport const CMultiSelectNativeSelect = forwardRef<\n  HTMLSelectElement,\n  CMultiSelectNativeSelectProps\n>(({ id, name, options, ...rest }, ref) => {\n  return (\n    <select\n      id={id}\n      {...(id && !name && { name: `${id}-multi-select` })} // TODO: remove in v6\n      {...(name && { name: name })}\n      tabIndex={-1}\n      style={{ display: 'none' }}\n      {...rest}\n      ref={ref}\n    >\n      {options && createNativeOptions(options)}\n    </select>\n  )\n})\n\nCMultiSelectNativeSelect.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  options: PropTypes.array,\n  value: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string.isRequired),\n  ]),\n}\n\nCMultiSelectNativeSelect.displayName = 'CMultiSelectNativeSelect'\n"]},"metadata":{},"sourceType":"module"}