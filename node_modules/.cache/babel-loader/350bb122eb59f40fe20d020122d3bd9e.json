{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { CCard } from '../card/CCard.js';\nimport { CCardBody } from '../card/CCardBody.js';\nimport '../card/CCardFooter.js';\nimport '../card/CCardGroup.js';\nimport '../card/CCardHeader.js';\nimport '../card/CCardImage.js';\nimport '../card/CCardImageOverlay.js';\nimport '../card/CCardLink.js';\nimport '../card/CCardSubtitle.js';\nimport '../card/CCardText.js';\nimport '../card/CCardTitle.js';\nimport { CProgress } from '../progress/CProgress.js';\nimport { colorPropType } from '../../props.js';\nvar CWidgetStatsB = forwardRef(function (_a, ref) {\n  var className = _a.className,\n      color = _a.color,\n      inverse = _a.inverse,\n      progress = _a.progress,\n      text = _a.text,\n      title = _a.title,\n      value = _a.value,\n      rest = __rest(_a, [\"className\", \"color\", \"inverse\", \"progress\", \"text\", \"title\", \"value\"]);\n\n  return React.createElement(CCard, __assign({\n    className: className,\n    color: color\n  }, inverse && {\n    textColor: 'white'\n  }, rest, {\n    ref: ref\n  }), React.createElement(CCardBody, null, value && React.createElement(\"div\", {\n    className: \"fs-4 fw-semibold\"\n  }, value), title && React.createElement(\"div\", null, title), React.createElement(CProgress, __assign({\n    className: \"my-2\",\n    height: 4\n  }, inverse && {\n    white: true\n  }, progress)), text && React.createElement(\"small\", {\n    className: inverse ? 'text-white text-opacity-75' : 'text-body-secondary'\n  }, text)));\n});\nCWidgetStatsB.propTypes = {\n  className: PropTypes.string,\n  color: colorPropType,\n  inverse: PropTypes.bool,\n  progress: PropTypes.object,\n  text: PropTypes.string,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.node, PropTypes.number])\n};\nCWidgetStatsB.displayName = 'CWidgetCWidgetStatsB';\nexport { CWidgetStatsB };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;IA4CaA,aAAa,GAAGC,UAAU,CACrC,UAACC,EAAD,EAAuEC,GAAvE,EAA0E;AAAvE,eAAS,eAAT;AAAA,MAAWC,KAAK,WAAhB;AAAA,MAAkBC,OAAO,aAAzB;AAAA,MAA2BC,QAAQ,cAAnC;AAAA,MAAqCC,IAAI,UAAzC;AAAA,MAA2CC,KAAK,WAAhD;AAAA,MAAkDC,KAAK,WAAvD;AAAA,MAA4DC,IAAI,GAAlEC,mFAAE;;AACD,SACEC,KAAC,cAAD,CAACC,KAAD,EACEC;AAAAC,aAAS,EAAEA,SAAX;AACAX,SAAK,EAAEA;AADP,KAEKC,OAAO,IAAI;AAAEW,aAAS,EAAE;AAAb,GAFhB,EAGIN,IAHJ,EAGQ;AACRP,OAAG,EAAEA;AADG,GAHR,CADF,EAOES,oBAACK,SAAD,EAAU,IAAV,EACGR,KAAK,IAAIG,KAAK,cAAL,CAAK,KAAL,EAAK;AAAAG,aAAS,EAAC;AAAV,GAAL,EAAmCN,KAAnC,CADZ,EAEGD,KAAK,IAAII,KAAM,cAAN,CAAM,KAAN,EAAM,IAAN,EAAMJ,KAAN,CAFZ,EAGEI,KAAC,cAAD,CAACM,SAAD,EAAUJ;AAACC,aAAS,EAAC,MAAX;AAAkBI,UAAM,EAAE;AAA1B,KAAkCd,OAAO,IAAI;AAAEe,SAAK,EAAE;AAAT,GAA7C,EAAmEd,QAAnE,CAAV,CAHF,EAIGC,IAAI,IACHK,KAAO,cAAP,CAAO,OAAP,EAAO;AAAAG,aAAS,EAAEV,OAAO,GAAG,4BAAH,GAAkC;AAApD,GAAP,EACGE,IADH,CALJ,CAPF,CADF;AAoBD,CAtBoC;AAyBvCP,aAAa,CAACqB,SAAd,GAA0B;AACxBN,WAAS,EAAEO,SAAS,CAACC,MADG;AAExBnB,OAAK,EAAEoB,aAFiB;AAGxBnB,SAAO,EAAEiB,SAAS,CAACG,IAHK;AAIxBnB,UAAQ,EAAEgB,SAAS,CAACI,MAJI;AAKxBnB,MAAI,EAAEe,SAAS,CAACC,MALQ;AAMxBf,OAAK,EAAEc,SAAS,CAACK,SAAV,CAAoB,CAACL,SAAS,CAACC,MAAX,EAAmBD,SAAS,CAACM,IAA7B,CAApB,CANiB;AAOxBnB,OAAK,EAAEa,SAAS,CAACK,SAAV,CAAoB,CAACL,SAAS,CAACC,MAAX,EAAmBD,SAAS,CAACM,IAA7B,EAAmCN,SAAS,CAACO,MAA7C,CAApB;AAPiB,CAA1B;AAUA7B,aAAa,CAAC8B,WAAd,GAA4B,sBAA5B","names":["CWidgetStatsB","forwardRef","_a","ref","color","inverse","progress","text","title","value","rest","__rest","React","CCard","__assign","className","textColor","CCardBody","CProgress","height","white","propTypes","PropTypes","string","colorPropType","bool","object","oneOfType","node","number","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\widgets\\CWidgetStatsB.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CCard, CCardBody } from '../card'\nimport { CProgress, CProgressProps } from '../progress/CProgress'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CWidgetStatsBProps extends Omit<HTMLAttributes<HTMLDivElement>, 'title'> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Colors have been inverted from their default dark shade.\n   */\n  inverse?: boolean\n  /**\n   * Sets the color context of the progress bar to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  progress?: CProgressProps\n  /**\n   * Title node for your component.\n   */\n  title?: string | ReactNode\n  /**\n   * Helper text for your component.\n   */\n  text?: string\n  /**\n   * Value node for your component.\n   */\n  value?: string | number | ReactNode\n}\n\nexport const CWidgetStatsB = forwardRef<HTMLDivElement, CWidgetStatsBProps>(\n  ({ className, color, inverse, progress, text, title, value, ...rest }, ref) => {\n    return (\n      <CCard\n        className={className}\n        color={color}\n        {...(inverse && { textColor: 'white' })}\n        {...rest}\n        ref={ref}\n      >\n        <CCardBody>\n          {value && <div className=\"fs-4 fw-semibold\">{value}</div>}\n          {title && <div>{title}</div>}\n          <CProgress className=\"my-2\" height={4} {...(inverse && { white: true })} {...progress} />\n          {text && (\n            <small className={inverse ? 'text-white text-opacity-75' : 'text-body-secondary'}>\n              {text}\n            </small>\n          )}\n        </CCardBody>\n      </CCard>\n    )\n  },\n)\n\nCWidgetStatsB.propTypes = {\n  className: PropTypes.string,\n  color: colorPropType,\n  inverse: PropTypes.bool,\n  progress: PropTypes.object,\n  text: PropTypes.string,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.node, PropTypes.number]),\n}\n\nCWidgetStatsB.displayName = 'CWidgetCWidgetStatsB'\n"]},"metadata":{},"sourceType":"module"}