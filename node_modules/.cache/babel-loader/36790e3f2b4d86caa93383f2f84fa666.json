{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CCloseButton } from '../close-button/CCloseButton.js';\nimport { CModalContext } from './CModalContext.js';\nvar CModalHeader = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      className = _a.className,\n      _b = _a.closeButton,\n      closeButton = _b === void 0 ? true : _b,\n      rest = __rest(_a, [\"children\", \"className\", \"closeButton\"]);\n\n  var setVisible = useContext(CModalContext).setVisible;\n  return React.createElement(\"div\", __assign({\n    className: classNames('modal-header', className)\n  }, rest, {\n    ref: ref\n  }), children, closeButton && React.createElement(CCloseButton, {\n    onClick: function () {\n      return setVisible(false);\n    }\n  }));\n});\nCModalHeader.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  closeButton: PropTypes.bool\n};\nCModalHeader.displayName = 'CModalHeader';\nexport { CModalHeader };","map":{"version":3,"mappings":";;;;;;IAkBaA,YAAY,GAAGC,UAAU,CACpC,UAACC,EAAD,EAAuDC,GAAvD,EAA0D;AAAvD,cAAQ,cAAR;AAAA,MAAUC,SAAS,eAAnB;AAAA,MAAqBC,EAAkB,iBAAvC;AAAA,MAAqBC,WAAW,mBAAG,IAAH,GAAOD,EAAvC;AAAA,MAA4CE,IAAI,cAAlD,wCAAkD,CAAhD;;AACO,gBAAU,GAAKC,UAAU,CAACC,aAAD,CAAV,CAAyBC,UAAxC;AAER,SACEC;AAAKP,aAAS,EAAEQ,UAAU,CAAC,cAAD,EAAiBR,SAAjB;AAA1B,KAA2DG,IAA3D,EAAiE;AAAAJ,OAAG,EAAEA;AAAL,GAAjE,GACGU,QADH,EAEGP,WAAW,IAAIK,KAAC,cAAD,CAACG,YAAD,EAAc;AAAAC,WAAO,EAAE,YAAM;AAAA,uBAAU,CAAC,KAAD,CAAV;AAAiB;AAAhC,GAAd,CAFlB,CADF;AAMD,CAVmC;AAatCf,YAAY,CAACgB,SAAb,GAAyB;AACvBH,UAAQ,EAAEI,SAAS,CAACC,IADG;AAEvBd,WAAS,EAAEa,SAAS,CAACE,MAFE;AAGvBb,aAAW,EAAEW,SAAS,CAACG;AAHA,CAAzB;AAMApB,YAAY,CAACqB,WAAb,GAA2B,cAA3B","names":["CModalHeader","forwardRef","_a","ref","className","_b","closeButton","rest","useContext","CModalContext","setVisible","React","classNames","children","CCloseButton","onClick","propTypes","PropTypes","node","string","bool","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\modal\\CModalHeader.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CCloseButton } from '../close-button/CCloseButton'\nimport { CModalContext } from './CModalContext'\n\nexport interface CModalHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Add a close button component to the header.\n   */\n  closeButton?: boolean\n}\n\nexport const CModalHeader = forwardRef<HTMLDivElement, CModalHeaderProps>(\n  ({ children, className, closeButton = true, ...rest }, ref) => {\n    const { setVisible } = useContext(CModalContext)\n\n    return (\n      <div className={classNames('modal-header', className)} {...rest} ref={ref}>\n        {children}\n        {closeButton && <CCloseButton onClick={() => setVisible(false)} />}\n      </div>\n    )\n  },\n)\n\nCModalHeader.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  closeButton: PropTypes.bool,\n}\n\nCModalHeader.displayName = 'CModalHeader'\n"]},"metadata":{},"sourceType":"module"}