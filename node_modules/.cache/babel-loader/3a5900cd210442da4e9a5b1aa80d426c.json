{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CDropdownContext } from './CDropdownContext.js';\nimport { usePopper } from '../../hooks/usePopper.js';\nimport getNextActiveElement from '../../utils/getNextActiveElement.js';\nimport isRTL from '../../utils/isRTL.js';\nimport { useForkedRef } from '../../hooks/useForkedRef.js';\nimport { placementPropType } from '../../props.js';\nimport { getPlacement } from './utils.js';\nvar CDropdown = forwardRef(function (_a, ref) {\n  var _b;\n\n  var children = _a.children,\n      alignment = _a.alignment,\n      _c = _a.as,\n      as = _c === void 0 ? 'div' : _c,\n      _d = _a.autoClose,\n      autoClose = _d === void 0 ? true : _d,\n      className = _a.className,\n      container = _a.container,\n      dark = _a.dark,\n      direction = _a.direction,\n      _e = _a.offset,\n      offset = _e === void 0 ? [0, 2] : _e,\n      onHide = _a.onHide,\n      onShow = _a.onShow,\n      _f = _a.placement,\n      placement = _f === void 0 ? 'bottom-start' : _f,\n      _g = _a.popper,\n      popper = _g === void 0 ? true : _g,\n      popperConfig = _a.popperConfig,\n      _h = _a.portal,\n      portal = _h === void 0 ? false : _h,\n      _j = _a.variant,\n      variant = _j === void 0 ? 'btn-group' : _j,\n      _k = _a.visible,\n      visible = _k === void 0 ? false : _k,\n      rest = __rest(_a, [\"children\", \"alignment\", \"as\", \"autoClose\", \"className\", \"container\", \"dark\", \"direction\", \"offset\", \"onHide\", \"onShow\", \"placement\", \"popper\", \"popperConfig\", \"portal\", \"variant\", \"visible\"]);\n\n  var dropdownRef = useRef(null);\n  var dropdownToggleRef = useRef(null);\n  var dropdownMenuRef = useRef(null);\n  var forkedRef = useForkedRef(ref, dropdownRef);\n\n  var _l = useState(visible),\n      _visible = _l[0],\n      setVisible = _l[1];\n\n  var _m = usePopper(),\n      initPopper = _m.initPopper,\n      destroyPopper = _m.destroyPopper;\n\n  var Component = variant === 'nav-item' ? 'li' : as; // Disable popper if responsive aligment is set.\n\n  if (typeof alignment === 'object') {\n    popper = false;\n  }\n\n  var contextValues = {\n    alignment: alignment,\n    container: container,\n    dark: dark,\n    dropdownToggleRef: dropdownToggleRef,\n    dropdownMenuRef: dropdownMenuRef,\n    popper: popper,\n    portal: portal,\n    variant: variant,\n    visible: _visible,\n    setVisible: setVisible\n  };\n  var defaultPopperConfig = {\n    modifiers: [{\n      name: 'offset',\n      options: {\n        offset: offset\n      }\n    }],\n    placement: getPlacement(placement, direction, alignment, isRTL(dropdownMenuRef.current))\n  };\n\n  var computedPopperConfig = __assign(__assign({}, defaultPopperConfig), typeof popperConfig === 'function' ? popperConfig(defaultPopperConfig) : popperConfig);\n\n  useEffect(function () {\n    setVisible(visible);\n  }, [visible]);\n  useEffect(function () {\n    var toggleElement = dropdownToggleRef.current;\n    var menuElement = dropdownMenuRef.current;\n\n    if (_visible && toggleElement && menuElement) {\n      if (popper) {\n        initPopper(toggleElement, menuElement, computedPopperConfig);\n      }\n\n      toggleElement.focus();\n      toggleElement.addEventListener('keydown', handleKeydown);\n      menuElement.addEventListener('keydown', handleKeydown);\n      window.addEventListener('mouseup', handleMouseUp);\n      window.addEventListener('keyup', handleKeyup);\n      onShow === null || onShow === void 0 ? void 0 : onShow();\n    }\n\n    return function () {\n      if (popper) {\n        destroyPopper();\n      }\n\n      toggleElement === null || toggleElement === void 0 ? void 0 : toggleElement.removeEventListener('keydown', handleKeydown);\n      menuElement === null || menuElement === void 0 ? void 0 : menuElement.removeEventListener('keydown', handleKeydown);\n      window.removeEventListener('mouseup', handleMouseUp);\n      window.removeEventListener('keyup', handleKeyup);\n      onHide === null || onHide === void 0 ? void 0 : onHide();\n    };\n  }, [computedPopperConfig, destroyPopper, dropdownMenuRef, dropdownToggleRef, initPopper, _visible]);\n\n  var handleKeydown = function (event) {\n    if (_visible && dropdownMenuRef.current && (event.key === 'ArrowDown' || event.key === 'ArrowUp')) {\n      event.preventDefault();\n      var target = event.target;\n      var items = Array.from(dropdownMenuRef.current.querySelectorAll('.dropdown-item:not(.disabled):not(:disabled)'));\n      getNextActiveElement(items, target, event.key === 'ArrowDown', true).focus();\n    }\n  };\n\n  var handleKeyup = function (event) {\n    if (autoClose === false) {\n      return;\n    }\n\n    if (event.key === 'Escape') {\n      setVisible(false);\n    }\n  };\n\n  var handleMouseUp = function (event) {\n    if (!dropdownToggleRef.current || !dropdownMenuRef.current) {\n      return;\n    }\n\n    if (dropdownToggleRef.current.contains(event.target)) {\n      return;\n    }\n\n    if (autoClose === true || autoClose === 'inside' && dropdownMenuRef.current.contains(event.target) || autoClose === 'outside' && !dropdownMenuRef.current.contains(event.target)) {\n      setTimeout(function () {\n        return setVisible(false);\n      }, 1);\n      return;\n    }\n  };\n\n  return React.createElement(CDropdownContext.Provider, {\n    value: contextValues\n  }, variant === 'input-group' ? React.createElement(React.Fragment, null, children) : React.createElement(Component, __assign({\n    className: classNames(variant === 'nav-item' ? 'nav-item dropdown' : variant, (_b = {\n      'dropdown-center': direction === 'center',\n      'dropup dropup-center': direction === 'dropup-center'\n    }, _b[\"\".concat(direction)] = direction && direction !== 'center' && direction !== 'dropup-center', _b), className)\n  }, rest, {\n    ref: forkedRef\n  }), children));\n});\nvar alignmentDirection = PropTypes.oneOf(['start', 'end']);\nCDropdown.propTypes = {\n  alignment: PropTypes.oneOfType([alignmentDirection, PropTypes.shape({\n    xs: alignmentDirection.isRequired\n  }), PropTypes.shape({\n    sm: alignmentDirection.isRequired\n  }), PropTypes.shape({\n    md: alignmentDirection.isRequired\n  }), PropTypes.shape({\n    lg: alignmentDirection.isRequired\n  }), PropTypes.shape({\n    xl: alignmentDirection.isRequired\n  }), PropTypes.shape({\n    xxl: alignmentDirection.isRequired\n  })]),\n  as: PropTypes.elementType,\n  autoClose: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['inside', 'outside'])]),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  dark: PropTypes.bool,\n  direction: PropTypes.oneOf(['center', 'dropup', 'dropup-center', 'dropend', 'dropstart']),\n  offset: PropTypes.any,\n  // TODO: find good proptype\n  onHide: PropTypes.func,\n  onShow: PropTypes.func,\n  placement: placementPropType,\n  popper: PropTypes.bool,\n  popperConfig: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  portal: PropTypes.bool,\n  variant: PropTypes.oneOf(['btn-group', 'dropdown', 'input-group', 'nav-item']),\n  visible: PropTypes.bool\n};\nCDropdown.displayName = 'CDropdown';\nexport { CDropdown };","map":{"version":3,"mappings":"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","names":["CDropdown","forwardRef","_a","ref","alignment","_c","as","_d","autoClose","className","container","dark","direction","_e","offset","onHide","onShow","_f","placement","_g","popper","popperConfig","_h","portal","_j","variant","_k","visible","rest","dropdownRef","useRef","dropdownToggleRef","dropdownMenuRef","forkedRef","useForkedRef","useState","_visible","setVisible","usePopper","initPopper","destroyPopper","Component","contextValues","defaultPopperConfig","modifiers","name","options","getPlacement","isRTL","current","computedPopperConfig","useEffect","toggleElement","menuElement","focus","addEventListener","handleKeydown","window","handleMouseUp","handleKeyup","removeEventListener","event","key","preventDefault","target","items","Array","from","querySelectorAll","getNextActiveElement","contains","setTimeout","React","CDropdownContext","Provider","value","children","__assign","classNames","_b","concat","alignmentDirection","PropTypes","oneOf","propTypes","oneOfType","shape","xs","isRequired","sm","md","lg","xl","xxl","elementType","bool","node","string","any","func","placementPropType","object","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\dropdown\\CDropdown.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, HTMLAttributes, useEffect, useRef, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport type { Options } from '@popperjs/core'\n\nimport { CDropdownContext } from './CDropdownContext'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\nimport { useForkedRef, usePopper } from '../../hooks'\nimport { placementPropType } from '../../props'\nimport type { Placements } from '../../types'\nimport { getNextActiveElement, isRTL } from '../../utils'\n\nimport type { Alignments, Directions } from './types'\nimport { getPlacement } from './utils'\n\nexport interface CDropdownProps extends HTMLAttributes<HTMLDivElement | HTMLLIElement> {\n  /**\n   * Specifies the alignment of the React Dropdown Menu within this React Dropdown.\n   *\n   * @example\n   * // Align dropdown menu to the end on large devices, otherwise start\n   * <CDropdown alignment={{ lg: 'end', xs: 'start' }}>\n   *   <CDropdownToggle>Toggle dropdown</CDropdownToggle>\n   *   <CDropdownMenu>\n   *     <CDropdownItem>Action</CDropdownItem>\n   *     <CDropdownItem>Another Action</CDropdownItem>\n   *   </CDropdownMenu>\n   * </CDropdown>\n   *\n   * @type 'start' | 'end' | { xs: 'start' | 'end' } | { sm: 'start' | 'end' } | { md: 'start' | 'end' } | { lg: 'start' | 'end' } | { xl: 'start' | 'end'} | { xxl: 'start' | 'end'}\n   */\n  alignment?: Alignments\n\n  /**\n   * Determines the root node component (native HTML element or a custom React component) for the React Dropdown.\n   */\n  as?: ElementType\n\n  /**\n   * Configures automatic closing behavior for the React Dropdown:\n   * - `true` - Close on clicks inside or outside of the React Dropdown Menu.\n   * - `false` - Disable auto-close; manually call `hide` or `toggle` (also not closed by `Escape`).\n   * - `'inside'` - Close only when clicking inside the React Dropdown Menu.\n   * - `'outside'` - Close only when clicking outside the React Dropdown Menu.\n   *\n   * @example\n   * // Close only when user clicks outside of the menu\n   * <CDropdown autoClose=\"outside\" />\n   */\n  autoClose?: 'inside' | 'outside' | boolean\n\n  /**\n   * Adds custom classes to the React Dropdown root element.\n   */\n  className?: string\n\n  /**\n   * Appends the React Dropdown Menu to a specific element. You can pass an HTML element or a function returning an element. Defaults to `document.body`.\n   *\n   * @example\n   * // Append the menu to a custom container\n   * const myContainer = document.getElementById('my-container')\n   *\n   * <CDropdown container={myContainer} />\n   *\n   * @since 4.11.0\n   */\n  container?: DocumentFragment | Element | (() => DocumentFragment | Element | null) | null\n\n  /**\n   * Applies a darker color scheme to the React Dropdown Menu, often used within dark navbars.\n   */\n  dark?: boolean\n\n  /**\n   * Specifies the direction of the React Dropdown.\n   */\n  direction?: 'center' | 'dropup' | 'dropup-center' | 'dropend' | 'dropstart'\n\n  /**\n   * Defines x and y offsets ([x, y]) for the React Dropdown Menu relative to its target.\n   *\n   * @example\n   * // Offset the menu 10px in X and 5px in Y direction\n   * <CDropdown offset={[10, 5]}>\n   *   ...\n   * </CDropdown>\n   */\n  offset?: [number, number]\n\n  /**\n   * Callback fired right before the React Dropdown becomes hidden.\n   *\n   * @since 4.9.0\n   */\n  onHide?: () => void\n\n  /**\n   * Callback fired immediately after the React Dropdown is displayed.\n   */\n  onShow?: () => void\n\n  /**\n   * Determines the placement of the React Dropdown Menu after Popper.js modifiers.\n   *\n   * @type 'auto' | 'auto-start' | 'auto-end' | 'top-end' | 'top' | 'top-start' | 'bottom-end' | 'bottom' | 'bottom-start' | 'right-start' | 'right' | 'right-end' | 'left-start' | 'left' | 'left-end'\n   */\n  placement?: Placements\n\n  /**\n   * Enables or disables dynamic positioning via Popper.js for the React Dropdown Menu.\n   */\n  popper?: boolean\n\n  /**\n   * Provides a custom Popper.js configuration or a function that returns a modified Popper.js configuration for advanced positioning of the React Dropdown Menu. [Read more](https://popper.js.org/docs/v2/constructors/#options)\n   *\n   * @example\n   * // Providing a custom popper config\n   * <CDropdown\n   *   popperConfig={{\n   *     modifiers: [\n   *       {\n   *         name: 'flip',\n   *         options: { fallbackPlacements: ['bottom', 'top'] },\n   *       },\n   *     ],\n   *   }}\n   * >...</CDropdown>\n   *\n   * @since 5.5.0\n   */\n  popperConfig?: Partial<Options> | ((defaultPopperConfig: Partial<Options>) => Partial<Options>)\n\n  /**\n   * Renders the React Dropdown Menu using a React Portal, allowing it to escape the DOM hierarchy for improved positioning.\n   *\n   * @since 4.8.0\n   */\n  portal?: boolean\n\n  /**\n   * Defines the visual variant of the React Dropdown\n   */\n  variant?: 'btn-group' | 'dropdown' | 'input-group' | 'nav-item'\n\n  /**\n   * Controls the visibility of the React Dropdown Menu:\n   * - `true` - Visible\n   * - `false` - Hidden\n   *\n   * @example\n   * // Programmatically manage the dropdown visibility\n   * const [visible, setVisible] = useState(false)\n   *\n   * <CDropdown visible={visible}>\n   *   ...\n   * </CDropdown>\n   *\n   */\n  visible?: boolean\n}\n\nexport const CDropdown: PolymorphicRefForwardingComponent<'div', CDropdownProps> = forwardRef<\n  HTMLDivElement | HTMLLIElement,\n  CDropdownProps\n>(\n  (\n    {\n      children,\n      alignment,\n      as = 'div',\n      autoClose = true,\n      className,\n      container,\n      dark,\n      direction,\n      offset = [0, 2],\n      onHide,\n      onShow,\n      placement = 'bottom-start',\n      popper = true,\n      popperConfig,\n      portal = false,\n      variant = 'btn-group',\n      visible = false,\n      ...rest\n    },\n    ref\n  ) => {\n    const dropdownRef = useRef<HTMLDivElement>(null)\n    const dropdownToggleRef = useRef<HTMLElement>(null)\n    const dropdownMenuRef = useRef<HTMLDivElement | HTMLUListElement>(null)\n    const forkedRef = useForkedRef(ref, dropdownRef)\n    const [_visible, setVisible] = useState(visible)\n    const { initPopper, destroyPopper } = usePopper()\n\n    const Component = variant === 'nav-item' ? 'li' : as\n\n    // Disable popper if responsive aligment is set.\n    if (typeof alignment === 'object') {\n      popper = false\n    }\n\n    const contextValues = {\n      alignment,\n      container,\n      dark,\n      dropdownToggleRef,\n      dropdownMenuRef,\n      popper,\n      portal,\n      variant,\n      visible: _visible,\n      setVisible,\n    }\n\n    const defaultPopperConfig = {\n      modifiers: [\n        {\n          name: 'offset',\n          options: {\n            offset: offset,\n          },\n        },\n      ],\n      placement: getPlacement(placement, direction, alignment, isRTL(dropdownMenuRef.current)),\n    }\n\n    const computedPopperConfig: Partial<Options> = {\n      ...defaultPopperConfig,\n      ...(typeof popperConfig === 'function' ? popperConfig(defaultPopperConfig) : popperConfig),\n    }\n\n    useEffect(() => {\n      setVisible(visible)\n    }, [visible])\n\n    useEffect(() => {\n      const toggleElement = dropdownToggleRef.current\n      const menuElement = dropdownMenuRef.current\n\n      if (_visible && toggleElement && menuElement) {\n        if (popper) {\n          initPopper(toggleElement, menuElement, computedPopperConfig)\n        }\n\n        toggleElement.focus()\n        toggleElement.addEventListener('keydown', handleKeydown)\n        menuElement.addEventListener('keydown', handleKeydown)\n\n        window.addEventListener('mouseup', handleMouseUp)\n        window.addEventListener('keyup', handleKeyup)\n\n        onShow?.()\n      }\n\n      return () => {\n        if (popper) {\n          destroyPopper()\n        }\n\n        toggleElement?.removeEventListener('keydown', handleKeydown)\n        menuElement?.removeEventListener('keydown', handleKeydown)\n\n        window.removeEventListener('mouseup', handleMouseUp)\n        window.removeEventListener('keyup', handleKeyup)\n\n        onHide?.()\n      }\n    }, [\n      computedPopperConfig,\n      destroyPopper,\n      dropdownMenuRef,\n      dropdownToggleRef,\n      initPopper,\n      _visible,\n    ])\n\n    const handleKeydown = (event: KeyboardEvent) => {\n      if (\n        _visible &&\n        dropdownMenuRef.current &&\n        (event.key === 'ArrowDown' || event.key === 'ArrowUp')\n      ) {\n        event.preventDefault()\n        const target = event.target as HTMLElement\n        const items: HTMLElement[] = Array.from(\n          dropdownMenuRef.current.querySelectorAll('.dropdown-item:not(.disabled):not(:disabled)')\n        )\n        getNextActiveElement(items, target, event.key === 'ArrowDown', true).focus()\n      }\n    }\n\n    const handleKeyup = (event: KeyboardEvent) => {\n      if (autoClose === false) {\n        return\n      }\n\n      if (event.key === 'Escape') {\n        setVisible(false)\n      }\n    }\n\n    const handleMouseUp = (event: Event) => {\n      if (!dropdownToggleRef.current || !dropdownMenuRef.current) {\n        return\n      }\n\n      if (dropdownToggleRef.current.contains(event.target as HTMLElement)) {\n        return\n      }\n\n      if (\n        autoClose === true ||\n        (autoClose === 'inside' && dropdownMenuRef.current.contains(event.target as HTMLElement)) ||\n        (autoClose === 'outside' && !dropdownMenuRef.current.contains(event.target as HTMLElement))\n      ) {\n        setTimeout(() => setVisible(false), 1)\n        return\n      }\n    }\n\n    return (\n      <CDropdownContext.Provider value={contextValues}>\n        {variant === 'input-group' ? (\n          <>{children}</>\n        ) : (\n          <Component\n            className={classNames(\n              variant === 'nav-item' ? 'nav-item dropdown' : variant,\n              {\n                'dropdown-center': direction === 'center',\n                'dropup dropup-center': direction === 'dropup-center',\n                [`${direction}`]:\n                  direction && direction !== 'center' && direction !== 'dropup-center',\n              },\n              className\n            )}\n            {...rest}\n            ref={forkedRef}\n          >\n            {children}\n          </Component>\n        )}\n      </CDropdownContext.Provider>\n    )\n  }\n)\n\nconst alignmentDirection = PropTypes.oneOf<Directions>(['start', 'end'])\n\nCDropdown.propTypes = {\n  alignment: PropTypes.oneOfType([\n    alignmentDirection,\n    PropTypes.shape({ xs: alignmentDirection.isRequired }),\n    PropTypes.shape({ sm: alignmentDirection.isRequired }),\n    PropTypes.shape({ md: alignmentDirection.isRequired }),\n    PropTypes.shape({ lg: alignmentDirection.isRequired }),\n    PropTypes.shape({ xl: alignmentDirection.isRequired }),\n    PropTypes.shape({ xxl: alignmentDirection.isRequired }),\n  ]),\n  as: PropTypes.elementType,\n  autoClose: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'inside' | 'outside'>(['inside', 'outside']),\n  ]),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  dark: PropTypes.bool,\n  direction: PropTypes.oneOf(['center', 'dropup', 'dropup-center', 'dropend', 'dropstart']),\n  offset: PropTypes.any, // TODO: find good proptype\n  onHide: PropTypes.func,\n  onShow: PropTypes.func,\n  placement: placementPropType,\n  popper: PropTypes.bool,\n  popperConfig: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  portal: PropTypes.bool,\n  variant: PropTypes.oneOf(['btn-group', 'dropdown', 'input-group', 'nav-item']),\n  visible: PropTypes.bool,\n}\n\nCDropdown.displayName = 'CDropdown'\n"]},"metadata":{},"sourceType":"module"}