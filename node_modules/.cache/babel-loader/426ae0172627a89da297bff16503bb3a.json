{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CAccordionItemContext } from './CAccordionItemContext.js';\nvar CAccordionButton = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      className = _a.className,\n      rest = __rest(_a, [\"children\", \"className\"]);\n\n  var _b = useContext(CAccordionItemContext),\n      id = _b.id,\n      visible = _b.visible,\n      setVisible = _b.setVisible;\n\n  return React.createElement(\"button\", __assign({\n    type: \"button\",\n    className: classNames('accordion-button', {\n      collapsed: !visible\n    }, className),\n    \"aria-controls\": id,\n    \"aria-expanded\": visible,\n    onClick: function () {\n      return setVisible(!visible);\n    }\n  }, rest, {\n    ref: ref\n  }), children);\n});\nCAccordionButton.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string\n};\nCAccordionButton.displayName = 'CAccordionButton';\nexport { CAccordionButton };","map":{"version":3,"mappings":";;;;;IAaaA,gBAAgB,GAAGC,UAAU,CACxC,UAACC,EAAD,EAAmCC,GAAnC,EAAsC;AAAnC,cAAQ,cAAR;AAAA,MAAUC,SAAS,eAAnB;AAAA,MAAwBC,IAAI,GAA9BC,qCAAE;;AACK,QAA8B,aAAU,CAACC,qBAAD,CAAxC;AAAA,MAAEC,EAAE,QAAJ;AAAA,MAAMC,OAAO,aAAb;AAAA,MAAeC,UAAU,gBAAzB;;AAEN,SACEC;AACEC,QAAI,EAAC,QADP;AAEER,aAAS,EAAES,UAAU,CAAC,kBAAD,EAAqB;AAAEC,eAAS,EAAE,CAACL;AAAd,KAArB,EAA8CL,SAA9C,CAFvB;AAGiB,uBAHjB;AAGmB,qBACFK,OAJjB;AAKEM,WAAO,EAAE;AAAM,uBAAU,CAAC,CAACN,OAAF,CAAV;AAAoB;AALrC,KAMMJ,IANN,EAMU;AACRF,OAAG,EAAEA;AADG,GANV,GASGa,QATH,CADF;AAaD,CAjBuC;AAoB1ChB,gBAAgB,CAACiB,SAAjB,GAA6B;AAC3BD,UAAQ,EAAEE,SAAS,CAACC,IADO;AAE3Bf,WAAS,EAAEc,SAAS,CAACE;AAFM,CAA7B;AAKApB,gBAAgB,CAACqB,WAAjB,GAA+B,kBAA/B","names":["CAccordionButton","forwardRef","_a","ref","className","rest","__rest","CAccordionItemContext","id","visible","setVisible","React","type","classNames","collapsed","onClick","children","propTypes","PropTypes","node","string","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react\\src\\components\\accordion\\CAccordionButton.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CAccordionItemContext } from './CAccordionItemContext'\n\nexport interface CAccordionButtonProps extends HTMLAttributes<HTMLButtonElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CAccordionButton = forwardRef<HTMLButtonElement, CAccordionButtonProps>(\n  ({ children, className, ...rest }, ref) => {\n    const { id, visible, setVisible } = useContext(CAccordionItemContext)\n\n    return (\n      <button\n        type=\"button\"\n        className={classNames('accordion-button', { collapsed: !visible }, className)}\n        aria-controls={id}\n        aria-expanded={visible}\n        onClick={() => setVisible(!visible)}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </button>\n    )\n  }\n)\n\nCAccordionButton.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCAccordionButton.displayName = 'CAccordionButton'\n"]},"metadata":{},"sourceType":"module"}