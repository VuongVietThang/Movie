{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CSidebarNavContext } from './CSidebarNavContext.js';\n\nvar isNavElement = function (child) {\n  if (!React.isValidElement(child)) return false;\n  var type = child.type;\n  return type.displayName === 'CNavGroup' || type.displayName === 'CNavLink' || type.displayName === 'CNavItem';\n};\n\nvar recursiveClone = function (children, id, updateId) {\n  return React.Children.map(children, function (child, index) {\n    if (!isNavElement(child)) {\n      return child;\n    }\n\n    var _id = id ? updateId ? \"\".concat(id, \".\").concat(index) : \"\".concat(id) : \"\".concat(index);\n\n    if (child.props.children) {\n      var type = child.type;\n      var shouldUpdateId = type.displayName !== 'CNavItem';\n      return React.cloneElement(child, {\n        idx: _id,\n        children: recursiveClone(child.props.children, _id, shouldUpdateId)\n      });\n    }\n\n    return React.cloneElement(child, {\n      idx: _id\n    });\n  });\n};\n\nvar CSidebarNav = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      _b = _a.as,\n      Component = _b === void 0 ? 'ul' : _b,\n      className = _a.className,\n      rest = __rest(_a, [\"children\", \"as\", \"className\"]);\n\n  var _c = useState(''),\n      visibleGroup = _c[0],\n      setVisibleGroup = _c[1];\n\n  var CNavContextValues = {\n    visibleGroup: visibleGroup,\n    setVisibleGroup: setVisibleGroup\n  };\n  return React.createElement(CSidebarNavContext.Provider, {\n    value: CNavContextValues\n  }, React.createElement(Component, __assign({\n    className: classNames('sidebar-nav', className),\n    ref: ref\n  }, rest), recursiveClone(children)));\n});\nCSidebarNav.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string\n};\nCSidebarNav.displayName = 'CSidebarNav';\nexport { CSidebarNav };","map":{"version":3,"mappings":";;;;;;AAgCA,IAAMA,YAAY,GAAG,UACnBC,KADmB,EACH;AAEhB,MAAI,CAACC,KAAK,CAACC,cAAN,CAAqBF,KAArB,CAAL,EAAkC,OAAO,KAAP;AAClC,MAAMG,IAAI,GAAGH,KAAK,CAACG,IAAnB;AACA,SACEA,IAAI,CAACC,WAAL,KAAqB,WAArB,IACAD,IAAI,CAACC,WAAL,KAAqB,UADrB,IAEAD,IAAI,CAACC,WAAL,KAAqB,UAHvB;AAKD,CAVD;;AAYA,IAAMC,cAAc,GAAG,UAACC,QAAD,EAAsBC,EAAtB,EAAmCC,QAAnC,EAAqD;AAC1E,SAAOP,KAAK,CAACQ,QAAN,CAAeC,GAAf,CAAmBJ,QAAnB,EAA6B,UAACN,KAAD,EAAQW,KAAR,EAAa;AAC/C,QAAI,CAACZ,YAAY,CAACC,KAAD,CAAjB,EAA0B;AACxB,aAAOA,KAAP;;;AAGF,QAAMY,GAAG,GAAGL,EAAE,GAAIC,QAAQ,GAAG,UAAGD,EAAH,EAAK,GAAL,EAAKM,MAAL,CAASF,KAAT,CAAH,GAAsB,UAAGJ,EAAH,CAAlC,GAA6C,GAAGM,MAAH,CAAGF,KAAH,CAA3D;;AAEA,QAAIX,KAAK,CAACc,KAAN,CAAYR,QAAhB,EAA0B;AACxB,UAAMH,IAAI,GAAGH,KAAK,CAACG,IAAnB;AACA,UAAMY,cAAc,GAAGZ,IAAI,CAACC,WAAL,KAAqB,UAA5C;AAEA,aAAOH,KAAK,CAACe,YAAN,CAAmBhB,KAAnB,EAA0B;AAC/BiB,WAAG,EAAEL,GAD0B;AAE/BN,gBAAQ,EAAED,cAAc,CAACL,KAAK,CAACc,KAAN,CAAYR,QAAb,EAAuBM,GAAvB,EAA4BG,cAA5B;AAFO,OAA1B,CAAP;;;AAMF,WAAOd,KAAK,CAACe,YAAN,CAAmBhB,KAAnB,EAA0B;AAC/BiB,SAAG,EAAEL;AAD0B,KAA1B,CAAP;AAGD,GApBM,CAAP;AAqBD,CAtBD;;IAwBaM,WAAW,GAA8DC,UAAU,CAG9F,UAACC,EAAD,EAAyDC,GAAzD,EAA4D;AAAzD,cAAQ,cAAR;AAAA,MAAUC,EAAoB,QAA9B;AAAA,MAAcC,SAAS,GAAGD,uBAAIA,EAA9B;AAAA,MAAgCE,SAAS,eAAzC;AAAA,MAA8CC,IAAI,cAApD,+BAAoD,CAAlD;;AACG,WAAkCC,QAAQ,CAAC,EAAD,CAA1C;AAAA,MAACC,YAAY,QAAb;AAAA,MAAeC,eAAe,QAA9B;;AACN,MAAMC,iBAAiB,GAAG;AACxBF,gBAAY,cADY;AAExBC,mBAAe;AAFS,GAA1B;AAKA,SACE3B,oBAAC6B,kBAAkB,CAACC,QAApB,EAA6B;AAAAC,SAAK,EAAEH;AAAP,GAA7B,EACE5B,KAAC,cAAD,CAACsB,SAAD,EAAWU;AAAAT,aAAS,EAAEU,UAAU,CAAC,aAAD,EAAgBV,SAAhB,CAArB;AAAiDH,OAAG,EAAEA;AAAtD,KAA+DI,IAA/D,CAAX,EACGpB,cAAc,CAACC,QAAD,CADjB,CADF,CADF;AAOD,CAjB+F;AAmBhGY,WAAW,CAACiB,SAAZ,GAAwB;AACtBC,IAAE,EAAEC,SAAS,CAACC,WADQ;AAEtBhC,UAAQ,EAAE+B,SAAS,CAACE,IAFE;AAGtBf,WAAS,EAAEa,SAAS,CAACG;AAHC,CAAxB;AAMAtB,WAAW,CAACd,WAAZ,GAA0B,aAA1B","names":["isNavElement","child","React","isValidElement","type","displayName","recursiveClone","children","id","updateId","Children","map","index","_id","concat","props","shouldUpdateId","cloneElement","idx","CSidebarNav","forwardRef","_a","ref","_b","Component","className","rest","useState","visibleGroup","setVisibleGroup","CNavContextValues","CSidebarNavContext","Provider","value","__assign","classNames","propTypes","as","PropTypes","elementType","node","string"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\sidebar\\CSidebarNav.tsx"],"sourcesContent":["import React, {\n  ElementType,\n  forwardRef,\n  HTMLAttributes,\n  ReactElement,\n  ReactNode,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport type { CNavGroupProps } from '../nav/CNavGroup'\nimport type { CNavLinkProps } from '../nav/CNavLink'\nimport type { CNavItemProps } from '../nav/CNavItem'\n\nimport { CSidebarNavContext } from './CSidebarNavContext'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CSidebarNavProps extends HTMLAttributes<HTMLUListElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   *\n   * @since 5.0.0\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nconst isNavElement = (\n  child: ReactNode\n): child is ReactElement<CNavGroupProps | CNavLinkProps | CNavItemProps> => {\n  if (!React.isValidElement(child)) return false\n  const type = child.type as { displayName?: string }\n  return (\n    type.displayName === 'CNavGroup' ||\n    type.displayName === 'CNavLink' ||\n    type.displayName === 'CNavItem'\n  )\n}\n\nconst recursiveClone = (children: ReactNode, id?: string, updateId?: boolean): ReactNode => {\n  return React.Children.map(children, (child, index) => {\n    if (!isNavElement(child)) {\n      return child\n    }\n\n    const _id = id ? (updateId ? `${id}.${index}` : `${id}`) : `${index}`\n\n    if (child.props.children) {\n      const type = child.type as { displayName?: string }\n      const shouldUpdateId = type.displayName !== 'CNavItem'\n\n      return React.cloneElement(child, {\n        idx: _id,\n        children: recursiveClone(child.props.children, _id, shouldUpdateId),\n      })\n    }\n\n    return React.cloneElement(child, {\n      idx: _id,\n    })\n  })\n}\n\nexport const CSidebarNav: PolymorphicRefForwardingComponent<'ul', CSidebarNavProps> = forwardRef<\n  HTMLUListElement,\n  CSidebarNavProps\n>(({ children, as: Component = 'ul', className, ...rest }, ref) => {\n  const [visibleGroup, setVisibleGroup] = useState('')\n  const CNavContextValues = {\n    visibleGroup,\n    setVisibleGroup,\n  }\n\n  return (\n    <CSidebarNavContext.Provider value={CNavContextValues}>\n      <Component className={classNames('sidebar-nav', className)} ref={ref} {...rest}>\n        {recursiveClone(children)}\n      </Component>\n    </CSidebarNavContext.Provider>\n  )\n})\n\nCSidebarNav.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCSidebarNav.displayName = 'CSidebarNav'\n"]},"metadata":{},"sourceType":"module"}