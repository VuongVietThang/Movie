{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CFormControlWrapper } from './CFormControlWrapper.js';\nvar CFormInput = forwardRef(function (_a, ref) {\n  var _b;\n\n  var children = _a.children,\n      className = _a.className,\n      _c = _a.delay,\n      delay = _c === void 0 ? false : _c,\n      feedback = _a.feedback,\n      feedbackInvalid = _a.feedbackInvalid,\n      feedbackValid = _a.feedbackValid,\n      floatingClassName = _a.floatingClassName,\n      floatingLabel = _a.floatingLabel,\n      id = _a.id,\n      invalid = _a.invalid,\n      label = _a.label,\n      onChange = _a.onChange,\n      plainText = _a.plainText,\n      size = _a.size,\n      text = _a.text,\n      tooltipFeedback = _a.tooltipFeedback,\n      _d = _a.type,\n      type = _d === void 0 ? 'text' : _d,\n      valid = _a.valid,\n      rest = __rest(_a, [\"children\", \"className\", \"delay\", \"feedback\", \"feedbackInvalid\", \"feedbackValid\", \"floatingClassName\", \"floatingLabel\", \"id\", \"invalid\", \"label\", \"onChange\", \"plainText\", \"size\", \"text\", \"tooltipFeedback\", \"type\", \"valid\"]);\n\n  var _e = useState(),\n      value = _e[0],\n      setValue = _e[1];\n\n  useEffect(function () {\n    var timeOutId = setTimeout(function () {\n      return value && onChange && onChange(value);\n    }, typeof delay === 'number' ? delay : 500);\n    return function () {\n      return clearTimeout(timeOutId);\n    };\n  }, [value]);\n  return React.createElement(CFormControlWrapper, {\n    describedby: rest['aria-describedby'],\n    feedback: feedback,\n    feedbackInvalid: feedbackInvalid,\n    feedbackValid: feedbackValid,\n    floatingClassName: floatingClassName,\n    floatingLabel: floatingLabel,\n    id: id,\n    invalid: invalid,\n    label: label,\n    text: text,\n    tooltipFeedback: tooltipFeedback,\n    valid: valid\n  }, React.createElement(\"input\", __assign({\n    className: classNames(plainText ? 'form-control-plaintext' : 'form-control', (_b = {}, _b[\"form-control-\".concat(size)] = size, _b['form-control-color'] = type === 'color', _b['is-invalid'] = invalid, _b['is-valid'] = valid, _b), className),\n    id: id,\n    type: type,\n    onChange: function (event) {\n      return delay ? setValue(event) : onChange && onChange(event);\n    }\n  }, rest, {\n    ref: ref\n  }), children));\n});\nCFormInput.propTypes = __assign({\n  className: PropTypes.string,\n  id: PropTypes.string,\n  delay: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  plainText: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg']),\n  type: PropTypes.oneOfType([PropTypes.oneOf(['color', 'file', 'text']), PropTypes.string])\n}, CFormControlWrapper.propTypes);\nCFormInput.displayName = 'CFormInput';\nexport { CFormInput };","map":{"version":3,"mappings":"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","names":["CFormInput","forwardRef","_a","ref","className","_c","delay","feedback","feedbackInvalid","feedbackValid","floatingClassName","floatingLabel","id","invalid","label","onChange","plainText","size","text","tooltipFeedback","_d","type","valid","rest","useState","value","setValue","useEffect","timeOutId","setTimeout","React","CFormControlWrapper","describedby","classNames","_b","concat","event","children","propTypes","__assign","PropTypes","string","oneOfType","bool","number","oneOf","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\form\\CFormInput.tsx"],"sourcesContent":["import React, {\n  ChangeEventHandler,\n  forwardRef,\n  InputHTMLAttributes,\n  useEffect,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\nexport interface CFormInputProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLInputElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Delay onChange event while typing. If set to true onChange event will be delayed 500ms, you can also provide the number of milliseconds you want to delay the onChange event.\n   */\n  delay?: boolean | number\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLInputElement>\n  /**\n   * Render the component styled as plain text. Removes the default form field styling and preserve the correct margin and padding. Recommend to use only along side `readonly`.\n   */\n  plainText?: boolean\n  /**\n   * Toggle the readonly state for the component.\n   */\n  readOnly?: boolean\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'color' | 'file' | 'text' | string\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   * */\n  value?: string | string[] | number\n}\n\nexport const CFormInput = forwardRef<HTMLInputElement, CFormInputProps>(\n  (\n    {\n      children,\n      className,\n      delay = false,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      id,\n      invalid,\n      label,\n      onChange,\n      plainText,\n      size,\n      text,\n      tooltipFeedback,\n      type = 'text',\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    const [value, setValue] = useState<React.ChangeEvent<HTMLInputElement>>()\n\n    useEffect(() => {\n      const timeOutId = setTimeout(\n        () => value && onChange && onChange(value),\n        typeof delay === 'number' ? delay : 500,\n      )\n\n      return () => clearTimeout(timeOutId)\n    }, [value])\n\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <input\n          className={classNames(\n            plainText ? 'form-control-plaintext' : 'form-control',\n            {\n              [`form-control-${size}`]: size,\n              'form-control-color': type === 'color',\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          id={id}\n          type={type}\n          onChange={(event) => (delay ? setValue(event) : onChange && onChange(event))}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </input>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormInput.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  delay: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  plainText: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg']),\n  type: PropTypes.oneOfType([PropTypes.oneOf(['color', 'file', 'text']), PropTypes.string]),\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormInput.displayName = 'CFormInput'\n"]},"metadata":{},"sourceType":"module"}