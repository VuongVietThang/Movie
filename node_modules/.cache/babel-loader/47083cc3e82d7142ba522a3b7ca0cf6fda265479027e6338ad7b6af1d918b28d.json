{"ast":null,"code":"import React, { forwardRef, useId, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CTabsContext } from './CTabsContext.js';\nvar CTabs = forwardRef(function (_a, ref) {\n  var children = _a.children,\n    activeItemKey = _a.activeItemKey,\n    className = _a.className,\n    defaultActiveItemKey = _a.defaultActiveItemKey,\n    onChange = _a.onChange;\n  var id = useId();\n  var isControlled = activeItemKey !== undefined;\n  var _b = useState(function () {\n      return isControlled ? undefined : defaultActiveItemKey;\n    }),\n    internalActiveItemKey = _b[0],\n    setInternalActiveItemKey = _b[1];\n  var currentActiveItemKey = isControlled ? activeItemKey : internalActiveItemKey;\n  var setActiveItemKey = function (value) {\n    if (!isControlled) {\n      setInternalActiveItemKey(value);\n    }\n    onChange === null || onChange === void 0 ? void 0 : onChange(value);\n  };\n  return React.createElement(CTabsContext.Provider, {\n    value: {\n      _activeItemKey: currentActiveItemKey,\n      setActiveItemKey: setActiveItemKey,\n      id: id\n    }\n  }, React.createElement(\"div\", {\n    className: classNames('tabs', className),\n    ref: ref\n  }, children));\n});\nCTabs.propTypes = {\n  activeItemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  defaultActiveItemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  onChange: PropTypes.func\n};\nCTabs.displayName = 'CTabs';\nexport { CTabs };","map":{"version":3,"names":["CTabs","forwardRef","_a","ref","children","activeItemKey","className","defaultActiveItemKey","onChange","id","useId","isControlled","undefined","_b","useState","internalActiveItemKey","setInternalActiveItemKey","currentActiveItemKey","setActiveItemKey","value","React","createElement","CTabsContext","Provider","_activeItemKey","classNames","propTypes","PropTypes","oneOfType","number","string","node","func","displayName"],"sources":["/Users/thaiduy/Movie/node_modules/@coreui/react/src/components/tabs/CTabs.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes, useId, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CTabsContext } from './CTabsContext'\n\nexport interface CTabsProps extends Omit<HTMLAttributes<HTMLDivElement>, 'onChange'> {\n  /**\n   * Controls the currently active tab.\n   *\n   * When provided, the component operates in a controlled mode.\n   * You must handle tab switching manually by updating this prop.\n   *\n   * @example\n   * const [activeTab, setActiveTab] = useState(0);\n   * <CTabs activeItemKey={activeTab} onChange={setActiveTab} />\n   */\n  activeItemKey?: number | string\n\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n\n  /**\n   * Sets the initially active tab when the component mounts.\n   *\n   * After initialization, the component manages active tab changes internally.\n   *\n   * Use `defaultActiveItemKey` for uncontrolled usage.\n   *\n   * @example\n   * <CTabs defaultActiveItemKey={1} />\n   */\n  defaultActiveItemKey?: number | string\n\n  /**\n   * Callback fired when the active tab changes.\n   *\n   * - In controlled mode (`activeItemKey` provided), you must update `activeItemKey` yourself based on the value received.\n   * - In uncontrolled mode, this callback is called after internal state updates.\n   *\n   * @param value - The newly selected tab key.\n   *\n   * @example\n   * <CTabs onChange={(key) => console.log('Tab changed to', key)} />\n   */\n  onChange?: (value: number | string) => void\n}\n\nexport const CTabs = forwardRef<HTMLDivElement, CTabsProps>(\n  ({ children, activeItemKey, className, defaultActiveItemKey, onChange }, ref) => {\n    const id = useId()\n    const isControlled = activeItemKey !== undefined\n    const [internalActiveItemKey, setInternalActiveItemKey] = useState<number | string | undefined>(\n      () => (isControlled ? undefined : defaultActiveItemKey)\n    )\n\n    const currentActiveItemKey = isControlled ? activeItemKey : internalActiveItemKey\n\n    const setActiveItemKey = (value: number | string) => {\n      if (!isControlled) {\n        setInternalActiveItemKey(value)\n      }\n\n      onChange?.(value)\n    }\n\n    return (\n      <CTabsContext.Provider value={{ _activeItemKey: currentActiveItemKey, setActiveItemKey, id }}>\n        <div className={classNames('tabs', className)} ref={ref}>\n          {children}\n        </div>\n      </CTabsContext.Provider>\n    )\n  }\n)\n\nCTabs.propTypes = {\n  activeItemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  defaultActiveItemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  onChange: PropTypes.func,\n}\n\nCTabs.displayName = 'CTabs'\n"],"mappings":";;;;IAkDaA,KAAK,GAAGC,UAAU,CAC7B,UAACC,EAAsE,EAAEC,GAAG;EAAzE,IAAAC,QAAQ,GAAAF,EAAA,CAAAE,QAAA;IAAEC,aAAa,GAAAH,EAAA,CAAAG,aAAA;IAAEC,SAAS,GAAAJ,EAAA,CAAAI,SAAA;IAAEC,oBAAoB,GAAAL,EAAA,CAAAK,oBAAA;IAAEC,QAAQ,GAAAN,EAAA,CAAAM,QAAA;EACnE,IAAMC,EAAE,GAAGC,KAAK,EAAE;EAClB,IAAMC,YAAY,GAAGN,aAAa,KAAKO,SAAS;EAC1C,IAAAC,EAAA,GAAoDC,QAAQ,CAChE,YAAM;MAAA,OAACH,YAAY,GAAGC,SAAS,GAAGL,oBAAoB;IAAC,EACxD;IAFMQ,qBAAqB,GAAAF,EAAA;IAAEG,wBAAwB,GAAAH,EAAA,GAErD;EAED,IAAMI,oBAAoB,GAAGN,YAAY,GAAGN,aAAa,GAAGU,qBAAqB;EAEjF,IAAMG,gBAAgB,GAAG,SAAAA,CAACC,KAAsB;IAC9C,IAAI,CAACR,YAAY,EAAE;MACjBK,wBAAwB,CAACG,KAAK,CAAC;;IAGjCX,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAGW,KAAK,CAAC;EACnB,CAAC;EAED,OACEC,KAAC,CAAAC,aAAA,CAAAC,YAAY,CAACC,QAAQ;IAACJ,KAAK,EAAE;MAAEK,cAAc,EAAEP,oBAAoB;MAAEC,gBAAgB,EAAAA,gBAAA;MAAET,EAAE,EAAAA;IAAA;EAAE,GAC1FW,KAAA,CAAAC,aAAA;IAAKf,SAAS,EAAEmB,UAAU,CAAC,MAAM,EAAEnB,SAAS,CAAC;IAAEH,GAAG,EAAEA;EAAG,GACpDC,QAAQ,CACL,CACgB;AAE5B,CAAC;AAGHJ,KAAK,CAAC0B,SAAS,GAAG;EAChBrB,aAAa,EAAEsB,SAAS,CAACC,SAAS,CAAC,CAACD,SAAS,CAACE,MAAM,EAAEF,SAAS,CAACG,MAAM,CAAC,CAAC;EACxE1B,QAAQ,EAAEuB,SAAS,CAACI,IAAI;EACxBzB,SAAS,EAAEqB,SAAS,CAACG,MAAM;EAC3BvB,oBAAoB,EAAEoB,SAAS,CAACC,SAAS,CAAC,CAACD,SAAS,CAACE,MAAM,EAAEF,SAAS,CAACG,MAAM,CAAC,CAAC;EAC/EtB,QAAQ,EAAEmB,SAAS,CAACK;CACrB;AAEDhC,KAAK,CAACiC,WAAW,GAAG,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}