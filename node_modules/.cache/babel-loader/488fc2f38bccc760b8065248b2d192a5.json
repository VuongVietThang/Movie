{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { textColorsPropType, shapePropType, colorPropType } from '../../props.js';\nvar CAvatar = forwardRef(function (_a, ref) {\n  var _b;\n\n  var children = _a.children,\n      className = _a.className,\n      color = _a.color,\n      shape = _a.shape,\n      size = _a.size,\n      src = _a.src,\n      status = _a.status,\n      textColor = _a.textColor,\n      rest = __rest(_a, [\"children\", \"className\", \"color\", \"shape\", \"size\", \"src\", \"status\", \"textColor\"]);\n\n  var statusClassName = status && classNames('avatar-status', \"bg-\".concat(status));\n  return React.createElement(\"div\", __assign({\n    className: classNames('avatar', (_b = {}, _b[\"bg-\".concat(color)] = color, _b[\"avatar-\".concat(size)] = size, _b[\"text-\".concat(textColor)] = textColor, _b), shape, className)\n  }, rest, {\n    ref: ref\n  }), src ? React.createElement(\"img\", {\n    src: src,\n    className: \"avatar-img\"\n  }) : children, status && React.createElement(\"span\", {\n    className: statusClassName\n  }));\n});\nCAvatar.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  shape: shapePropType,\n  size: PropTypes.string,\n  src: PropTypes.string,\n  status: PropTypes.string,\n  textColor: textColorsPropType\n};\nCAvatar.displayName = 'CAvatar';\nexport { CAvatar };","map":{"version":3,"mappings":";;;;;IA8CaA,OAAO,GAAGC,UAAU,CAC/B,UAACC,EAAD,EAA+EC,GAA/E,EAAkF;;;AAA/E,cAAQ,cAAR;AAAA,MAAUC,SAAS,eAAnB;AAAA,MAAqBC,KAAK,WAA1B;AAAA,MAA4BC,KAAK,WAAjC;AAAA,MAAmCC,IAAI,UAAvC;AAAA,MAAyCC,GAAG,SAA5C;AAAA,MAA8CC,MAAM,YAApD;AAAA,MAAsDC,SAAS,eAA/D;AAAA,MAAoEC,IAAI,GAA1EC,6FAAE;;AACD,MAAMC,eAAe,GAAGJ,MAAM,IAAIK,UAAU,CAAC,eAAD,EAAkB,MAAMC,MAAN,CAAMN,MAAN,CAAlB,CAA5C;AAEA,SACEO,KACE,cADF,CACE,KADF,EACEC;AAAAb,aAAS,EAAEU,UAAU,CACnB,QADmB,GACXI,SAENA,GAAC,MAAMH,MAAN,CAAMV,KAAN,CAAD,IAAiBA,KAFX,EAGNa,GAAC,UAAUH,MAAV,CAAUR,IAAV,CAAD,IAAoBA,IAHd,EAINW,GAAC,QAAQH,MAAR,CAAQL,SAAR,CAAD,IAAuBA,SAJjB,IADW,GAOnBJ,KAPmB,EAQnBF,SARmB;AAArB,KAUIO,IAVJ,EAWA;AAAAR,OAAG,EAAEA;AAAL,GAXA,CADF,EAcGK,GAAG,GAAGQ;AAAKR,OAAG,EAAEA,GAAV;AAAeJ,aAAS,EAAC;AAAzB,IAAH,GAA8Ce,QAdpD,EAeGV,MAAM,IAAIO;AAAMZ,aAAS,EAAES;AAAjB,IAfb,CADF;AAmBD,CAvB8B;AA0BjCb,OAAO,CAACoB,SAAR,GAAoB;AAClBD,UAAQ,EAAEE,SAAS,CAACC,IADF;AAElBlB,WAAS,EAAEiB,SAAS,CAACE,MAFH;AAGlBlB,OAAK,EAAEmB,aAHW;AAIlBlB,OAAK,EAAEmB,aAJW;AAKlBlB,MAAI,EAAEc,SAAS,CAACE,MALE;AAMlBf,KAAG,EAAEa,SAAS,CAACE,MANG;AAOlBd,QAAM,EAAEY,SAAS,CAACE,MAPA;AAQlBb,WAAS,EAAEgB;AARO,CAApB;AAWA1B,OAAO,CAAC2B,WAAR,GAAsB,SAAtB","names":["CAvatar","forwardRef","_a","ref","className","color","shape","size","src","status","textColor","rest","__rest","statusClassName","classNames","concat","React","__assign","_b","children","propTypes","PropTypes","node","string","colorPropType","shapePropType","textColorsPropType","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react\\src\\components\\avatar\\CAvatar.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType, shapePropType, textColorsPropType } from '../../props'\nimport type { Colors, Shapes, TextColors } from '../../types'\n\nexport interface CAvatarProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Select the shape of the component.\n   *\n   * @type 'rounded' | 'rounded-top' | 'rounded-end' | 'rounded-bottom' | 'rounded-start' | 'rounded-circle' | 'rounded-pill' | 'rounded-0' | 'rounded-1' | 'rounded-2' | 'rounded-3' | string\n   */\n  shape?: Shapes\n  /**\n   * Size the component small, large, or extra large.\n   */\n  size?: string\n  /**\n   * The src attribute for the img element.\n   */\n  src?: string\n  /**\n   * Sets the color context of the status indicator to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  status?: Colors\n  /**\n   * Sets the text color of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: TextColors\n}\n\nexport const CAvatar = forwardRef<HTMLDivElement, CAvatarProps>(\n  ({ children, className, color, shape, size, src, status, textColor, ...rest }, ref) => {\n    const statusClassName = status && classNames('avatar-status', `bg-${status}`)\n\n    return (\n      <div\n        className={classNames(\n          'avatar',\n          {\n            [`bg-${color}`]: color,\n            [`avatar-${size}`]: size,\n            [`text-${textColor}`]: textColor,\n          },\n          shape,\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {src ? <img src={src} className=\"avatar-img\" /> : children}\n        {status && <span className={statusClassName}></span>}\n      </div>\n    )\n  },\n)\n\nCAvatar.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  shape: shapePropType,\n  size: PropTypes.string,\n  src: PropTypes.string,\n  status: PropTypes.string,\n  textColor: textColorsPropType,\n}\n\nCAvatar.displayName = 'CAvatar'\n"]},"metadata":{},"sourceType":"module"}