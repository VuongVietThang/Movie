{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { colorPropType } from '../../props.js';\nvar BREAKPOINTS = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];\nvar CPlaceholder = forwardRef(function (_a, ref) {\n  var _b;\n\n  var children = _a.children,\n      animation = _a.animation,\n      _c = _a.as,\n      Component = _c === void 0 ? 'span' : _c,\n      className = _a.className,\n      color = _a.color,\n      size = _a.size,\n      rest = __rest(_a, [\"children\", \"animation\", \"as\", \"className\", \"color\", \"size\"]);\n\n  var repsonsiveClassNames = [];\n  BREAKPOINTS.forEach(function (bp) {\n    var breakpoint = rest[bp];\n    delete rest[bp];\n    var infix = bp === 'xs' ? '' : \"-\".concat(bp);\n\n    if (typeof breakpoint === 'number') {\n      repsonsiveClassNames.push(\"col\".concat(infix, \"-\").concat(breakpoint));\n    }\n\n    if (typeof breakpoint === 'boolean') {\n      repsonsiveClassNames.push(\"col\".concat(infix));\n    }\n  });\n  return React.createElement(Component, __assign({\n    className: classNames(animation ? \"placeholder-\".concat(animation) : 'placeholder', (_b = {}, _b[\"bg-\".concat(color)] = color, _b[\"placeholder-\".concat(size)] = size, _b), repsonsiveClassNames, className)\n  }, rest, {\n    ref: ref\n  }), children);\n});\nCPlaceholder.propTypes = {\n  animation: PropTypes.oneOf(['glow', 'wave']),\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  size: PropTypes.oneOf(['xs', 'sm', 'lg'])\n};\nCPlaceholder.displayName = 'CPlaceholder';\nexport { CPlaceholder };","map":{"version":3,"mappings":";;;;;AAyDA,IAAMA,WAAW,GAAG,CAClB,KADkB,EAElB,IAFkB,EAGlB,IAHkB,EAIlB,IAJkB,EAKlB,IALkB,EAMlB,IANkB,CAApB;IASaC,YAAY,GACvBC,UAAU,CACR,UAACC,EAAD,EAAmFC,GAAnF,EAAsF;;;AAAnF,cAAQ,cAAR;AAAA,MAAUC,SAAS,eAAnB;AAAA,MAAqBC,EAAsB,QAA3C;AAAA,MAAyBC,SAAS,mBAAG,MAAH,GAASD,EAA3C;AAAA,MAA6CE,SAAS,eAAtD;AAAA,MAAwDC,KAAK,WAA7D;AAAA,MAA+DC,IAAI,UAAnE;AAAA,MAAwEC,IAAI,GAA9EC,yEAAE;;AACD,MAAMC,oBAAoB,GAAa,EAAvC;AAEAb,aAAW,CAACc,OAAZ,CAAoB,UAACC,EAAD,EAAG;AACrB,QAAMC,UAAU,GAAGL,IAAI,CAACI,EAAD,CAAvB;AACA,WAAOJ,IAAI,CAACI,EAAD,CAAX;AAEA,QAAME,KAAK,GAAGF,EAAE,KAAK,IAAP,GAAc,EAAd,GAAmB,IAAIG,MAAJ,CAAIH,EAAJ,CAAjC;;AAEA,QAAI,OAAOC,UAAP,KAAsB,QAA1B,EAAoC;AAClCH,0BAAoB,CAACM,IAArB,CAA0B,aAAMF,KAAN,EAAe,GAAf,EAAeC,MAAf,CAAeF,UAAf,CAA1B;;;AAGF,QAAI,OAAOA,UAAP,KAAsB,SAA1B,EAAqC;AACnCH,0BAAoB,CAACM,IAArB,CAA0B,aAAMF,KAAN,CAA1B;;AAEH,GAbD;AAeA,SACEG,KAAC,cAAD,CAACb,SAAD,EAAUc;AACRb,aAAS,EAAEc,UAAU,CACnBjB,SAAS,GAAG,eAAea,MAAf,CAAeb,SAAf,CAAH,GAAgC,aADtB,GACmCkB,SAEpDA,GAAC,MAAML,MAAN,CAAMT,KAAN,CAAD,IAAiBA,KAFmC,EAGpDc,GAAC,eAAeL,MAAf,CAAeR,IAAf,CAAD,IAAyBA,IAH2B,EAKtDa,EANmB,GAMnBV,oBANmB,EAOnBL,SAPmB;AADb,KAUJG,IAVI,EAUA;AACRP,OAAG,EAAEA;AADG,GAVA,CAAV,EAaGoB,QAbH,CADF;AAiBD,CApCO;AAuCZvB,YAAY,CAACwB,SAAb,GAAyB;AACvBpB,WAAS,EAAEqB,SAAS,CAACC,KAAV,CAAgB,CAAC,MAAD,EAAS,MAAT,CAAhB,CADY;AAEvBC,IAAE,EAAEF,SAAS,CAACG,WAFS;AAGvBL,UAAQ,EAAEE,SAAS,CAACI,IAHG;AAIvBtB,WAAS,EAAEkB,SAAS,CAACK,MAJE;AAKvBtB,OAAK,EAAEuB,aALgB;AAMvBtB,MAAI,EAAEgB,SAAS,CAACC,KAAV,CAAgB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAAhB;AANiB,CAAzB;AASA1B,YAAY,CAACgC,WAAb,GAA2B,cAA3B","names":["BREAKPOINTS","CPlaceholder","forwardRef","_a","ref","animation","_c","Component","className","color","size","rest","__rest","repsonsiveClassNames","forEach","bp","breakpoint","infix","concat","push","React","__assign","classNames","_b","children","propTypes","PropTypes","oneOf","as","elementType","node","string","colorPropType","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\placeholder\\CPlaceholder.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CPlaceholderProps extends HTMLAttributes<HTMLSpanElement> {\n  /**\n   * Set animation type to better convey the perception of something being actively loaded.\n   */\n  animation?: 'glow' | 'wave'\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Size the component extra small, small, or large.\n   */\n  size?: 'xs' | 'sm' | 'lg'\n  /**\n   * The number of columns on extra small devices (<576px).\n   */\n  xs?: number\n  /**\n   * The number of columns on small devices (<768px).\n   */\n  sm?: number\n  /**\n   * The number of columns on medium devices (<992px).\n   */\n  md?: number\n  /**\n   * The number of columns on large devices (<1200px).\n   */\n  lg?: number\n  /**\n   * The number of columns on X-Large devices (<1400px).\n   */\n  xl?: number\n  /**\n   * The number of columns on XX-Large devices (≥1400px).\n   */\n  xxl?: number\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CPlaceholder: PolymorphicRefForwardingComponent<'span', CPlaceholderProps> =\n  forwardRef<HTMLSpanElement, CPlaceholderProps>(\n    ({ children, animation, as: Component = 'span', className, color, size, ...rest }, ref) => {\n      const repsonsiveClassNames: string[] = []\n\n      BREAKPOINTS.forEach((bp) => {\n        const breakpoint = rest[bp]\n        delete rest[bp]\n\n        const infix = bp === 'xs' ? '' : `-${bp}`\n\n        if (typeof breakpoint === 'number') {\n          repsonsiveClassNames.push(`col${infix}-${breakpoint}`)\n        }\n\n        if (typeof breakpoint === 'boolean') {\n          repsonsiveClassNames.push(`col${infix}`)\n        }\n      })\n\n      return (\n        <Component\n          className={classNames(\n            animation ? `placeholder-${animation}` : 'placeholder',\n            {\n              [`bg-${color}`]: color,\n              [`placeholder-${size}`]: size,\n            },\n            repsonsiveClassNames,\n            className,\n          )}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </Component>\n      )\n    },\n  )\n\nCPlaceholder.propTypes = {\n  animation: PropTypes.oneOf(['glow', 'wave']),\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  size: PropTypes.oneOf(['xs', 'sm', 'lg']),\n}\n\nCPlaceholder.displayName = 'CPlaceholder'\n"]},"metadata":{},"sourceType":"module"}