{"ast":null,"code":"import React, { forwardRef, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport '../../node_modules/tslib/tslib.es6.js';\nimport '@popperjs/core';\nimport { useForkedRef } from '../../hooks/useForkedRef.js';\nimport { useIsVisible } from '../../hooks/useIsVisible.js';\nvar CTimePickerRollCol = forwardRef(function (_a, ref) {\n  var elements = _a.elements,\n      onClick = _a.onClick,\n      selected = _a.selected;\n  var init = useRef(true);\n  var colRef = useRef(null);\n  var forkedRef = useForkedRef(ref, colRef);\n  var isVisible = useIsVisible(colRef);\n  useEffect(function () {\n    var _a, _b;\n\n    var nodeEl = (_a = colRef.current) === null || _a === void 0 ? void 0 : _a.querySelector('.selected');\n\n    if (isVisible && nodeEl && nodeEl instanceof HTMLElement) {\n      (_b = colRef.current) === null || _b === void 0 ? void 0 : _b.scrollTo({\n        top: nodeEl.offsetTop,\n        behavior: init.current ? 'auto' : 'smooth'\n      });\n    }\n\n    if (isVisible) {\n      init.current = false;\n    }\n  }, [isVisible, selected]);\n\n  var handleKeyDown = function (event, value) {\n    if (event.code === 'Space' || event.key === 'Enter') {\n      event.preventDefault();\n      onClick && onClick(value);\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"time-picker-roll-col\",\n    ref: forkedRef\n  }, elements.map(function (element, index) {\n    return React.createElement(\"div\", {\n      className: classNames('time-picker-roll-cell', {\n        selected: element.value === selected\n      }),\n      key: index,\n      onClick: function () {\n        return onClick && onClick(element.value);\n      },\n      onKeyDown: function (event) {\n        return handleKeyDown(event, element.value);\n      },\n      role: \"button\",\n      tabIndex: 0\n    }, element.label);\n  }));\n});\nCTimePickerRollCol.propTypes = {\n  elements: PropTypes.array.isRequired,\n  onClick: PropTypes.func,\n  selected: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n};\nCTimePickerRollCol.displayName = 'CTimePickerRollCol';\nexport { CTimePickerRollCol };","map":{"version":3,"mappings":";;;;;;;IAiBaA,kBAAkB,GAAGC,UAAU,CAC1C,UAACC,EAAD,EAAkCC,GAAlC,EAAqC;AAAlC,cAAQ,cAAR;AAAA,MAAUC,OAAO,aAAjB;AAAA,MAAmBC,QAAQ,cAA3B;AACD,MAAMC,IAAI,GAAGC,MAAM,CAAC,IAAD,CAAnB;AACA,MAAMC,MAAM,GAAGD,MAAM,CAAiB,IAAjB,CAArB;AACA,MAAME,SAAS,GAAGC,YAAY,CAACP,GAAD,EAAMK,MAAN,CAA9B;AACA,MAAMG,SAAS,GAAGC,YAAY,CAACJ,MAAD,CAA9B;AAEAK,WAAS,CAAC;;;AACR,QAAMC,MAAM,GAAG,YAAM,CAACC,OAAP,MAAc,IAAd,IAAcb,aAAd,GAAc,MAAd,GAAcA,GAAEc,aAAF,CAAgB,WAAhB,CAA7B;;AACA,QAAIL,SAAS,IAAIG,MAAb,IAAuBA,MAAM,YAAYG,WAA7C,EAA0D;AACxD,kBAAM,CAACF,OAAP,MAAc,IAAd,IAAcG,aAAd,GAAc,MAAd,GAAcA,GAAEC,QAAF,CAAW;AACvBC,WAAG,EAAEN,MAAM,CAACO,SADW;AAEvBC,gBAAQ,EAAEhB,IAAI,CAACS,OAAL,GAAe,MAAf,GAAwB;AAFX,OAAX,CAAd;;;AAMF,QAAIJ,SAAJ,EAAe;AACbL,UAAI,CAACS,OAAL,GAAe,KAAf;;AAEH,GAZQ,EAYN,CAACJ,SAAD,EAAYN,QAAZ,CAZM,CAAT;;AAcA,MAAMkB,aAAa,GAAG,UAACC,KAAD,EAA6CC,KAA7C,EAAmE;AACvF,QAAID,KAAK,CAACE,IAAN,KAAe,OAAf,IAA0BF,KAAK,CAACG,GAAN,KAAc,OAA5C,EAAqD;AACnDH,WAAK,CAACI,cAAN;AACAxB,aAAO,IAAIA,OAAO,CAACqB,KAAD,CAAlB;;AAEH,GALD;;AAOA,SACEI,KAAK,cAAL,CAAK,KAAL,EAAK;AAAAC,aAAS,EAAC,sBAAV;AAAiC3B,OAAG,EAAEM;AAAtC,GAAL,EACGsB,QAAQ,CAACC,GAAT,CAAa,UAACC,OAAD,EAAUC,KAAV,EAAe;AAC3B,WACEL,KACE,cADF,CACE,KADF,EACE;AAAAC,eAAS,EAAEK,UAAU,CAAC,uBAAD,EAA0B;AAC7C9B,gBAAQ,EAAE4B,OAAO,CAACR,KAAR,KAAkBpB;AADiB,OAA1B,CAArB;AAGAsB,SAAG,EAAEO,KAHL;AAIA9B,aAAO,EAAE,YAAM;AAAA,sBAAO,IAAIA,OAAO,CAAC6B,OAAO,CAACR,KAAT,CAAlB;AAAiC,OAJhD;AAKAW,eAAS,EAAE,UAACZ,KAAD,EAAM;AAAK,4BAAa,CAACA,KAAD,EAAQS,OAAO,CAACR,KAAhB,CAAb;AAAmC,OALzD;AAMAY,UAAI,EAAC,QANL;AAOAC,cAAQ,EAAE;AAPV,KADF,EAUGL,OAAO,CAACM,KAVX,CADF;AAcD,GAfA,CADH,CADF;AAoBD,CAhDyC;AAmD5CvC,kBAAkB,CAACwC,SAAnB,GAA+B;AAC7BT,UAAQ,EAAEU,SAAS,CAACC,KAAV,CAAgBC,UADG;AAE7BvC,SAAO,EAAEqC,SAAS,CAACG,IAFU;AAG7BvC,UAAQ,EAAEoC,SAAS,CAACI,SAAV,CAAoB,CAACJ,SAAS,CAACK,MAAX,EAAmBL,SAAS,CAACM,MAA7B,CAApB;AAHmB,CAA/B;AAMA/C,kBAAkB,CAACgD,WAAnB,GAAiC,oBAAjC","names":["CTimePickerRollCol","forwardRef","_a","ref","onClick","selected","init","useRef","colRef","forkedRef","useForkedRef","isVisible","useIsVisible","useEffect","nodeEl","current","querySelector","HTMLElement","_b","scrollTo","top","offsetTop","behavior","handleKeyDown","event","value","code","key","preventDefault","React","className","elements","map","element","index","classNames","onKeyDown","role","tabIndex","label","propTypes","PropTypes","array","isRequired","func","oneOfType","number","string","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\time-picker\\CTimePickerRollCol.tsx"],"sourcesContent":["import React, { forwardRef, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { useForkedRef, useIsVisible } from '../../hooks'\n\nexport interface Element {\n  value: number | string\n  label: number | string\n}\n\nexport interface CTimePickerRollColProps {\n  elements: Element[]\n  onClick?: (value: number | string) => void\n  selected?: number | string | null\n}\n\nexport const CTimePickerRollCol = forwardRef<HTMLDivElement, CTimePickerRollColProps>(\n  ({ elements, onClick, selected }, ref) => {\n    const init = useRef(true)\n    const colRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, colRef)\n    const isVisible = useIsVisible(colRef)\n\n    useEffect(() => {\n      const nodeEl = colRef.current?.querySelector('.selected')\n      if (isVisible && nodeEl && nodeEl instanceof HTMLElement) {\n        colRef.current?.scrollTo({\n          top: nodeEl.offsetTop,\n          behavior: init.current ? 'auto' : 'smooth',\n        })\n      }\n\n      if (isVisible) {\n        init.current = false\n      }\n    }, [isVisible, selected])\n\n    const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>, value: number | string) => {\n      if (event.code === 'Space' || event.key === 'Enter') {\n        event.preventDefault()\n        onClick && onClick(value)\n      }\n    }\n\n    return (\n      <div className=\"time-picker-roll-col\" ref={forkedRef}>\n        {elements.map((element, index) => {\n          return (\n            <div\n              className={classNames('time-picker-roll-cell', {\n                selected: element.value === selected,\n              })}\n              key={index}\n              onClick={() => onClick && onClick(element.value)}\n              onKeyDown={(event) => handleKeyDown(event, element.value)}\n              role=\"button\"\n              tabIndex={0}\n            >\n              {element.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  },\n)\n\nCTimePickerRollCol.propTypes = {\n  elements: PropTypes.array.isRequired,\n  onClick: PropTypes.func,\n  selected: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n}\n\nCTimePickerRollCol.displayName = 'CTimePickerRollCol'\n"]},"metadata":{},"sourceType":"module"}