{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nvar CInputGroup = forwardRef(function (_a, ref) {\n  var _b;\n\n  var children = _a.children,\n      className = _a.className,\n      size = _a.size,\n      rest = __rest(_a, [\"children\", \"className\", \"size\"]);\n\n  return React.createElement(\"div\", __assign({\n    className: classNames('input-group', (_b = {}, _b[\"input-group-\".concat(size)] = size, _b), className)\n  }, rest, {\n    ref: ref\n  }), children);\n});\nCInputGroup.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  size: PropTypes.oneOf(['sm', 'lg'])\n};\nCInputGroup.displayName = 'CInputGroup';\nexport { CInputGroup };","map":{"version":3,"mappings":";;;;IAeaA,WAAW,GAAGC,UAAU,CACnC,UAACC,EAAD,EAAyCC,GAAzC,EAA4C;;;AAAzC,cAAQ,cAAR;AAAA,MAAUC,SAAS,eAAnB;AAAA,MAAqBC,IAAI,UAAzB;AAAA,MAA8BC,IAAI,GAApCC,6CAAE;;AACD,SACEC,KACE,cADF,CACE,KADF,EACEC;AAAAL,aAAS,EAAEM,UAAU,CACnB,aADmB,GACNC,SAEXA,GAAC,eAAeC,MAAf,CAAeP,IAAf,CAAD,IAAyBA,IAFd,IADM,GAKnBD,SALmB;AAArB,KAOIE,IAPJ,EAQA;AAAAH,OAAG,EAAEA;AAAL,GARA,CADF,EAWGU,QAXH,CADF;AAeD,CAjBkC;AAoBrCb,WAAW,CAACc,SAAZ,GAAwB;AACtBD,UAAQ,EAAEE,SAAS,CAACC,IADE;AAEtBZ,WAAS,EAAEW,SAAS,CAACE,MAFC;AAGtBZ,MAAI,EAAEU,SAAS,CAACG,KAAV,CAAgB,CAAC,IAAD,EAAO,IAAP,CAAhB;AAHgB,CAAxB;AAMAlB,WAAW,CAACmB,WAAZ,GAA0B,aAA1B","names":["CInputGroup","forwardRef","_a","ref","className","size","rest","__rest","React","__assign","classNames","_b","concat","children","propTypes","PropTypes","node","string","oneOf","displayName"],"sources":["C:\\wamp64\\www\\Movie\\node_modules\\@coreui\\react\\src\\components\\form\\CInputGroup.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CInputGroupProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n}\n\nexport const CInputGroup = forwardRef<HTMLDivElement, CInputGroupProps>(\n  ({ children, className, size, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'input-group',\n          {\n            [`input-group-${size}`]: size,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCInputGroup.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  size: PropTypes.oneOf(['sm', 'lg']),\n}\n\nCInputGroup.displayName = 'CInputGroup'\n"]},"metadata":{},"sourceType":"module"}