{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CCloseButton } from '../close-button/CCloseButton.js';\nimport { useForkedRef } from '../../hooks/useForkedRef.js';\nimport '@popperjs/core';\nimport { colorPropType } from '../../props.js';\nimport Transition from '../../node_modules/react-transition-group/esm/Transition.js';\nvar CAlert = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      className = _a.className,\n      _b = _a.color,\n      color = _b === void 0 ? 'primary' : _b,\n      dismissible = _a.dismissible,\n      variant = _a.variant,\n      _c = _a.visible,\n      visible = _c === void 0 ? true : _c,\n      onClose = _a.onClose,\n      rest = __rest(_a, [\"children\", \"className\", \"color\", \"dismissible\", \"variant\", \"visible\", \"onClose\"]);\n\n  var alertRef = useRef(null);\n  var forkedRef = useForkedRef(ref, alertRef);\n\n  var _d = useState(visible),\n      _visible = _d[0],\n      setVisible = _d[1];\n\n  useEffect(function () {\n    setVisible(visible);\n  }, [visible]);\n  return React.createElement(Transition, {\n    in: _visible,\n    mountOnEnter: true,\n    nodeRef: alertRef,\n    onExit: onClose,\n    timeout: 150,\n    unmountOnExit: true\n  }, function (state) {\n    return React.createElement(\"div\", __assign({\n      className: classNames('alert', variant === 'solid' ? \"bg-\".concat(color, \" text-white\") : \"alert-\".concat(color), {\n        'alert-dismissible fade': dismissible,\n        show: state === 'entered'\n      }, className),\n      role: \"alert\"\n    }, rest, {\n      ref: forkedRef\n    }), children, dismissible && React.createElement(CCloseButton, {\n      onClick: function () {\n        return setVisible(false);\n      }\n    }));\n  });\n});\nCAlert.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType.isRequired,\n  dismissible: PropTypes.bool,\n  onClose: PropTypes.func,\n  variant: PropTypes.string,\n  visible: PropTypes.bool\n};\nCAlert.displayName = 'CAlert';\nexport { CAlert };","map":{"version":3,"mappings":";;;;;;;;;IAwCaA,MAAM,GAAGC,UAAU,CAC9B,UACEC,EADF,EAWEC,GAXF,EAWK;AATD,cAAQ,cAAR;AAAA,MACAC,SAAS,eADT;AAAA,MAEAC,aAFA;AAAA,MAEAC,KAAK,GAAGD,4BAASA,EAFjB;AAAA,MAGAE,WAAW,iBAHX;AAAA,MAIAC,OAAO,aAJP;AAAA,MAKAC,eALA;AAAA,MAKAC,OAAO,mBAAG,IAAH,GAAOD,EALd;AAAA,MAMAE,OAAO,aANP;AAAA,MAOGC,IAAI,cART,kFAQS,CAPP;;AAWF,MAAMC,QAAQ,GAAGC,MAAM,CAAiB,IAAjB,CAAvB;AACA,MAAMC,SAAS,GAAGC,YAAY,CAACb,GAAD,EAAMU,QAAN,CAA9B;;AACM,WAAyBI,QAAQ,CAACP,OAAD,CAAjC;AAAA,MAACQ,QAAQ,QAAT;AAAA,MAAWC,UAAU,QAArB;;AAENC,WAAS,CAAC;AACRD,cAAU,CAACT,OAAD,CAAV;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAIA,SACEW,oBAACC,UAAD,EAAW;AACTC,MAAE,EAAEL,QADK;AAETM,gBAAY,EACZ,IAHS;AAGTC,WAAO,EAAEZ,QAHA;AAITa,UAAM,EAAEf,OAJC;AAKTgB,WAAO,EAAE,GALA;AAMTC,iBAAa,EAEZ;AARQ,GAAX,EAQG,UAACC,KAAD,EAAW;AAAA,WACVR;AACEjB,eAAS,EAAE0B,UAAU,CACnB,OADmB,EAEnBtB,OAAO,KAAK,OAAZ,GAAsB,MAAMuB,MAAN,CAAMzB,KAAN,EAAwB,aAAxB,CAAtB,GAAiD,gBAASA,KAAT,CAF9B,EAGnB;AACE,kCAA0BC,WAD5B;AAEEyB,YAAI,EAAEH,KAAK,KAAK;AAFlB,OAHmB,EAOnBzB,SAPmB,CADvB;AAUE6B,UAAI,EAAC;AAVP,OAWMrB,IAXN,EAWU;AACRT,SAAG,EAAEY;AADG,KAXV,GAcGmB,QAdH,EAeG3B,WAAW,IAAIc,oBAACc,YAAD,EAAa;AAACC,aAAO,EAAE;AAAM,yBAAU,CAAC,KAAD,CAAV;AAAiB;AAAjC,KAAb,CAflB,CADU;AAkBX,GA1BH,CADF;AA8BD,CApD6B;AAuDhCpC,MAAM,CAACqC,SAAP,GAAmB;AACjBH,UAAQ,EAAEI,SAAS,CAACC,IADH;AAEjBnC,WAAS,EAAEkC,SAAS,CAACE,MAFJ;AAGjBlC,OAAK,EAAEmC,aAAa,CAACC,UAHJ;AAIjBnC,aAAW,EAAE+B,SAAS,CAACK,IAJN;AAKjBhC,SAAO,EAAE2B,SAAS,CAACM,IALF;AAMjBpC,SAAO,EAAE8B,SAAS,CAACE,MANF;AAOjB9B,SAAO,EAAE4B,SAAS,CAACK;AAPF,CAAnB;AAUA3C,MAAM,CAAC6C,WAAP,GAAqB,QAArB","names":["CAlert","forwardRef","_a","ref","className","_b","color","dismissible","variant","_c","visible","onClose","rest","alertRef","useRef","forkedRef","useForkedRef","useState","_visible","setVisible","useEffect","React","Transition","in","mountOnEnter","nodeRef","onExit","timeout","unmountOnExit","state","classNames","concat","show","role","children","CCloseButton","onClick","propTypes","PropTypes","node","string","colorPropType","isRequired","bool","func","displayName"],"sources":["C:\\wamp64\\www\\Movie\\node_modules\\@coreui\\react\\src\\components\\alert\\CAlert.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes, useEffect, useState, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { Transition } from 'react-transition-group'\n\nimport { CCloseButton } from '../close-button/CCloseButton'\n\nimport { useForkedRef } from '../../hooks'\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CAlertProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUIâ€™s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color: Colors\n  /**\n   * Optionally add a close button to alert and allow it to self dismiss.\n   */\n  dismissible?: boolean\n  /**\n   * Callback fired when the component requests to be closed.\n   */\n  onClose?: () => void\n  /**\n   * Set the alert variant to a solid.\n   */\n  variant?: 'solid' | string\n  /**\n   * Toggle the visibility of component.\n   */\n  visible?: boolean\n}\n\nexport const CAlert = forwardRef<HTMLDivElement, CAlertProps>(\n  (\n    {\n      children,\n      className,\n      color = 'primary',\n      dismissible,\n      variant,\n      visible = true,\n      onClose,\n      ...rest\n    },\n    ref,\n  ) => {\n    const alertRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, alertRef)\n    const [_visible, setVisible] = useState(visible)\n\n    useEffect(() => {\n      setVisible(visible)\n    }, [visible])\n\n    return (\n      <Transition\n        in={_visible}\n        mountOnEnter\n        nodeRef={alertRef}\n        onExit={onClose}\n        timeout={150}\n        unmountOnExit\n      >\n        {(state) => (\n          <div\n            className={classNames(\n              'alert',\n              variant === 'solid' ? `bg-${color} text-white` : `alert-${color}`,\n              {\n                'alert-dismissible fade': dismissible,\n                show: state === 'entered',\n              },\n              className,\n            )}\n            role=\"alert\"\n            {...rest}\n            ref={forkedRef}\n          >\n            {children}\n            {dismissible && <CCloseButton onClick={() => setVisible(false)} />}\n          </div>\n        )}\n      </Transition>\n    )\n  },\n)\n\nCAlert.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType.isRequired,\n  dismissible: PropTypes.bool,\n  onClose: PropTypes.func,\n  variant: PropTypes.string,\n  visible: PropTypes.bool,\n}\n\nCAlert.displayName = 'CAlert'\n"]},"metadata":{},"sourceType":"module"}