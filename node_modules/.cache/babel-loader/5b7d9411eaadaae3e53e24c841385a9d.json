{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CTableHead } from './CTableHead.js';\nimport { CTableHeaderCell } from './CTableHeaderCell.js';\nimport { CTableBody } from './CTableBody.js';\nimport { CTableDataCell } from './CTableDataCell.js';\nimport { CTableRow } from './CTableRow.js';\nimport { CTableFoot } from './CTableFoot.js';\nimport { CTableCaption } from './CTableCaption.js';\nimport { CTableResponsiveWrapper } from './CTableResponsiveWrapper.js';\nimport { colorPropType } from '../../props.js';\nimport { getColumnNames, getColumnLabel } from './utils.js';\nvar CTable = forwardRef(function (_a, ref) {\n  var _b;\n\n  var children = _a.children,\n      align = _a.align,\n      borderColor = _a.borderColor,\n      bordered = _a.bordered,\n      borderless = _a.borderless,\n      caption = _a.caption,\n      captionTop = _a.captionTop,\n      className = _a.className,\n      color = _a.color,\n      columns = _a.columns,\n      footer = _a.footer,\n      hover = _a.hover,\n      items = _a.items,\n      responsive = _a.responsive,\n      small = _a.small,\n      striped = _a.striped,\n      stripedColumns = _a.stripedColumns,\n      tableFootProps = _a.tableFootProps,\n      tableHeadProps = _a.tableHeadProps,\n      rest = __rest(_a, [\"children\", \"align\", \"borderColor\", \"bordered\", \"borderless\", \"caption\", \"captionTop\", \"className\", \"color\", \"columns\", \"footer\", \"hover\", \"items\", \"responsive\", \"small\", \"striped\", \"stripedColumns\", \"tableFootProps\", \"tableHeadProps\"]);\n\n  var columnNames = useMemo(function () {\n    return getColumnNames(columns, items);\n  }, [columns, items]);\n  return React.createElement(CTableResponsiveWrapper, {\n    responsive: responsive\n  }, React.createElement(\"table\", __assign({\n    className: classNames('table', (_b = {}, _b[\"align-\".concat(align)] = align, _b[\"border-\".concat(borderColor)] = borderColor, _b[\"caption-top\"] = captionTop || caption === 'top', _b['table-bordered'] = bordered, _b['table-borderless'] = borderless, _b[\"table-\".concat(color)] = color, _b['table-hover'] = hover, _b['table-sm'] = small, _b['table-striped'] = striped, _b['table-striped-columns'] = stripedColumns, _b), className)\n  }, rest, {\n    ref: ref\n  }), (caption && caption !== 'top' || captionTop) && React.createElement(CTableCaption, null, caption || captionTop), columns && React.createElement(CTableHead, __assign({}, tableHeadProps), React.createElement(CTableRow, null, columns.map(function (column, index) {\n    return React.createElement(CTableHeaderCell, __assign({}, column._props && __assign({}, column._props), column._style && {\n      style: __assign({}, column._style)\n    }, {\n      key: index\n    }), getColumnLabel(column));\n  }))), items && React.createElement(CTableBody, null, items.map(function (item, index) {\n    return React.createElement(CTableRow, __assign({}, item._props && __assign({}, item._props), {\n      key: index\n    }), columnNames && columnNames.map(function (colName, index) {\n      // eslint-disable-next-line unicorn/no-negated-condition\n      return item[colName] !== undefined ? React.createElement(CTableDataCell, __assign({}, item._cellProps && __assign(__assign({}, item._cellProps['all'] && __assign({}, item._cellProps['all'])), item._cellProps[colName] && __assign({}, item._cellProps[colName])), {\n        key: index\n      }), item[colName]) : null;\n    }));\n  })), children, footer && React.createElement(CTableFoot, __assign({}, tableFootProps), React.createElement(CTableRow, null, footer.map(function (item, index) {\n    return React.createElement(CTableDataCell, __assign({}, typeof item === 'object' && item._props && __assign({}, item._props), {\n      key: index\n    }), typeof item === 'object' ? item.label : item);\n  })))));\n});\nCTable.propTypes = {\n  align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n  borderColor: PropTypes.string,\n  bordered: PropTypes.bool,\n  borderless: PropTypes.bool,\n  caption: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf(['top'])]),\n  captionTop: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  columns: PropTypes.array,\n  footer: PropTypes.array,\n  hover: PropTypes.bool,\n  items: PropTypes.array,\n  responsive: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['sm', 'md', 'lg', 'xl', 'xxl'])]),\n  small: PropTypes.bool,\n  striped: PropTypes.bool,\n  stripedColumns: PropTypes.bool,\n  tableFootProps: PropTypes.shape(__assign({}, CTableFoot.propTypes)),\n  tableHeadProps: PropTypes.shape(__assign({}, CTableHead.propTypes))\n};\nCTable.displayName = 'CTable';\nexport { CTable };","map":{"version":3,"mappings":"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","names":["CTable","forwardRef","_a","ref","align","borderColor","bordered","borderless","caption","captionTop","className","color","columns","footer","hover","items","responsive","small","striped","stripedColumns","tableFootProps","tableHeadProps","rest","__rest","columnNames","useMemo","React","CTableResponsiveWrapper","classNames","_b","concat","CTableCaption","CTableHead","__assign","CTableRow","map","column","index","CTableHeaderCell","_props","_style","style","key","getColumnLabel","CTableBody","item","colName","undefined","CTableDataCell","_cellProps","children","CTableFoot","label","propTypes","PropTypes","oneOf","string","bool","oneOfType","node","colorPropType","array","shape","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\table\\CTable.tsx"],"sourcesContent":["import React, { forwardRef, TableHTMLAttributes, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CTableHead, CTableHeadProps } from './CTableHead'\nimport { CTableHeaderCell } from './CTableHeaderCell'\nimport { CTableBody } from './CTableBody'\nimport { CTableDataCell } from './CTableDataCell'\nimport { CTableRow } from './CTableRow'\nimport { CTableFoot, CTableFootProps } from './CTableFoot'\nimport { CTableCaption } from './CTableCaption'\nimport { CTableResponsiveWrapper } from './CTableResponsiveWrapper'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\nimport { getColumnLabel, getColumnNames } from './utils'\nimport type { Column, FooterItem, Item } from './types'\n\nexport interface CTableProps extends Omit<TableHTMLAttributes<HTMLTableElement>, 'align'> {\n  /**\n   * Set the vertical aligment.\n   */\n  align?: 'bottom' | 'middle' | 'top' | string\n  /**\n   * Sets the border color of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  borderColor?: Colors\n  /**\n   * Add borders on all sides of the table and cells.\n   */\n  bordered?: boolean\n  /**\n   * Remove borders on all sides of the table and cells.\n   */\n  borderless?: boolean\n  /**\n   * Put the caption on the top if you set `caption=\"top\"` of the table or set the text of the table caption.\n   */\n  caption?: 'top' | string\n  /**\n   * Set the text of the table caption and the caption on the top of the table.\n   *\n   * @since 4.3.0\n   */\n  captionTop?: string\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Prop for table columns configuration. If prop is not defined, table will display columns based on the first item keys, omitting keys that begins with underscore (e.g. '_props')\n   *\n   * In columns prop each array item represents one column. Item might be specified in two ways:\n   * String: each item define column name equal to item value.\n   * Object: item is object with following keys available as column configuration:\n   * - key (required)(String) - define column name equal to item key.\n   * - label (String) - define visible label of column. If not defined, label will be generated automatically based on column name, by converting kebab-case and snake_case to individual words and capitalization of each word.\n   * - _props (Object) - adds classes to all cels in column, ex. `_props: { scope: 'col', className: 'custom-class' }`,\n   * - _style (Object) - adds styles to the column header (useful for defining widths)\n   *\n   * @since 4.3.0\n   */\n  columns?: (string | Column)[]\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Array of objects or strings, where each element represents one cell in the table footer.\n   *\n   * Example items:\n   * `['FooterCell', 'FooterCell', 'FooterCell']`\n   * or\n   * `[{ label: 'FooterCell', _props: { color: 'success' }, ...]`\n   *\n   * @since 4.3.0\n   */\n  footer?: (FooterItem | string)[]\n  /**\n   * Enable a hover state on table rows within a `<CTableBody>`.\n   */\n  hover?: boolean\n  /**\n   * Array of objects, where each object represents one item - row in table. Additionally, you can add style classes to each row by passing them by '_props' key and to single cell by '_cellProps'.\n   *\n   * Example item:\n   * `{ name: 'John' , age: 12, _props: { color: 'success' }, _cellProps: { age: { className: 'fw-bold'}}}`\n   *\n   * @since 4.3.0\n   */\n  items?: Item[]\n  /**\n   * Make any table responsive across all viewports or pick a maximum breakpoint with which to have a responsive table up to.\n   */\n  responsive?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n  /**\n   * Make table more compact by cutting all cell `padding` in half.\n   */\n  small?: boolean\n  /**\n   * Add zebra-striping to any table row within the `<CTableBody>`.\n   */\n  striped?: boolean\n  /**\n   * Add zebra-striping to any table column.\n   *\n   * @since 4.3.0\n   */\n  stripedColumns?: boolean\n  /**\n   * Properties that will be passed to the table footer component.\n   *\n   * @link https://coreui.io/react/docs/components/table/#ctablefoot\n   * @since 4.3.0\n   */\n  tableFootProps?: CTableFootProps\n  /**\n   * Properties that will be passed to the table head component.\n   *\n   * @link https://coreui.io/react/docs/components/table/#ctablehead\n   * @since 4.3.0\n   */\n  tableHeadProps?: CTableHeadProps\n}\n\nexport const CTable = forwardRef<HTMLTableElement, CTableProps>(\n  (\n    {\n      children,\n      align,\n      borderColor,\n      bordered,\n      borderless,\n      caption,\n      captionTop,\n      className,\n      color,\n      columns,\n      footer,\n      hover,\n      items,\n      responsive,\n      small,\n      striped,\n      stripedColumns,\n      tableFootProps,\n      tableHeadProps,\n      ...rest\n    },\n    ref,\n  ) => {\n    const columnNames = useMemo(() => getColumnNames(columns, items), [columns, items])\n\n    return (\n      <CTableResponsiveWrapper responsive={responsive}>\n        <table\n          className={classNames(\n            'table',\n            {\n              [`align-${align}`]: align,\n              [`border-${borderColor}`]: borderColor,\n              [`caption-top`]: captionTop || caption === 'top',\n              'table-bordered': bordered,\n              'table-borderless': borderless,\n              [`table-${color}`]: color,\n              'table-hover': hover,\n              'table-sm': small,\n              'table-striped': striped,\n              'table-striped-columns': stripedColumns,\n            },\n            className,\n          )}\n          {...rest}\n          ref={ref}\n        >\n          {((caption && caption !== 'top') || captionTop) && (\n            <CTableCaption>{caption || captionTop}</CTableCaption>\n          )}\n          {columns && (\n            <CTableHead {...tableHeadProps}>\n              <CTableRow>\n                {columns.map((column: Column, index: number) => (\n                  <CTableHeaderCell\n                    {...(column._props && { ...column._props })}\n                    {...(column._style && { style: { ...column._style } })}\n                    key={index}\n                  >\n                    {getColumnLabel(column)}\n                  </CTableHeaderCell>\n                ))}\n              </CTableRow>\n            </CTableHead>\n          )}\n          {items && (\n            <CTableBody>\n              {items.map((item: Item, index: number) => (\n                <CTableRow {...(item._props && { ...item._props })} key={index}>\n                  {columnNames &&\n                    columnNames.map((colName: string, index: number) => {\n                      // eslint-disable-next-line unicorn/no-negated-condition\n                      return item[colName] !== undefined ? (\n                        <CTableDataCell\n                          {...(item._cellProps && {\n                            ...(item._cellProps['all'] && { ...item._cellProps['all'] }),\n                            ...(item._cellProps[colName] && { ...item._cellProps[colName] }),\n                          })}\n                          key={index}\n                        >\n                          {item[colName]}\n                        </CTableDataCell>\n                      ) : null\n                    })}\n                </CTableRow>\n              ))}\n            </CTableBody>\n          )}\n          {children}\n          {footer && (\n            <CTableFoot {...tableFootProps}>\n              <CTableRow>\n                {footer.map((item: FooterItem | string, index: number) => (\n                  <CTableDataCell\n                    {...(typeof item === 'object' && item._props && { ...item._props })}\n                    key={index}\n                  >\n                    {typeof item === 'object' ? item.label : item}\n                  </CTableDataCell>\n                ))}\n              </CTableRow>\n            </CTableFoot>\n          )}\n        </table>\n      </CTableResponsiveWrapper>\n    )\n  },\n)\n\nCTable.propTypes = {\n  align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n  borderColor: PropTypes.string,\n  bordered: PropTypes.bool,\n  borderless: PropTypes.bool,\n  caption: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf(['top'])]),\n  captionTop: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  columns: PropTypes.array,\n  footer: PropTypes.array,\n  hover: PropTypes.bool,\n  items: PropTypes.array,\n  responsive: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n  small: PropTypes.bool,\n  striped: PropTypes.bool,\n  stripedColumns: PropTypes.bool,\n  tableFootProps: PropTypes.shape({ ...CTableFoot.propTypes }),\n  tableHeadProps: PropTypes.shape({ ...CTableHead.propTypes }),\n}\n\nCTable.displayName = 'CTable'\n"]},"metadata":{},"sourceType":"module"}