{"ast":null,"code":"import { __awaiter, __generator } from '../node_modules/tslib/tslib.es6.js';\nimport { useState, useCallback } from 'react';\n/**\n * useClipboard Hook\n *\n * Provides functionality to copy text to the clipboard and track the copy status.\n *\n * @returns An object containing the copy function, copy status, and any error encountered.\n */\n\nvar useClipboard = function () {\n  var _a = useState(false),\n      isCopied = _a[0],\n      setIsCopied = _a[1];\n\n  var _b = useState(null),\n      error = _b[0],\n      setError = _b[1];\n  /**\n   * Copies the provided text to the clipboard.\n   *\n   * @param text - The text to be copied to the clipboard.\n   */\n\n\n  var copy = useCallback(function (text) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var _error_1;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(navigator === null || navigator === void 0 ? void 0 : navigator.clipboard)) {\n              setError(new Error('Clipboard API is not available'));\n              return [2\n              /*return*/\n              ];\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , navigator.clipboard.writeText(text)];\n\n          case 2:\n            _a.sent();\n\n            setIsCopied(true);\n            setError(null); // Reset the isCopied state after 2 seconds\n\n            setTimeout(function () {\n              return setIsCopied(false);\n            }, 2000);\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            _error_1 = _a.sent();\n            setError(_error_1);\n            setIsCopied(false);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }, []);\n  return {\n    copy: copy,\n    isCopied: isCopied,\n    error: error\n  };\n};\n\nexport { useClipboard };","map":{"version":3,"mappings":";;AAEA;;;;;;AAMG;;AACU,gBAAY,GAAG;AACpB,WAA0BA,QAAQ,CAAU,KAAV,CAAlC;AAAA,MAACC,QAAQ,QAAT;AAAA,MAAWC,WAAW,QAAtB;;AACA,WAAoBF,QAAQ,CAAe,IAAf,CAA5B;AAAA,MAACG,KAAK,QAAN;AAAA,MAAQC,QAAQ,QAAhB;AAEN;;;;AAIG;;;AACH,MAAMC,IAAI,GAAGC,WAAW,CAAC,UAAOC,IAAP,EAAmB;AAAA;;;;;;AAC1C,gBAAI,EAACC,SAAS,KAAT,iBAAS,KAAT,2BAAS,CAAEC,SAAZ,CAAJ,EAA2B;AACzBL,sBAAQ,CAAC,IAAIM,KAAJ,CAAU,gCAAV,CAAD,CAAR;AACA,qBAAM;AAAA;AAAA,eAAN;;;;;;;;AAIA,mBAAM;AAAA;AAAA,uBAAS,CAACD,SAAV,CAAoBE,SAApB,CAA8BJ,IAA9B,EAAN;;;AAAAK;;AACAV,uBAAW,CAAC,IAAD,CAAX;AACAE,oBAAQ,CAAC,IAAD,CAAR;;AAEAS,sBAAU,CAAC;AAAM,gCAAW,CAAC,KAAD,CAAX;AAAkB,aAAzB,EAA2B,IAA3B,CAAV;;;;;;;AAEAT,oBAAQ,CAACU,QAAD,CAAR;AACAZ,uBAAW,CAAC,KAAD,CAAX;;;;;;;;;;;KAdwC;AAgB3C,GAhBuB,EAgBrB,EAhBqB,CAAxB;AAkBA,SAAO;AAAEG,QAAI,MAAN;AAAQJ,YAAQ,UAAhB;AAAkBE,SAAK;AAAvB,GAAP;AACF,CA5Ba","names":["useState","isCopied","setIsCopied","error","setError","copy","useCallback","text","navigator","clipboard","Error","writeText","_a","setTimeout","_error_1"],"sources":["C:\\wamp64\\www\\Movie\\node_modules\\@coreui\\react\\src\\hooks\\useClipboard.ts"],"sourcesContent":["import { useState, useCallback } from 'react'\n\n/**\n * useClipboard Hook\n *\n * Provides functionality to copy text to the clipboard and track the copy status.\n *\n * @returns An object containing the copy function, copy status, and any error encountered.\n */\nexport const useClipboard = () => {\n  const [isCopied, setIsCopied] = useState<boolean>(false)\n  const [error, setError] = useState<Error | null>(null)\n\n  /**\n   * Copies the provided text to the clipboard.\n   *\n   * @param text - The text to be copied to the clipboard.\n   */\n  const copy = useCallback(async (text: string) => {\n    if (!navigator?.clipboard) {\n      setError(new Error('Clipboard API is not available'))\n      return\n    }\n\n    try {\n      await navigator.clipboard.writeText(text)\n      setIsCopied(true)\n      setError(null)\n      // Reset the isCopied state after 2 seconds\n      setTimeout(() => setIsCopied(false), 2000)\n    } catch (_error) {\n      setError(_error as Error)\n      setIsCopied(false)\n    }\n  }, [])\n\n  return { copy, isCopied, error }\n}\n"]},"metadata":{},"sourceType":"module"}