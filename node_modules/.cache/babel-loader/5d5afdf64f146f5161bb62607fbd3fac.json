{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CFormLabel } from './CFormLabel.js';\nvar CFormSwitch = forwardRef(function (_a, ref) {\n  var _b;\n\n  var className = _a.className,\n      id = _a.id,\n      invalid = _a.invalid,\n      label = _a.label,\n      reverse = _a.reverse,\n      size = _a.size,\n      _c = _a.type,\n      type = _c === void 0 ? 'checkbox' : _c,\n      valid = _a.valid,\n      rest = __rest(_a, [\"className\", \"id\", \"invalid\", \"label\", \"reverse\", \"size\", \"type\", \"valid\"]);\n\n  return React.createElement(\"div\", {\n    className: classNames('form-check form-switch', (_b = {\n      'form-check-reverse': reverse\n    }, _b[\"form-switch-\".concat(size)] = size, _b['is-invalid'] = invalid, _b['is-valid'] = valid, _b), className)\n  }, React.createElement(\"input\", __assign({\n    type: type,\n    className: classNames('form-check-input', {\n      'is-invalid': invalid,\n      'is-valid': valid\n    }),\n    id: id\n  }, rest, {\n    ref: ref\n  })), label && React.createElement(CFormLabel, __assign({\n    customClassName: \"form-check-label\"\n  }, id && {\n    htmlFor: id\n  }), label));\n});\nCFormSwitch.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  invalid: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  reverse: PropTypes.bool,\n  size: PropTypes.oneOf(['lg', 'xl']),\n  type: PropTypes.oneOf(['checkbox', 'radio']),\n  valid: PropTypes.bool\n};\nCFormSwitch.displayName = 'CFormSwitch';\nexport { CFormSwitch };","map":{"version":3,"mappings":";;;;;IA2CaA,WAAW,GAAGC,UAAU,CACnC,UAACC,EAAD,EAAsFC,GAAtF,EAAyF;;;AAAtF,eAAS,eAAT;AAAA,MAAWC,EAAE,QAAb;AAAA,MAAeC,OAAO,aAAtB;AAAA,MAAwBC,KAAK,WAA7B;AAAA,MAA+BC,OAAO,aAAtC;AAAA,MAAwCC,IAAI,UAA5C;AAAA,MAA8CC,YAA9C;AAAA,MAA8CC,IAAI,mBAAG,UAAH,GAAaD,EAA/D;AAAA,MAAiEE,KAAK,WAAtE;AAAA,MAA2EC,IAAI,cAAjF,2EAAiF,CAA/E;;AACD,SACEC,KACE,cADF,CACE,KADF,EACE;AAAAC,aAAS,EAAEC,UAAU,CACnB,wBADmB,GACKC;AAEtB,4BAAsBT;AAFA,OAGtBS,GAAC,eAAeC,MAAf,CAAeT,IAAf,CAAD,IAAyBA,IAHH,EAItBQ,mBAAcX,OAJQ,EAKtBW,iBAAYL,KALU,EAOxBK,EARmB,GAQnBF,SARmB;AAArB,GADF,EAYED,KACE,cADF,CACE,OADF,EACEK;AAAAR,QAAI,EAAEA,IAAN;AACAI,aAAS,EAAEC,UAAU,CAAC,kBAAD,EAAqB;AACxC,oBAAcV,OAD0B;AAExC,kBAAYM;AAF4B,KAArB,CADrB;AAKAP,MAAE,EAAEA;AALJ,KAMIQ,IANJ,EAOA;AAAAT,OAAG,EAAEA;AAAL,GAPA,CADF,CAZF,EAsBGG,KAAK,IACJO,oBAACM,UAAD,EAAWD;AAACE,mBAAe,EAAC;AAAjB,KAAyChB,EAAE,IAAI;AAAEiB,WAAO,EAAEjB;AAAX,GAA/C,CAAX,EACGE,KADH,CAvBJ,CADF;AA8BD,CAhCkC;AAmCrCN,WAAW,CAACsB,SAAZ,GAAwB;AACtBR,WAAS,EAAES,SAAS,CAACC,MADC;AAEtBpB,IAAE,EAAEmB,SAAS,CAACC,MAFQ;AAGtBnB,SAAO,EAAEkB,SAAS,CAACE,IAHG;AAItBnB,OAAK,EAAEiB,SAAS,CAACG,SAAV,CAAoB,CAACH,SAAS,CAACC,MAAX,EAAmBD,SAAS,CAACI,IAA7B,CAApB,CAJe;AAKtBpB,SAAO,EAAEgB,SAAS,CAACE,IALG;AAMtBjB,MAAI,EAAEe,SAAS,CAACK,KAAV,CAAgB,CAAC,IAAD,EAAO,IAAP,CAAhB,CANgB;AAOtBlB,MAAI,EAAEa,SAAS,CAACK,KAAV,CAAgB,CAAC,UAAD,EAAa,OAAb,CAAhB,CAPgB;AAQtBjB,OAAK,EAAEY,SAAS,CAACE;AARK,CAAxB;AAWAzB,WAAW,CAAC6B,WAAZ,GAA0B,aAA1B","names":["CFormSwitch","forwardRef","_a","ref","id","invalid","label","reverse","size","_c","type","valid","rest","React","className","classNames","_b","concat","__assign","CFormLabel","customClassName","htmlFor","propTypes","PropTypes","string","bool","oneOfType","node","oneOf","displayName"],"sources":["C:\\wamp64\\www\\Movie\\node_modules\\@coreui\\react\\src\\components\\form\\CFormSwitch.tsx"],"sourcesContent":["import React, { forwardRef, InputHTMLAttributes, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormLabel } from './CFormLabel'\n\nexport interface CFormSwitchProps extends Omit<InputHTMLAttributes<HTMLInputElement>, 'size'> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * The id global attribute defines an identifier (ID) that must be unique in the whole document.\n   */\n  id?: string\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * The element represents a caption for a component.\n   */\n  label?: string | ReactNode\n  /**\n   * Put switch on the opposite side.\n   *\n   * @sinve 4.7.0\n   */\n  reverse?: boolean\n  /**\n   * Size the component large or extra large. Works only with `switch`.\n   */\n  size?: 'lg' | 'xl'\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'checkbox' | 'radio'\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormSwitch = forwardRef<HTMLInputElement, CFormSwitchProps>(\n  ({ className, id, invalid, label, reverse, size, type = 'checkbox', valid, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'form-check form-switch',\n          {\n            'form-check-reverse': reverse,\n            [`form-switch-${size}`]: size,\n            'is-invalid': invalid,\n            'is-valid': valid,\n          },\n          className,\n        )}\n      >\n        <input\n          type={type}\n          className={classNames('form-check-input', {\n            'is-invalid': invalid,\n            'is-valid': valid,\n          })}\n          id={id}\n          {...rest}\n          ref={ref}\n        />\n        {label && (\n          <CFormLabel customClassName=\"form-check-label\" {...(id && { htmlFor: id })}>\n            {label}\n          </CFormLabel>\n        )}\n      </div>\n    )\n  },\n)\n\nCFormSwitch.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  invalid: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  reverse: PropTypes.bool,\n  size: PropTypes.oneOf(['lg', 'xl']),\n  type: PropTypes.oneOf(['checkbox', 'radio']),\n  valid: PropTypes.bool,\n}\n\nCFormSwitch.displayName = 'CFormSwitch'\n"]},"metadata":{},"sourceType":"module"}