{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nvar CLink = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      active = _a.active,\n      _b = _a.as,\n      Component = _b === void 0 ? 'a' : _b,\n      className = _a.className,\n      disabled = _a.disabled,\n      rest = __rest(_a, [\"children\", \"active\", \"as\", \"className\", \"disabled\"]);\n\n  return React.createElement(Component // TODO: remove duplicated classes ex. `active active` in `<CListGroupItem>`\n  , __assign({\n    // TODO: remove duplicated classes ex. `active active` in `<CListGroupItem>`\n    className: classNames(className, {\n      active: active,\n      disabled: disabled\n    })\n  }, active && {\n    'aria-current': 'page'\n  }, Component === 'a' && disabled && {\n    'aria-disabled': true,\n    tabIndex: -1\n  }, (Component === 'a' || Component === 'button') && {\n    onClick: function (event) {\n      event.preventDefault;\n      !disabled && rest.onClick && rest.onClick(event);\n    }\n  }, {\n    disabled: disabled\n  }, rest, {\n    ref: ref\n  }), children);\n});\nCLink.propTypes = {\n  active: PropTypes.bool,\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  disabled: PropTypes.bool\n};\nCLink.displayName = 'CLink';\nexport { CLink };","map":{"version":3,"mappings":";;;;IA8BaA,KAAK,GAAuDC,UAAU,CAGjF,UAACC,EAAD,EAA0EC,GAA1E,EAA6E;AAA1E,cAAQ,cAAR;AAAA,MAAUC,MAAM,YAAhB;AAAA,MAAkBC,UAAlB;AAAA,MAAsBC,SAAS,GAAGD,sBAAGA,EAArC;AAAA,MAAuCE,SAAS,eAAhD;AAAA,MAAkDC,QAAQ,cAA1D;AAAA,MAA+DC,IAAI,GAArEC,iEAAE;;AACH,SACEC,oBAACL,SAAD;AAAA;;AAEEC,aAAS,EAAEK,UAAU,CAACL,SAAD,EAAY;AAAEH,YAAM,QAAR;AAAUI,cAAQ;AAAlB,KAAZ;KAChBJ,MAAM,IAAI;AAAE,oBAAgB;AAAlB,KACVE,SAAS,KAAK,GAAd,IAAqBE,QAArB,IAAiC;AAAE,qBAAiB,IAAnB;AAAyBK,YAAQ,EAAE;AAAnC,KACjC,CAACP,SAAS,KAAK,GAAd,IAAqBA,SAAS,KAAK,QAApC,KAAiD;AACpDQ,WAAO,EAAE,UAACC,KAAD,EAAyD;AAChEA,WAAK,CAACC,cAAN;AACA,OAACR,QAAD,IAAaC,IAAI,CAACK,OAAlB,IAA6BL,IAAI,CAACK,OAAL,CAAaC,KAAb,CAA7B;AACD;AAJmD,KAMtD;AAAAP,YAAQ,EAAEA;AAAV,KACIC,MAAI;AACRN,OAAG,EAAEA;AADG,IAZV,EAeGc,QAfH,CADF;AAmBD,CAvBkF;AAyBnFjB,KAAK,CAACkB,SAAN,GAAkB;AAChBd,QAAM,EAAEe,SAAS,CAACC,IADF;AAEhBC,IAAE,EAAEF,SAAS,CAACG,WAFE;AAGhBL,UAAQ,EAAEE,SAAS,CAACI,IAHJ;AAIhBhB,WAAS,EAAEY,SAAS,CAACK,MAJL;AAKhBhB,UAAQ,EAAEW,SAAS,CAACC;AALJ,CAAlB;AAQApB,KAAK,CAACyB,WAAN,GAAoB,OAApB","names":["CLink","forwardRef","_a","ref","active","_b","Component","className","disabled","rest","__rest","React","classNames","tabIndex","onClick","event","preventDefault","children","propTypes","PropTypes","bool","as","elementType","node","string","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\link\\CLink.tsx"],"sourcesContent":["import React, { AllHTMLAttributes, ElementType, forwardRef, MouseEvent } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CLinkProps\n  extends Omit<AllHTMLAttributes<HTMLButtonElement | HTMLAnchorElement>, 'as'> {\n  /**\n   * Toggle the active state for the component.\n   */\n  active?: boolean\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * The href attribute specifies the URL of the page the link goes to.\n   */\n  href?: string\n}\n\nexport const CLink: PolymorphicRefForwardingComponent<'a', CLinkProps> = forwardRef<\n  HTMLButtonElement | HTMLAnchorElement,\n  CLinkProps\n>(({ children, active, as: Component = 'a', className, disabled, ...rest }, ref) => {\n  return (\n    <Component\n      // TODO: remove duplicated classes ex. `active active` in `<CListGroupItem>`\n      className={classNames(className, { active, disabled })}\n      {...(active && { 'aria-current': 'page' })}\n      {...(Component === 'a' && disabled && { 'aria-disabled': true, tabIndex: -1 })}\n      {...((Component === 'a' || Component === 'button') && {\n        onClick: (event: MouseEvent<HTMLButtonElement | HTMLAnchorElement>) => {\n          event.preventDefault\n          !disabled && rest.onClick && rest.onClick(event)\n        },\n      })}\n      disabled={disabled}\n      {...rest}\n      ref={ref}\n    >\n      {children}\n    </Component>\n  )\n})\n\nCLink.propTypes = {\n  active: PropTypes.bool,\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n}\n\nCLink.displayName = 'CLink'\n"]},"metadata":{},"sourceType":"module"}