{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CFormControlWrapper } from './CFormControlWrapper.js';\nvar CFormTextarea = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      className = _a.className,\n      feedback = _a.feedback,\n      feedbackInvalid = _a.feedbackInvalid,\n      feedbackValid = _a.feedbackValid,\n      floatingClassName = _a.floatingClassName,\n      floatingLabel = _a.floatingLabel,\n      id = _a.id,\n      invalid = _a.invalid,\n      label = _a.label,\n      plainText = _a.plainText,\n      text = _a.text,\n      tooltipFeedback = _a.tooltipFeedback,\n      valid = _a.valid,\n      rest = __rest(_a, [\"children\", \"className\", \"feedback\", \"feedbackInvalid\", \"feedbackValid\", \"floatingClassName\", \"floatingLabel\", \"id\", \"invalid\", \"label\", \"plainText\", \"text\", \"tooltipFeedback\", \"valid\"]);\n\n  return React.createElement(CFormControlWrapper, {\n    describedby: rest['aria-describedby'],\n    feedback: feedback,\n    feedbackInvalid: feedbackInvalid,\n    feedbackValid: feedbackValid,\n    floatingClassName: floatingClassName,\n    floatingLabel: floatingLabel,\n    id: id,\n    invalid: invalid,\n    label: label,\n    text: text,\n    tooltipFeedback: tooltipFeedback,\n    valid: valid\n  }, React.createElement(\"textarea\", __assign({\n    className: classNames(plainText ? 'form-control-plaintext' : 'form-control', {\n      'is-invalid': invalid,\n      'is-valid': valid\n    }, className),\n    id: id\n  }, rest, {\n    ref: ref\n  }), children));\n});\nCFormTextarea.propTypes = __assign({\n  className: PropTypes.string,\n  id: PropTypes.string,\n  plainText: PropTypes.bool\n}, CFormControlWrapper.propTypes);\nCFormTextarea.displayName = 'CFormTextarea';\nexport { CFormTextarea };","map":{"version":3,"mappings":";;;;;IAqCaA,aAAa,GAAGC,UAAU,CACrC,UACEC,EADF,EAkBEC,GAlBF,EAkBK;AAhBD,cAAQ,cAAR;AAAA,MACAC,SAAS,eADT;AAAA,MAEAC,QAAQ,cAFR;AAAA,MAGAC,eAAe,qBAHf;AAAA,MAIAC,aAAa,mBAJb;AAAA,MAKAC,iBAAiB,uBALjB;AAAA,MAMAC,aAAa,mBANb;AAAA,MAOAC,EAAE,QAPF;AAAA,MAQAC,OAAO,aARP;AAAA,MASAC,KAAK,WATL;AAAA,MAUAC,SAAS,eAVT;AAAA,MAWAC,IAAI,UAXJ;AAAA,MAYAC,eAAe,qBAZf;AAAA,MAaAC,KAAK,WAbL;AAAA,MAcGC,IAAI,GAfTC,sMACE;;AAkBF,SACEC,KAAC,cAAD,CAACC,mBAAD,EACE;AAAAC,eAAW,EAAEJ,IAAI,CAAC,kBAAD,CAAjB;AACAZ,YAAQ,EAAEA,QADV;AAEAC,mBAAe,EAAEA,eAFjB;AAGAC,iBAAa,EAAEA,aAHf;AAIAC,qBAAiB,EAAEA,iBAJnB;AAKAC,iBAAa,EAAEA,aALf;AAMAC,MAAE,EAAEA,EANJ;AAOAC,WAAO,EAAEA,OAPT;AAQAC,SAAK,EAAEA,KARP;AASAE,QAAI,EAAEA,IATN;AAUAC,mBAAe,EAAEA,eAVjB;AAWAC,SAAK,EAAEA;AAXP,GADF,EAcEG;AACEf,aAAS,EAAEkB,UAAU,CACnBT,SAAS,GAAG,wBAAH,GAA8B,cADpB,EAEnB;AACE,oBAAcF,OADhB;AAEE,kBAAYK;AAFd,KAFmB,EAMnBZ,SANmB,CADvB;AASEM,MAAE,EAAEA;AATN,KAUMO,IAVN,EAWE;AAAAd,OAAG,EAAEA;AAAL,GAXF,GAaGoB,QAbH,CAdF,CADF;AAgCD,CArDoC;AAwDvCvB,aAAa,CAACwB,SAAd,GAAuBC;AACrBrB,WAAS,EAAEsB,SAAS,CAACC,MADA;AAErBjB,IAAE,EAAEgB,SAAS,CAACC,MAFO;AAGrBd,WAAS,EAAEa,SAAS,CAACE;AAHA,GAIlBR,mBAAmB,CAACI,SAJF,CAAvB;AAOAxB,aAAa,CAAC6B,WAAd,GAA4B,eAA5B","names":["CFormTextarea","forwardRef","_a","ref","className","feedback","feedbackInvalid","feedbackValid","floatingClassName","floatingLabel","id","invalid","label","plainText","text","tooltipFeedback","valid","rest","__rest","React","CFormControlWrapper","describedby","classNames","children","propTypes","__assign","PropTypes","string","bool","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\form\\CFormTextarea.tsx"],"sourcesContent":["import React, { ChangeEventHandler, forwardRef, TextareaHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from './CFormControlWrapper'\n\nexport interface CFormTextareaProps\n  extends CFormControlWrapperProps,\n    TextareaHTMLAttributes<HTMLTextAreaElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  onChange?: ChangeEventHandler<HTMLTextAreaElement>\n  /**\n   * Render the component styled as plain text. Removes the default form field styling and preserve the correct margin and padding. Recommend to use only along side `readonly`.\n   */\n  plainText?: boolean\n  /**\n   * Toggle the readonly state for the component.\n   */\n  readOnly?: boolean\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   * */\n  value?: string | string[] | number\n}\n\nexport const CFormTextarea = forwardRef<HTMLTextAreaElement, CFormTextareaProps>(\n  (\n    {\n      children,\n      className,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      id,\n      invalid,\n      label,\n      plainText,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={floatingClassName}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        <textarea\n          className={classNames(\n            plainText ? 'form-control-plaintext' : 'form-control',\n            {\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className,\n          )}\n          id={id}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </textarea>\n      </CFormControlWrapper>\n    )\n  },\n)\n\nCFormTextarea.propTypes = {\n  className: PropTypes.string,\n  id: PropTypes.string,\n  plainText: PropTypes.bool,\n  ...CFormControlWrapper.propTypes,\n}\n\nCFormTextarea.displayName = 'CFormTextarea'\n"]},"metadata":{},"sourceType":"module"}