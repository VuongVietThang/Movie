{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nvar getStoredTheme = function (localStorageItemName) {\n  return typeof window !== 'undefined' && localStorage.getItem(localStorageItemName);\n};\n\nvar setStoredTheme = function (localStorageItemName, colorMode) {\n  return localStorage.setItem(localStorageItemName, colorMode);\n};\n\nvar getPreferredColorScheme = function (localStorageItemName) {\n  if (typeof window === 'undefined') {\n    return 'light';\n  }\n\n  var storedTheme = getStoredTheme(localStorageItemName);\n\n  if (storedTheme) {\n    return storedTheme;\n  }\n\n  return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n};\n\nvar setTheme = function (colorMode) {\n  document.documentElement.dataset.coreuiTheme = colorMode === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : colorMode;\n  var event = new Event('ColorSchemeChange');\n  document.documentElement.dispatchEvent(event);\n};\n\nvar useColorModes = function (localStorageItemName) {\n  if (localStorageItemName === void 0) {\n    localStorageItemName = 'coreui-react-color-scheme';\n  }\n\n  var _a = useState(getPreferredColorScheme(localStorageItemName)),\n      colorMode = _a[0],\n      setColorMode = _a[1];\n\n  useEffect(function () {\n    if (colorMode) {\n      setStoredTheme(localStorageItemName, colorMode);\n      setTheme(colorMode);\n    }\n  }, [colorMode]);\n  useEffect(function () {\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', function () {\n      var storedTheme = getStoredTheme(localStorageItemName);\n\n      if (storedTheme !== 'light' && storedTheme !== 'dark' && colorMode) {\n        setTheme(colorMode);\n      }\n    });\n  });\n  return {\n    colorMode: colorMode,\n    isColorModeSet: function () {\n      return Boolean(getStoredTheme(localStorageItemName));\n    },\n    setColorMode: setColorMode\n  };\n};\n\nexport { useColorModes };","map":{"version":3,"mappings":";;AAQA,IAAMA,cAAc,GAAG,UAACC,oBAAD,EAA6B;AAClD,gBAAOC,MAAP,KAAkB,WAAlB,IAAiCC,YAAY,CAACC,OAAb,CAAqBH,oBAArB,CAAjC;AAA2E,CAD7E;;AAGA,IAAMI,cAAc,GAAG,UAACJ,oBAAD,EAA+BK,SAA/B,EAAgD;AACrE,qBAAY,CAACC,OAAb,CAAqBN,oBAArB,EAA2CK,SAA3C;AAAqD,CADvD;;AAGA,IAAME,uBAAuB,GAAG,UAACP,oBAAD,EAA6B;AAC3D,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAO,OAAP;;;AAGF,MAAMO,WAAW,GAAGT,cAAc,CAACC,oBAAD,CAAlC;;AAEA,MAAIQ,WAAJ,EAAiB;AACf,WAAOA,WAAP;;;AAGF,SAAOP,MAAM,CAACQ,UAAP,CAAkB,8BAAlB,EAAkDC,OAAlD,GAA4D,MAA5D,GAAqE,OAA5E;AACD,CAZD;;AAcA,IAAMC,QAAQ,GAAG,UAACN,SAAD,EAAkB;AACjCO,UAAQ,CAACC,eAAT,CAAyBC,OAAzB,CAAiCC,WAAjC,GACEV,SAAS,KAAK,MAAd,IAAwBJ,MAAM,CAACQ,UAAP,CAAkB,8BAAlB,EAAkDC,OAA1E,GACI,MADJ,GAEIL,SAHN;AAKA,MAAMW,KAAK,GAAG,IAAIC,KAAJ,CAAU,mBAAV,CAAd;AACAL,UAAQ,CAACC,eAAT,CAAyBK,aAAzB,CAAuCF,KAAvC;AACD,CARD;;AAUO,IAAMG,aAAa,GAAG,UAC3BnB,oBAD2B,EACuB;AAAlD;AAAAA,wBAAkD,8BAAlD;AAAkD;;AAE5C,QAA4B,WAAQ,CACxCO,uBAAuB,CAACP,oBAAD,CADiB,CAApC;AAAA,MAACK,SAAS,QAAV;AAAA,MAAYe,YAAY,QAAxB;;AAINC,WAAS,CAAC;AACR,QAAIhB,SAAJ,EAAe;AACbD,oBAAc,CAACJ,oBAAD,EAAuBK,SAAvB,CAAd;AACAM,cAAQ,CAACN,SAAD,CAAR;;AAEH,GALQ,EAKN,CAACA,SAAD,CALM,CAAT;AAOAgB,WAAS,CAAC;AACRpB,UAAM,CAACQ,UAAP,CAAkB,8BAAlB,EAAkDa,gBAAlD,CAAmE,QAAnE,EAA6E;AAC3E,UAAMd,WAAW,GAAGT,cAAc,CAACC,oBAAD,CAAlC;;AACA,UAAIQ,WAAW,KAAK,OAAhB,IAA2BA,WAAW,KAAK,MAA3C,IAAqDH,SAAzD,EAAoE;AAClEM,gBAAQ,CAACN,SAAD,CAAR;;AAEH,KALD;AAMD,GAPQ,CAAT;AASA,SAAO;AACLA,aAAS,WADJ;AAELkB,kBAAc,EAAE,YAAM;AAAA,oBAAO,CAACxB,cAAc,CAACC,oBAAD,CAAf,CAAP;AAA6C,KAF9D;AAGLoB,gBAAY;AAHP,GAAP;AAKF,CA5BO","names":["getStoredTheme","localStorageItemName","window","localStorage","getItem","setStoredTheme","colorMode","setItem","getPreferredColorScheme","storedTheme","matchMedia","matches","setTheme","document","documentElement","dataset","coreuiTheme","event","Event","dispatchEvent","useColorModes","setColorMode","useEffect","addEventListener","isColorModeSet"],"sources":["C:\\wamp64\\www\\Movie\\node_modules\\@coreui\\react\\src\\hooks\\useColorModes.ts"],"sourcesContent":["import { Dispatch, SetStateAction, useEffect, useState } from 'react'\n\ninterface UseColorModesOutput {\n  colorMode: string | undefined\n  isColorModeSet: () => boolean\n  setColorMode: Dispatch<SetStateAction<string>>\n}\n\nconst getStoredTheme = (localStorageItemName: string) =>\n  typeof window !== 'undefined' && localStorage.getItem(localStorageItemName)\n\nconst setStoredTheme = (localStorageItemName: string, colorMode: string) =>\n  localStorage.setItem(localStorageItemName, colorMode)\n\nconst getPreferredColorScheme = (localStorageItemName: string) => {\n  if (typeof window === 'undefined') {\n    return 'light'\n  }\n\n  const storedTheme = getStoredTheme(localStorageItemName)\n\n  if (storedTheme) {\n    return storedTheme\n  }\n\n  return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'\n}\n\nconst setTheme = (colorMode: string) => {\n  document.documentElement.dataset.coreuiTheme =\n    colorMode === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches\n      ? 'dark'\n      : colorMode\n\n  const event = new Event('ColorSchemeChange')\n  document.documentElement.dispatchEvent(event)\n}\n\nexport const useColorModes = (\n  localStorageItemName = 'coreui-react-color-scheme',\n): UseColorModesOutput => {\n  const [colorMode, setColorMode] = useState<string | undefined>(\n    getPreferredColorScheme(localStorageItemName),\n  )\n\n  useEffect(() => {\n    if (colorMode) {\n      setStoredTheme(localStorageItemName, colorMode)\n      setTheme(colorMode)\n    }\n  }, [colorMode])\n\n  useEffect(() => {\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {\n      const storedTheme = getStoredTheme(localStorageItemName)\n      if (storedTheme !== 'light' && storedTheme !== 'dark' && colorMode) {\n        setTheme(colorMode)\n      }\n    })\n  })\n\n  return {\n    colorMode,\n    isColorModeSet: () => Boolean(getStoredTheme(localStorageItemName)),\n    setColorMode,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}