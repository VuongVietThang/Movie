{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nvar CAlertHeading = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      _b = _a.as,\n      Component = _b === void 0 ? 'h4' : _b,\n      className = _a.className,\n      rest = __rest(_a, [\"children\", \"as\", \"className\"]);\n\n  return React.createElement(Component, __assign({\n    className: classNames('alert-heading', className)\n  }, rest, {\n    ref: ref\n  }), children);\n});\nCAlertHeading.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string\n};\nCAlertHeading.displayName = 'CAlertHeading';\nexport { CAlertHeading };","map":{"version":3,"mappings":";;;;IAiBaA,aAAa,GACxBC,UAAU,CACR,UAACC,EAAD,EAAyDC,GAAzD,EAA4D;AAAzD,cAAQ,cAAR;AAAA,MAAUC,EAAoB,QAA9B;AAAA,MAAcC,SAAS,GAAGD,uBAAIA,EAA9B;AAAA,MAAgCE,SAAS,eAAzC;AAAA,MAA8CC,IAAI,cAApD,+BAAoD,CAAlD;;AACD,SACEC,oBAACH,SAAD,EAAUI;AAACH,aAAS,EAAEI,UAAU,CAAC,eAAD,EAAkBJ,SAAlB;AAAtB,KAAwDC,IAAxD,EAA4D;AAAEJ,OAAG,EAAEA;AAAP,GAA5D,CAAV,EACGQ,QADH,CADF;AAKD,CAPO;AAUZX,aAAa,CAACY,SAAd,GAA0B;AACxBC,IAAE,EAAEC,SAAS,CAACC,WADU;AAExBJ,UAAQ,EAAEG,SAAS,CAACE,IAFI;AAGxBV,WAAS,EAAEQ,SAAS,CAACG;AAHG,CAA1B;AAMAjB,aAAa,CAACkB,WAAd,GAA4B,eAA5B","names":["CAlertHeading","forwardRef","_a","ref","_b","Component","className","rest","React","__assign","classNames","children","propTypes","as","PropTypes","elementType","node","string","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react\\src\\components\\alert\\CAlertHeading.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CAlertHeadingProps extends HTMLAttributes<HTMLHeadingElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CAlertHeading: PolymorphicRefForwardingComponent<'h4', CAlertHeadingProps> =\n  forwardRef<HTMLHeadingElement, CAlertHeadingProps>(\n    ({ children, as: Component = 'h4', className, ...rest }, ref) => {\n      return (\n        <Component className={classNames('alert-heading', className)} {...rest} ref={ref}>\n          {children}\n        </Component>\n      )\n    },\n  )\n\nCAlertHeading.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCAlertHeading.displayName = 'CAlertHeading'\n"]},"metadata":{},"sourceType":"module"}