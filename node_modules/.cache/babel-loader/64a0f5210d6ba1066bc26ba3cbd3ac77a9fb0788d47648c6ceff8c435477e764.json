{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CSidebarNavContext } from './CSidebarNavContext.js';\nvar isNavElement = function (child) {\n  if (!React.isValidElement(child)) return false;\n  var type = child.type;\n  return type.displayName === 'CNavGroup' || type.displayName === 'CNavLink' || type.displayName === 'CNavItem';\n};\nvar recursiveClone = function (children, id, updateId) {\n  return React.Children.map(children, function (child, index) {\n    if (!isNavElement(child)) {\n      return child;\n    }\n    var _id = id ? updateId ? \"\".concat(id, \".\").concat(index) : \"\".concat(id) : \"\".concat(index);\n    if (child.props.children) {\n      var type = child.type;\n      var shouldUpdateId = type.displayName !== 'CNavItem';\n      return React.cloneElement(child, {\n        idx: _id,\n        children: recursiveClone(child.props.children, _id, shouldUpdateId)\n      });\n    }\n    return React.cloneElement(child, {\n      idx: _id\n    });\n  });\n};\nvar CSidebarNav = forwardRef(function (_a, ref) {\n  var children = _a.children,\n    _b = _a.as,\n    Component = _b === void 0 ? 'ul' : _b,\n    className = _a.className,\n    rest = __rest(_a, [\"children\", \"as\", \"className\"]);\n  var _c = useState(''),\n    visibleGroup = _c[0],\n    setVisibleGroup = _c[1];\n  var CNavContextValues = {\n    visibleGroup: visibleGroup,\n    setVisibleGroup: setVisibleGroup\n  };\n  return React.createElement(CSidebarNavContext.Provider, {\n    value: CNavContextValues\n  }, React.createElement(Component, __assign({\n    className: classNames('sidebar-nav', className),\n    ref: ref\n  }, rest), recursiveClone(children)));\n});\nCSidebarNav.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string\n};\nCSidebarNav.displayName = 'CSidebarNav';\nexport { CSidebarNav };","map":{"version":3,"names":["isNavElement","child","React","isValidElement","type","displayName","recursiveClone","children","id","updateId","Children","map","index","_id","concat","props","shouldUpdateId","cloneElement","idx","CSidebarNav","forwardRef","_a","ref","_b","as","Component","className","rest","__rest","_c","useState","visibleGroup","setVisibleGroup","CNavContextValues","createElement","CSidebarNavContext","Provider","value","__assign","classNames","propTypes","PropTypes","elementType","node","string"],"sources":["/Users/thaiduy/Movie/node_modules/@coreui/react/src/components/sidebar/CSidebarNav.tsx"],"sourcesContent":["import React, {\n  ElementType,\n  forwardRef,\n  HTMLAttributes,\n  ReactElement,\n  ReactNode,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport type { CNavGroupProps } from '../nav/CNavGroup'\nimport type { CNavLinkProps } from '../nav/CNavLink'\nimport type { CNavItemProps } from '../nav/CNavItem'\n\nimport { CSidebarNavContext } from './CSidebarNavContext'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CSidebarNavProps extends HTMLAttributes<HTMLUListElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   *\n   * @since 5.0.0\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nconst isNavElement = (\n  child: ReactNode\n): child is ReactElement<CNavGroupProps | CNavLinkProps | CNavItemProps> => {\n  if (!React.isValidElement(child)) return false\n  const type = child.type as { displayName?: string }\n  return (\n    type.displayName === 'CNavGroup' ||\n    type.displayName === 'CNavLink' ||\n    type.displayName === 'CNavItem'\n  )\n}\n\nconst recursiveClone = (children: ReactNode, id?: string, updateId?: boolean): ReactNode => {\n  return React.Children.map(children, (child, index) => {\n    if (!isNavElement(child)) {\n      return child\n    }\n\n    const _id = id ? (updateId ? `${id}.${index}` : `${id}`) : `${index}`\n\n    if (child.props.children) {\n      const type = child.type as { displayName?: string }\n      const shouldUpdateId = type.displayName !== 'CNavItem'\n\n      return React.cloneElement(child, {\n        idx: _id,\n        children: recursiveClone(child.props.children, _id, shouldUpdateId),\n      })\n    }\n\n    return React.cloneElement(child, {\n      idx: _id,\n    })\n  })\n}\n\nexport const CSidebarNav: PolymorphicRefForwardingComponent<'ul', CSidebarNavProps> = forwardRef<\n  HTMLUListElement,\n  CSidebarNavProps\n>(({ children, as: Component = 'ul', className, ...rest }, ref) => {\n  const [visibleGroup, setVisibleGroup] = useState('')\n  const CNavContextValues = {\n    visibleGroup,\n    setVisibleGroup,\n  }\n\n  return (\n    <CSidebarNavContext.Provider value={CNavContextValues}>\n      <Component className={classNames('sidebar-nav', className)} ref={ref} {...rest}>\n        {recursiveClone(children)}\n      </Component>\n    </CSidebarNavContext.Provider>\n  )\n})\n\nCSidebarNav.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCSidebarNav.displayName = 'CSidebarNav'\n"],"mappings":";;;;;AAgCA,IAAMA,YAAY,GAAG,SAAAA,CACnBC,KAAgB;EAEhB,IAAI,CAACC,KAAK,CAACC,cAAc,CAACF,KAAK,CAAC,EAAE,OAAO,KAAK;EAC9C,IAAMG,IAAI,GAAGH,KAAK,CAACG,IAAgC;EACnD,OACEA,IAAI,CAACC,WAAW,KAAK,WAAW,IAChCD,IAAI,CAACC,WAAW,KAAK,UAAU,IAC/BD,IAAI,CAACC,WAAW,KAAK,UAAU;AAEnC,CAAC;AAED,IAAMC,cAAc,GAAG,SAAAA,CAACC,QAAmB,EAAEC,EAAW,EAAEC,QAAkB;EAC1E,OAAOP,KAAK,CAACQ,QAAQ,CAACC,GAAG,CAACJ,QAAQ,EAAE,UAACN,KAAK,EAAEW,KAAK;IAC/C,IAAI,CAACZ,YAAY,CAACC,KAAK,CAAC,EAAE;MACxB,OAAOA,KAAK;;IAGd,IAAMY,GAAG,GAAGL,EAAE,GAAIC,QAAQ,GAAG,GAAAK,MAAA,CAAGN,EAAE,OAAAM,MAAA,CAAIF,KAAK,CAAE,GAAG,GAAAE,MAAA,CAAGN,EAAE,CAAE,GAAI,EAAG,CAAAM,MAAA,CAAAF,KAAK,CAAE;IAErE,IAAIX,KAAK,CAACc,KAAK,CAACR,QAAQ,EAAE;MACxB,IAAMH,IAAI,GAAGH,KAAK,CAACG,IAAgC;MACnD,IAAMY,cAAc,GAAGZ,IAAI,CAACC,WAAW,KAAK,UAAU;MAEtD,OAAOH,KAAK,CAACe,YAAY,CAAChB,KAAK,EAAE;QAC/BiB,GAAG,EAAEL,GAAG;QACRN,QAAQ,EAAED,cAAc,CAACL,KAAK,CAACc,KAAK,CAACR,QAAQ,EAAEM,GAAG,EAAEG,cAAc;MACnE,EAAC;;IAGJ,OAAOd,KAAK,CAACe,YAAY,CAAChB,KAAK,EAAE;MAC/BiB,GAAG,EAAEL;IACN,EAAC;EACJ,CAAC,CAAC;AACJ,CAAC;IAEYM,WAAW,GAA8DC,UAAU,CAG9F,UAACC,EAAsD,EAAEC,GAAG;EAAzD,IAAAf,QAAQ,GAAAc,EAAA,CAAAd,QAAA;IAAEgB,EAAoB,GAAAF,EAAA,CAAAG,EAAA;IAAhBC,SAAS,GAAGF,EAAA,kBAAI,GAAAA,EAAA;IAAEG,SAAS,GAAAL,EAAA,CAAAK,SAAA;IAAKC,IAAI,GAAAC,MAAA,CAAAP,EAAA,EAApD,+BAAsD,CAAF;EAC/C,IAAAQ,EAAA,GAAkCC,QAAQ,CAAC,EAAE,CAAC;IAA7CC,YAAY,GAAAF,EAAA;IAAEG,eAAe,GAAAH,EAAA,GAAgB;EACpD,IAAMI,iBAAiB,GAAG;IACxBF,YAAY,EAAAA,YAAA;IACZC,eAAe,EAAAA;GAChB;EAED,OACE9B,KAAA,CAAAgC,aAAA,CAACC,kBAAkB,CAACC,QAAQ,EAAC;IAAAC,KAAK,EAAEJ;EAAiB,GACnD/B,KAAC,CAAAgC,aAAA,CAAAT,SAAS,EAACa,QAAA;IAAAZ,SAAS,EAAEa,UAAU,CAAC,aAAa,EAAEb,SAAS,CAAC;IAAEJ,GAAG,EAAEA;EAAG,GAAMK,IAAI,GAC3ErB,cAAc,CAACC,QAAQ,CAAC,CACf,CACgB;AAElC,CAAC;AAEDY,WAAW,CAACqB,SAAS,GAAG;EACtBhB,EAAE,EAAEiB,SAAS,CAACC,WAAW;EACzBnC,QAAQ,EAAEkC,SAAS,CAACE,IAAI;EACxBjB,SAAS,EAAEe,SAAS,CAACG;CACtB;AAEDzB,WAAW,CAACd,WAAW,GAAG,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}