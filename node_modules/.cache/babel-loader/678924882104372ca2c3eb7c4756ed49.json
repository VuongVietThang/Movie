{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useRef, useState, useEffect, useLayoutEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CBackdrop } from '../backdrop/CBackdrop.js';\nimport { CConditionalPortal } from '../conditional-portal/CConditionalPortal.js';\nimport { CModalContent } from './CModalContent.js';\nimport { CModalContext } from './CModalContext.js';\nimport { CModalDialog } from './CModalDialog.js';\nimport { useForkedRef } from '../../hooks/useForkedRef.js';\nimport '@popperjs/core';\nimport Transition from '../../node_modules/react-transition-group/esm/Transition.js';\nvar CModal = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      alignment = _a.alignment,\n      _b = _a.backdrop,\n      backdrop = _b === void 0 ? true : _b,\n      className = _a.className,\n      container = _a.container,\n      _c = _a.duration,\n      duration = _c === void 0 ? 150 : _c,\n      _d = _a.focus,\n      focus = _d === void 0 ? true : _d,\n      fullscreen = _a.fullscreen,\n      _e = _a.keyboard,\n      keyboard = _e === void 0 ? true : _e,\n      onClose = _a.onClose,\n      onClosePrevented = _a.onClosePrevented,\n      onShow = _a.onShow,\n      _f = _a.portal,\n      portal = _f === void 0 ? true : _f,\n      scrollable = _a.scrollable,\n      size = _a.size,\n      _g = _a.transition,\n      transition = _g === void 0 ? true : _g,\n      _h = _a.unmountOnClose,\n      unmountOnClose = _h === void 0 ? true : _h,\n      visible = _a.visible,\n      rest = __rest(_a, [\"children\", \"alignment\", \"backdrop\", \"className\", \"container\", \"duration\", \"focus\", \"fullscreen\", \"keyboard\", \"onClose\", \"onClosePrevented\", \"onShow\", \"portal\", \"scrollable\", \"size\", \"transition\", \"unmountOnClose\", \"visible\"]);\n\n  var activeElementRef = useRef(null);\n  var modalRef = useRef(null);\n  var modalContentRef = useRef(null);\n  var forkedRef = useForkedRef(ref, modalRef);\n\n  var _j = useState(visible),\n      _visible = _j[0],\n      setVisible = _j[1];\n\n  var _k = useState(false),\n      staticBackdrop = _k[0],\n      setStaticBackdrop = _k[1];\n\n  var contextValues = {\n    visible: _visible,\n    setVisible: setVisible\n  };\n  useEffect(function () {\n    setVisible(visible);\n  }, [visible]);\n  useEffect(function () {\n    var _a;\n\n    if (_visible) {\n      activeElementRef.current = document.activeElement;\n      document.addEventListener('mouseup', handleClickOutside);\n      document.addEventListener('keydown', handleKeyDown);\n    } else {\n      (_a = activeElementRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n\n    return function () {\n      document.removeEventListener('mouseup', handleClickOutside);\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [_visible]);\n\n  var handleDismiss = function () {\n    if (backdrop === 'static') {\n      return setStaticBackdrop(true);\n    }\n\n    setVisible(false);\n  };\n\n  useLayoutEffect(function () {\n    onClosePrevented && onClosePrevented();\n    setTimeout(function () {\n      return setStaticBackdrop(false);\n    }, duration);\n  }, [staticBackdrop]); // Set focus to modal after open\n\n  useLayoutEffect(function () {\n    if (_visible) {\n      document.body.classList.add('modal-open');\n\n      if (backdrop) {\n        document.body.style.overflow = 'hidden';\n        document.body.style.paddingRight = '0px';\n      }\n\n      setTimeout(function () {\n        var _a;\n\n        focus && ((_a = modalRef.current) === null || _a === void 0 ? void 0 : _a.focus());\n      }, transition ? duration : 0);\n    } else {\n      document.body.classList.remove('modal-open');\n\n      if (backdrop) {\n        document.body.style.removeProperty('overflow');\n        document.body.style.removeProperty('padding-right');\n      }\n    }\n\n    return function () {\n      document.body.classList.remove('modal-open');\n\n      if (backdrop) {\n        document.body.style.removeProperty('overflow');\n        document.body.style.removeProperty('padding-right');\n      }\n    };\n  }, [_visible]);\n\n  var handleClickOutside = function (event) {\n    if (modalRef.current && modalRef.current == event.target) {\n      handleDismiss();\n    }\n  };\n\n  var handleKeyDown = function (event) {\n    if (event.key === 'Escape' && keyboard) {\n      handleDismiss();\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Transition, {\n    in: _visible,\n    mountOnEnter: true,\n    nodeRef: modalRef,\n    onEnter: onShow,\n    onExit: onClose,\n    unmountOnExit: unmountOnClose,\n    timeout: transition ? duration : 0\n  }, function (state) {\n    return React.createElement(CConditionalPortal, {\n      container: container,\n      portal: portal\n    }, React.createElement(CModalContext.Provider, {\n      value: contextValues\n    }, React.createElement(\"div\", __assign({\n      className: classNames('modal', {\n        'modal-static': staticBackdrop,\n        fade: transition,\n        show: state === 'entered'\n      }, className),\n      tabIndex: -1\n    }, _visible ? {\n      'aria-modal': true,\n      role: 'dialog'\n    } : {\n      'aria-hidden': 'true'\n    }, {\n      style: __assign({}, state !== 'exited' && {\n        display: 'block'\n      })\n    }, rest, {\n      ref: forkedRef\n    }), React.createElement(CModalDialog, {\n      alignment: alignment,\n      fullscreen: fullscreen,\n      scrollable: scrollable,\n      size: size\n    }, React.createElement(CModalContent, {\n      ref: modalContentRef\n    }, children)))));\n  }), backdrop && React.createElement(CConditionalPortal, {\n    container: container,\n    portal: portal\n  }, React.createElement(CBackdrop, {\n    visible: _visible\n  })));\n});\nCModal.propTypes = {\n  alignment: PropTypes.oneOf(['top', 'center']),\n  backdrop: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['static'])]),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  container: PropTypes.any,\n  // HTMLElement\n  duration: PropTypes.number,\n  focus: PropTypes.bool,\n  fullscreen: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['sm', 'md', 'lg', 'xl', 'xxl'])]),\n  keyboard: PropTypes.bool,\n  onClose: PropTypes.func,\n  onClosePrevented: PropTypes.func,\n  onShow: PropTypes.func,\n  portal: PropTypes.bool,\n  scrollable: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg', 'xl']),\n  transition: PropTypes.bool,\n  unmountOnClose: PropTypes.bool,\n  visible: PropTypes.bool\n};\nCModal.displayName = 'CModal';\nexport { CModal };","map":{"version":3,"mappings":";;;;;;;;;;;;IA+FaA,MAAM,GAAGC,UAAU,CAC9B,UACEC,EADF,EAsBEC,GAtBF,EAsBK;AApBD,cAAQ,cAAR;AAAA,MACAC,SAAS,eADT;AAAA,MAEAC,gBAFA;AAAA,MAEAC,QAAQ,GAAGD,uBAAIA,EAFf;AAAA,MAGAE,SAAS,eAHT;AAAA,MAIAC,SAAS,eAJT;AAAA,MAKAC,gBALA;AAAA,MAKAC,QAAQ,mBAAG,GAAH,GAAMD,EALd;AAAA,MAMAE,EAAY,WANZ;AAAA,MAMAC,KAAK,GAAGD,uBAAIA,EANZ;AAAA,MAOAE,UAAU,gBAPV;AAAA,MAQAC,gBARA;AAAA,MAQAC,QAAQ,mBAAG,IAAH,GAAOD,EARf;AAAA,MASAE,OAAO,aATP;AAAA,MAUAC,gBAAgB,sBAVhB;AAAA,MAWAC,MAAM,YAXN;AAAA,MAYAC,cAZA;AAAA,MAYAC,MAAM,mBAAG,IAAH,GAAOD,EAZb;AAAA,MAaAE,UAAU,gBAbV;AAAA,MAcAC,IAAI,UAdJ;AAAA,MAeAC,kBAfA;AAAA,MAeAC,UAAU,mBAAG,IAAH,GAAOD,EAfjB;AAAA,MAgBAE,sBAhBA;AAAA,MAgBAC,cAAc,mBAAG,IAAH,GAAOD,EAhBrB;AAAA,MAiBAE,OAAO,aAjBP;AAAA,MAkBGC,IAAI,cAnBT,kOAmBS,CAlBP;;AAsBF,MAAMC,gBAAgB,GAAGC,MAAM,CAAqB,IAArB,CAA/B;AACA,MAAMC,QAAQ,GAAGD,MAAM,CAAiB,IAAjB,CAAvB;AACA,MAAME,eAAe,GAAGF,MAAM,CAAiB,IAAjB,CAA9B;AACA,MAAMG,SAAS,GAAGC,YAAY,CAAC/B,GAAD,EAAM4B,QAAN,CAA9B;;AAEM,WAAyBI,QAAQ,CAACR,OAAD,CAAjC;AAAA,MAACS,QAAQ,QAAT;AAAA,MAAWC,UAAU,QAArB;;AACA,WAAsCF,QAAQ,CAAC,KAAD,CAA9C;AAAA,MAACG,cAAc,QAAf;AAAA,MAAiBC,iBAAiB,QAAlC;;AAEN,MAAMC,aAAa,GAAG;AACpBb,WAAO,EAAES,QADW;AAEpBC,cAAU;AAFU,GAAtB;AAKAI,WAAS,CAAC;AACRJ,cAAU,CAACV,OAAD,CAAV;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAIAc,WAAS,CAAC;;;AACR,QAAIL,QAAJ,EAAc;AACZP,sBAAgB,CAACa,OAAjB,GAA2BC,QAAQ,CAACC,aAApC;AACAD,cAAQ,CAACE,gBAAT,CAA0B,SAA1B,EAAqCC,kBAArC;AACAH,cAAQ,CAACE,gBAAT,CAA0B,SAA1B,EAAqCE,aAArC;KAHF,MAIO;AACL,4BAAgB,CAACL,OAAjB,MAA0B,IAA1B,IAA0BxC,aAA1B,GAA0B,MAA1B,GAA0BA,UAA1B;;;AAGF,WAAO;AACLyC,cAAQ,CAACK,mBAAT,CAA6B,SAA7B,EAAwCF,kBAAxC;AACAH,cAAQ,CAACK,mBAAT,CAA6B,SAA7B,EAAwCD,aAAxC;AACD,KAHD;AAID,GAbQ,EAaN,CAACX,QAAD,CAbM,CAAT;;AAeA,MAAMa,aAAa,GAAG;AACpB,QAAI3C,QAAQ,KAAK,QAAjB,EAA2B;AACzB,aAAOiC,iBAAiB,CAAC,IAAD,CAAxB;;;AAGFF,cAAU,CAAC,KAAD,CAAV;AACD,GAND;;AAQAa,iBAAe,CAAC;AACdjC,oBAAgB,IAAIA,gBAAgB,EAApC;AACAkC,cAAU,CAAC;AAAM,8BAAiB,CAAC,KAAD,CAAjB;AAAwB,KAA/B,EAAiCzC,QAAjC,CAAV;AACD,GAHc,EAGZ,CAAC4B,cAAD,CAHY,CAAf,CA1CG;;AAgDHY,iBAAe,CAAC;AACd,QAAId,QAAJ,EAAc;AACZO,cAAQ,CAACS,IAAT,CAAcC,SAAd,CAAwBC,GAAxB,CAA4B,YAA5B;;AAEA,UAAIhD,QAAJ,EAAc;AACZqC,gBAAQ,CAACS,IAAT,CAAcG,KAAd,CAAoBC,QAApB,GAA+B,QAA/B;AACAb,gBAAQ,CAACS,IAAT,CAAcG,KAAd,CAAoBE,YAApB,GAAmC,KAAnC;;;AAGFN,gBAAU,CACR;;;AACEvC,aAAK,KAAI,cAAQ,CAAC8B,OAAT,MAAkB,IAAlB,IAAkBxC,aAAlB,GAAkB,MAAlB,GAAkBA,UAAtB,CAAL;AACD,OAHO,EAIRsB,UAAU,GAAGd,QAAH,GAAc,CAJhB,CAAV;KARF,MAcO;AACLiC,cAAQ,CAACS,IAAT,CAAcC,SAAd,CAAwBK,MAAxB,CAA+B,YAA/B;;AAEA,UAAIpD,QAAJ,EAAc;AACZqC,gBAAQ,CAACS,IAAT,CAAcG,KAAd,CAAoBI,cAApB,CAAmC,UAAnC;AACAhB,gBAAQ,CAACS,IAAT,CAAcG,KAAd,CAAoBI,cAApB,CAAmC,eAAnC;;;;AAIJ,WAAO;AACLhB,cAAQ,CAACS,IAAT,CAAcC,SAAd,CAAwBK,MAAxB,CAA+B,YAA/B;;AACA,UAAIpD,QAAJ,EAAc;AACZqC,gBAAQ,CAACS,IAAT,CAAcG,KAAd,CAAoBI,cAApB,CAAmC,UAAnC;AACAhB,gBAAQ,CAACS,IAAT,CAAcG,KAAd,CAAoBI,cAApB,CAAmC,eAAnC;;AAEH,KAND;AAOD,GA/Bc,EA+BZ,CAACvB,QAAD,CA/BY,CAAf;;AAiCA,MAAMU,kBAAkB,GAAG,UAACc,KAAD,EAAa;AACtC,QAAI7B,QAAQ,CAACW,OAAT,IAAoBX,QAAQ,CAACW,OAAT,IAAoBkB,KAAK,CAACC,MAAlD,EAA0D;AACxDZ,mBAAa;;AAEhB,GAJD;;AAMA,MAAMF,aAAa,GAAG,UAACa,KAAD,EAAqB;AACzC,QAAIA,KAAK,CAACE,GAAN,KAAc,QAAd,IAA0B/C,QAA9B,EAAwC;AACtCkC,mBAAa;;AAEhB,GAJD;;AAMA,SACEc,0CACEA,KAAC,cAAD,CAACC,UAAD,EAAW;AACTC,MAAE,EAAE7B,QADK;AAET8B,gBAAY,EACZ,IAHS;AAGTC,WAAO,EAAEpC,QAHA;AAITqC,WAAO,EAAElD,MAJA;AAKTmD,UAAM,EAAErD,OALC;AAMTsD,iBAAa,EAAE5C,cANN;AAOT6C,WAAO,EAAE/C,UAAU,GAAGd,QAAH,GAAc;AAPxB,GAAX,EASG,UAAC8D,KAAD,EAAM;AAAK,WACVT,KAAC,cAAD,CAACU,kBAAD,EAAoB;AAAAjE,eAAS,EAAEA,SAAX;AAAsBY,YAAM,EAAEA;AAA9B,KAApB,EACE2C,oBAACW,aAAa,CAACC,QAAf,EAAwB;AAAAC,WAAK,EAAEpC;AAAP,KAAxB,EACEuB;AACExD,eAAS,EAAEsE,UAAU,CACnB,OADmB,EAEnB;AACE,wBAAgBvC,cADlB;AAEEwC,YAAI,EAAEtD,UAFR;AAGEuD,YAAI,EAAEP,KAAK,KAAK;AAHlB,OAFmB,EAOnBjE,SAPmB,CADvB;AAUEyE,cAAQ,EAAE;AAVZ,OAWO5C,WACD;AAAE,oBAAc,IAAhB;AAAsB6C,UAAI,EAAE;AAA5B,KADC,GAED;AAAE,qBAAe;AAAjB,KAbN,EAcE;AAAA1B,WAAK,EACA2B,aAACV,KAAK,KAAK,QAAV,IAAsB;AAAEW,eAAO,EAAE;AAAX,OAAvB;AADL,KAdF,EAiBMvD,IAjBN,EAiBU;AACRzB,SAAG,EAAE8B;AADG,KAjBV,GAoBE8B,oBAACqB,YAAD,EACE;AAAAhF,eAAS,EAAEA,SAAX;AACAS,gBAAU,EAAEA,UADZ;AAEAQ,gBAAU,EAAEA,UAFZ;AAGAC,UAAI,EAAEA;AAHN,KADF,EAMEyC,oBAACsB,aAAD,EAAc;AAAClF,SAAG,EAAE6B;AAAN,KAAd,EAAsCsD,QAAtC,CANF,CApBF,CADF,CADF,CADU;AAkCX,GA3CH,CADF,EA8CGhF,QAAQ,IACPyD,oBAACU,kBAAD,EAAmB;AAACjE,aAAS,EAAEA,SAAZ;AAAuBY,UAAM,EAAEA;AAA/B,GAAnB,EACE2C,KAAC,cAAD,CAACwB,SAAD,EAAW;AAAA5D,WAAO,EAAES;AAAT,GAAX,CADF,CA/CJ,CADF;AAsDD,CA1K6B;AA6KhCpC,MAAM,CAACwF,SAAP,GAAmB;AACjBpF,WAAS,EAAEqF,SAAS,CAACC,KAAV,CAAgB,CAAC,KAAD,EAAQ,QAAR,CAAhB,CADM;AAEjBpF,UAAQ,EAAEmF,SAAS,CAACE,SAAV,CAAoB,CAACF,SAAS,CAACG,IAAX,EAAiBH,SAAS,CAACC,KAAV,CAA0B,CAAC,QAAD,CAA1B,CAAjB,CAApB,CAFO;AAGjBJ,UAAQ,EAAEG,SAAS,CAACI,IAHH;AAIjBtF,WAAS,EAAEkF,SAAS,CAACK,MAJJ;AAKjBtF,WAAS,EAAEiF,SAAS,CAACM,GALJ;AAKO;AACxBrF,UAAQ,EAAE+E,SAAS,CAACO,MANH;AAOjBpF,OAAK,EAAE6E,SAAS,CAACG,IAPA;AAQjB/E,YAAU,EAAE4E,SAAS,CAACE,SAAV,CAAoB,CAC9BF,SAAS,CAACG,IADoB,EAE9BH,SAAS,CAACC,KAAV,CAAmD,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,KAAzB,CAAnD,CAF8B,CAApB,CARK;AAYjB3E,UAAQ,EAAE0E,SAAS,CAACG,IAZH;AAajB5E,SAAO,EAAEyE,SAAS,CAACQ,IAbF;AAcjBhF,kBAAgB,EAAEwE,SAAS,CAACQ,IAdX;AAejB/E,QAAM,EAAEuE,SAAS,CAACQ,IAfD;AAgBjB7E,QAAM,EAAEqE,SAAS,CAACG,IAhBD;AAiBjBvE,YAAU,EAAEoE,SAAS,CAACG,IAjBL;AAkBjBtE,MAAI,EAAEmE,SAAS,CAACC,KAAV,CAAgB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAAhB,CAlBW;AAmBjBlE,YAAU,EAAEiE,SAAS,CAACG,IAnBL;AAoBjBlE,gBAAc,EAAE+D,SAAS,CAACG,IApBT;AAqBjBjE,SAAO,EAAE8D,SAAS,CAACG;AArBF,CAAnB;AAwBA5F,MAAM,CAACkG,WAAP,GAAqB,QAArB","names":["CModal","forwardRef","_a","ref","alignment","_b","backdrop","className","container","_c","duration","_d","focus","fullscreen","_e","keyboard","onClose","onClosePrevented","onShow","_f","portal","scrollable","size","_g","transition","_h","unmountOnClose","visible","rest","activeElementRef","useRef","modalRef","modalContentRef","forkedRef","useForkedRef","useState","_visible","setVisible","staticBackdrop","setStaticBackdrop","contextValues","useEffect","current","document","activeElement","addEventListener","handleClickOutside","handleKeyDown","removeEventListener","handleDismiss","useLayoutEffect","setTimeout","body","classList","add","style","overflow","paddingRight","remove","removeProperty","event","target","key","React","Transition","in","mountOnEnter","nodeRef","onEnter","onExit","unmountOnExit","timeout","state","CConditionalPortal","CModalContext","Provider","value","classNames","fade","show","tabIndex","role","__assign","display","CModalDialog","CModalContent","children","CBackdrop","propTypes","PropTypes","oneOf","oneOfType","bool","node","string","any","number","func","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react\\src\\components\\modal\\CModal.tsx"],"sourcesContent":["import React, {\n  forwardRef,\n  HTMLAttributes,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { Transition } from 'react-transition-group'\n\nimport { CBackdrop } from '../backdrop'\nimport { CConditionalPortal } from '../conditional-portal'\nimport { CModalContent } from './CModalContent'\nimport { CModalContext } from './CModalContext'\nimport { CModalDialog } from './CModalDialog'\n\nimport { useForkedRef } from '../../hooks'\n\nexport interface CModalProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Align the modal in the center or top of the screen.\n   */\n  alignment?: 'top' | 'center'\n  /**\n   * Apply a backdrop on body while modal is open.\n   */\n  backdrop?: boolean | 'static'\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Appends the react modal to a specific element. You can pass an HTML element or function that returns a single element. By default `document.body`.\n   *\n   * @since 5.3.0\n   */\n  container?: DocumentFragment | Element | (() => DocumentFragment | Element | null) | null\n  /**\n   * @ignore\n   */\n  duration?: number\n  /**\n   * Puts the focus on the modal when shown.\n   *\n   * @since 4.10.0\n   */\n  focus?: boolean\n  /**\n   * Set modal to covers the entire user viewport.\n   */\n  fullscreen?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n  /**\n   * Closes the modal when escape key is pressed.\n   */\n  keyboard?: boolean\n  /**\n   * Callback fired when the component requests to be closed.\n   */\n  onClose?: () => void\n  /**\n   * Callback fired when the component requests to be closed.\n   */\n  onClosePrevented?: () => void\n  /**\n   * Callback fired when the modal is shown, its backdrop is static and a click outside the modal or an escape key press is performed with the keyboard option set to false.\n   */\n  onShow?: () => void\n  /**\n   * Generates modal using createPortal.\n   */\n  portal?: boolean\n  /**\n   * Create a scrollable modal that allows scrolling the modal body.\n   */\n  scrollable?: boolean\n  /**\n   * Size the component small, large, or extra large.\n   */\n  size?: 'sm' | 'lg' | 'xl'\n  /**\n   * Remove animation to create modal that simply appear rather than fade in to view.\n   */\n  transition?: boolean\n  /**\n   * By default the component is unmounted after close animation, if you want to keep the component mounted set this property to false.\n   */\n  unmountOnClose?: boolean\n  /**\n   * Toggle the visibility of modal component.\n   */\n  visible?: boolean\n}\n\nexport const CModal = forwardRef<HTMLDivElement, CModalProps>(\n  (\n    {\n      children,\n      alignment,\n      backdrop = true,\n      className,\n      container,\n      duration = 150,\n      focus = true,\n      fullscreen,\n      keyboard = true,\n      onClose,\n      onClosePrevented,\n      onShow,\n      portal = true,\n      scrollable,\n      size,\n      transition = true,\n      unmountOnClose = true,\n      visible,\n      ...rest\n    },\n    ref\n  ) => {\n    const activeElementRef = useRef<HTMLElement | null>(null)\n    const modalRef = useRef<HTMLDivElement>(null)\n    const modalContentRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, modalRef)\n\n    const [_visible, setVisible] = useState(visible)\n    const [staticBackdrop, setStaticBackdrop] = useState(false)\n\n    const contextValues = {\n      visible: _visible,\n      setVisible,\n    }\n\n    useEffect(() => {\n      setVisible(visible)\n    }, [visible])\n\n    useEffect(() => {\n      if (_visible) {\n        activeElementRef.current = document.activeElement as HTMLElement | null\n        document.addEventListener('mouseup', handleClickOutside)\n        document.addEventListener('keydown', handleKeyDown)\n      } else {\n        activeElementRef.current?.focus()\n      }\n\n      return () => {\n        document.removeEventListener('mouseup', handleClickOutside)\n        document.removeEventListener('keydown', handleKeyDown)\n      }\n    }, [_visible])\n\n    const handleDismiss = () => {\n      if (backdrop === 'static') {\n        return setStaticBackdrop(true)\n      }\n\n      setVisible(false)\n    }\n\n    useLayoutEffect(() => {\n      onClosePrevented && onClosePrevented()\n      setTimeout(() => setStaticBackdrop(false), duration)\n    }, [staticBackdrop])\n\n    // Set focus to modal after open\n    useLayoutEffect(() => {\n      if (_visible) {\n        document.body.classList.add('modal-open')\n\n        if (backdrop) {\n          document.body.style.overflow = 'hidden'\n          document.body.style.paddingRight = '0px'\n        }\n\n        setTimeout(\n          () => {\n            focus && modalRef.current?.focus()\n          },\n          transition ? duration : 0\n        )\n      } else {\n        document.body.classList.remove('modal-open')\n\n        if (backdrop) {\n          document.body.style.removeProperty('overflow')\n          document.body.style.removeProperty('padding-right')\n        }\n      }\n\n      return () => {\n        document.body.classList.remove('modal-open')\n        if (backdrop) {\n          document.body.style.removeProperty('overflow')\n          document.body.style.removeProperty('padding-right')\n        }\n      }\n    }, [_visible])\n\n    const handleClickOutside = (event: Event) => {\n      if (modalRef.current && modalRef.current == event.target) {\n        handleDismiss()\n      }\n    }\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape' && keyboard) {\n        handleDismiss()\n      }\n    }\n\n    return (\n      <>\n        <Transition\n          in={_visible}\n          mountOnEnter\n          nodeRef={modalRef}\n          onEnter={onShow}\n          onExit={onClose}\n          unmountOnExit={unmountOnClose}\n          timeout={transition ? duration : 0}\n        >\n          {(state) => (\n            <CConditionalPortal container={container} portal={portal}>\n              <CModalContext.Provider value={contextValues}>\n                <div\n                  className={classNames(\n                    'modal',\n                    {\n                      'modal-static': staticBackdrop,\n                      fade: transition,\n                      show: state === 'entered',\n                    },\n                    className\n                  )}\n                  tabIndex={-1}\n                  {...(_visible\n                    ? { 'aria-modal': true, role: 'dialog' }\n                    : { 'aria-hidden': 'true' })}\n                  style={{\n                    ...(state !== 'exited' && { display: 'block' }),\n                  }}\n                  {...rest}\n                  ref={forkedRef}\n                >\n                  <CModalDialog\n                    alignment={alignment}\n                    fullscreen={fullscreen}\n                    scrollable={scrollable}\n                    size={size}\n                  >\n                    <CModalContent ref={modalContentRef}>{children}</CModalContent>\n                  </CModalDialog>\n                </div>\n              </CModalContext.Provider>\n            </CConditionalPortal>\n          )}\n        </Transition>\n        {backdrop && (\n          <CConditionalPortal container={container} portal={portal}>\n            <CBackdrop visible={_visible} />\n          </CConditionalPortal>\n        )}\n      </>\n    )\n  }\n)\n\nCModal.propTypes = {\n  alignment: PropTypes.oneOf(['top', 'center']),\n  backdrop: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf<'static'>(['static'])]),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  container: PropTypes.any, // HTMLElement\n  duration: PropTypes.number,\n  focus: PropTypes.bool,\n  fullscreen: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n  keyboard: PropTypes.bool,\n  onClose: PropTypes.func,\n  onClosePrevented: PropTypes.func,\n  onShow: PropTypes.func,\n  portal: PropTypes.bool,\n  scrollable: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg', 'xl']),\n  transition: PropTypes.bool,\n  unmountOnClose: PropTypes.bool,\n  visible: PropTypes.bool,\n}\n\nCModal.displayName = 'CModal'\n"]},"metadata":{},"sourceType":"module"}