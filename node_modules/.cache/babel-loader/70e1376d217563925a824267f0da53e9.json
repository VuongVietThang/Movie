{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nvar CForm = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      className = _a.className,\n      validated = _a.validated,\n      rest = __rest(_a, [\"children\", \"className\", \"validated\"]);\n\n  return React.createElement(\"form\", __assign({\n    className: classNames({\n      'was-validated': validated\n    }, className) || undefined\n  }, rest, {\n    ref: ref\n  }), children);\n});\nCForm.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  validated: PropTypes.bool\n};\nCForm.displayName = 'CForm';\nexport { CForm };","map":{"version":3,"mappings":";;;;IAeaA,KAAK,GAAGC,UAAU,CAC7B,UAACC,EAAD,EAA8CC,GAA9C,EAAiD;AAA9C,cAAQ,cAAR;AAAA,MAAUC,SAAS,eAAnB;AAAA,MAAqBC,SAAS,eAA9B;AAAA,MAAmCC,IAAI,GAAzCC,kDAAE;;AACD,SACEC,KACE,cADF,CACE,MADF,EACEC;AAAAL,aAAS,EAAEM,UAAU,CAAC;AAAE,uBAAiBL;AAAnB,KAAD,EAAiCD,SAAjC,CAAV,IAAyDO;AAApE,KACIL,IADJ,EAEA;AAAAH,OAAG,EAAEA;AAAL,GAFA,CADF,EAKGS,QALH,CADF;AASD,CAX4B;AAc/BZ,KAAK,CAACa,SAAN,GAAkB;AAChBD,UAAQ,EAAEE,SAAS,CAACC,IADJ;AAEhBX,WAAS,EAAEU,SAAS,CAACE,MAFL;AAGhBX,WAAS,EAAES,SAAS,CAACG;AAHL,CAAlB;AAMAjB,KAAK,CAACkB,WAAN,GAAoB,OAApB","names":["CForm","forwardRef","_a","ref","className","validated","rest","__rest","React","__assign","classNames","undefined","children","propTypes","PropTypes","node","string","bool","displayName"],"sources":["C:\\wamp64\\www\\Movie\\node_modules\\@coreui\\react\\src\\components\\form\\CForm.tsx"],"sourcesContent":["import React, { forwardRef, FormHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CFormProps extends FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Mark a form as validated. If you set it `true`, all validation styles will be applied to the forms component.\n   */\n  validated?: boolean\n}\n\nexport const CForm = forwardRef<HTMLFormElement, CFormProps>(\n  ({ children, className, validated, ...rest }, ref) => {\n    return (\n      <form\n        className={classNames({ 'was-validated': validated }, className) || undefined}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </form>\n    )\n  },\n)\n\nCForm.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  validated: PropTypes.bool,\n}\n\nCForm.displayName = 'CForm'\n"]},"metadata":{},"sourceType":"module"}