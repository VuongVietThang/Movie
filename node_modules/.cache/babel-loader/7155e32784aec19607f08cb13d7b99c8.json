{"ast":null,"code":"import { __rest, __assign, __spreadArray } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport '@popperjs/core';\nimport isRTL from '../../utils/isRTL.js';\nimport { useForkedRef } from '../../hooks/useForkedRef.js';\nimport { getThumbSize, calculateMoveValue, updateValue, calculateTooltipPosition, updateGradient, calculateLabelPosition, getLabelValue, calculateClickValue, getNearestValueIndex, validateValue } from './utils.js';\nvar CRangeSlider = forwardRef(function (_a, ref) {\n  var className = _a.className,\n      _b = _a.clickableLabels,\n      clickableLabels = _b === void 0 ? true : _b,\n      _c = _a.disabled,\n      disabled = _c === void 0 ? false : _c,\n      _d = _a.distance,\n      distance = _d === void 0 ? 0 : _d,\n      labels = _a.labels,\n      _e = _a.min,\n      min = _e === void 0 ? 0 : _e,\n      _f = _a.max,\n      max = _f === void 0 ? 100 : _f,\n      name = _a.name,\n      _g = _a.step,\n      step = _g === void 0 ? 1 : _g,\n      _h = _a.value,\n      value = _h === void 0 ? [] : _h,\n      onChange = _a.onChange,\n      _j = _a.tooltips,\n      tooltips = _j === void 0 ? true : _j,\n      tooltipsFormat = _a.tooltipsFormat,\n      _k = _a.track,\n      track = _k === void 0 ? 'fill' : _k,\n      _l = _a.vertical,\n      vertical = _l === void 0 ? false : _l,\n      rest = __rest(_a, [\"className\", \"clickableLabels\", \"disabled\", \"distance\", \"labels\", \"min\", \"max\", \"name\", \"step\", \"value\", \"onChange\", \"tooltips\", \"tooltipsFormat\", \"track\", \"vertical\"]);\n\n  var rangeSliderRef = useRef(null);\n  var forkedRef = useForkedRef(ref, rangeSliderRef);\n  var inputsRef = useRef([]);\n  var labelsContainerRef = useRef(null);\n  var labelsRef = useRef([]);\n  var trackRef = useRef(null);\n\n  var _m = useState(Array.isArray(value) ? value : [value]),\n      currentValue = _m[0],\n      setCurrentValue = _m[1];\n\n  var _o = useState(false),\n      isDragging = _o[0],\n      setIsDragging = _o[1];\n\n  var _p = useState(false),\n      _isRTL = _p[0],\n      setIsRTL = _p[1];\n\n  var _q = useState(0),\n      dragIndex = _q[0],\n      setDragIndex = _q[1];\n\n  var _r = useState(),\n      thumbSize = _r[0],\n      setThumbSize = _r[1];\n\n  useEffect(function () {\n    setCurrentValue(Array.isArray(value) ? value : [value]);\n  }, [value]);\n  useEffect(function () {\n    if (rangeSliderRef.current) {\n      setIsRTL(isRTL(rangeSliderRef.current));\n      setThumbSize(getThumbSize(rangeSliderRef.current, vertical));\n    }\n  }, [rangeSliderRef]);\n  useEffect(function () {\n    var maxSize = Math.max.apply(Math, labelsRef.current.map(function (label) {\n      return vertical ? label.offsetWidth : label.offsetHeight;\n    }));\n\n    if (labelsContainerRef.current) {\n      labelsContainerRef.current.style[vertical ? 'width' : 'height'] = \"\".concat(maxSize, \"px\");\n    }\n  }, [labelsRef]);\n  useEffect(function () {\n    if (isDragging) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    }\n\n    return function () {\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [currentValue]);\n\n  var updateNearestValue = function (value) {\n    var nearestIndex = getNearestValueIndex(value, currentValue);\n\n    var newCurrentValue = __spreadArray([], currentValue, true);\n\n    newCurrentValue[nearestIndex] = validateValue(value, currentValue, distance, nearestIndex);\n    setTimeout(function () {\n      inputsRef.current[nearestIndex].focus();\n    });\n    setCurrentValue(newCurrentValue);\n\n    if (onChange) {\n      onChange(newCurrentValue);\n    }\n  };\n\n  var handleInputChange = function (event, index) {\n    setIsDragging(false);\n    var target = event.target;\n    var value = Number(target.value);\n    var newCurrentValue = updateValue(value, currentValue, distance, index);\n    setCurrentValue(newCurrentValue); // Trigger change event if needed\n\n    if (onChange) {\n      onChange(newCurrentValue);\n    }\n  };\n\n  var handleInputsContainerMouseDown = function (event) {\n    if (trackRef.current === null || event.button !== 0 || disabled) {\n      return;\n    }\n\n    var target = event.target;\n\n    if (!(target instanceof HTMLInputElement) && target !== trackRef.current) {\n      return;\n    }\n\n    var clickValue = calculateClickValue(event, trackRef.current, min, max, step, vertical, _isRTL);\n    var index = getNearestValueIndex(clickValue, currentValue);\n    setIsDragging(true);\n    setDragIndex(index);\n    updateNearestValue(clickValue);\n  };\n\n  var handleLabelClick = function (event, value) {\n    if (!clickableLabels || disabled || event.button !== 0) {\n      return;\n    }\n\n    updateNearestValue(value);\n  };\n\n  var handleMouseMove = function (event) {\n    if (!isDragging || trackRef.current === null || disabled) {\n      return;\n    }\n\n    var moveValue = calculateMoveValue(event, trackRef.current, min, max, step, vertical, _isRTL);\n    var newCurrentValue = updateValue(moveValue, currentValue, distance, dragIndex);\n    setCurrentValue(newCurrentValue);\n\n    if (onChange) {\n      onChange(newCurrentValue);\n    }\n  };\n\n  var handleMouseUp = function () {\n    setIsDragging(false);\n  };\n\n  return React.createElement(\"div\", __assign({\n    className: classNames('range-slider', className, {\n      'range-slider-vertical': vertical,\n      disabled: disabled\n    })\n  }, rest, {\n    ref: forkedRef\n  }), React.createElement(\"div\", {\n    className: \"range-slider-inputs-container\",\n    onMouseDown: handleInputsContainerMouseDown\n  }, currentValue.map(function (value, index) {\n    return React.createElement(React.Fragment, {\n      key: index\n    }, React.createElement(\"input\", {\n      className: \"range-slider-input\",\n      type: \"range\",\n      min: min,\n      max: max,\n      step: step,\n      value: value,\n      name: Array.isArray(name) ? name[index] : \"\".concat(name || '', \"-\").concat(index, \"}\"),\n      role: \"slider\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": value,\n      \"aria-orientation\": vertical ? 'vertical' : 'horizontal',\n      disabled: disabled,\n      onChange: function (event) {\n        return handleInputChange(event, index);\n      },\n      ref: function (el) {\n        inputsRef.current[index] = el;\n      }\n    }), tooltips && React.createElement(\"div\", __assign({\n      className: \"range-slider-tooltip\"\n    }, thumbSize && {\n      style: calculateTooltipPosition(min, max, value, thumbSize, vertical, _isRTL)\n    }), React.createElement(\"div\", {\n      className: \"range-slider-tooltip-inner\"\n    }, tooltipsFormat ? tooltipsFormat(value) : value), React.createElement(\"div\", {\n      className: \"range-slider-tooltip-arrow\"\n    })));\n  }), React.createElement(\"div\", __assign({\n    className: \"range-slider-track\"\n  }, track && {\n    style: updateGradient(min, max, currentValue, vertical, _isRTL)\n  }, {\n    ref: trackRef\n  }))), labels && React.createElement(\"div\", {\n    className: \"range-slider-labels-container\",\n    ref: labelsContainerRef\n  }, Array.isArray(labels) && labels.map(function (label, index) {\n    var labelPosition = calculateLabelPosition(min, max, labels, label, index);\n    var labelValue = getLabelValue(min, max, labels, label, index);\n    var labelStyle = Object.assign(vertical ? {\n      bottom: labelPosition\n    } : _isRTL ? {\n      right: labelPosition\n    } : {\n      left: labelPosition\n    }, typeof label === 'object' && 'style' in label && label.style);\n    return React.createElement(\"div\", {\n      className: classNames('range-slider-label', {\n        clickable: clickableLabels\n      }, typeof label === 'object' && 'className' in label && label.className),\n      style: labelStyle,\n      onMouseDown: function (event) {\n        return handleLabelClick(event, labelValue);\n      },\n      key: index,\n      ref: function (el) {\n        labelsRef.current[index] = el;\n      }\n    }, typeof label === 'object' && 'label' in label ? label.label : label);\n  })));\n});\nCRangeSlider.propTypes = {\n  clickableLabels: PropTypes.bool,\n  disabled: PropTypes.bool,\n  distance: PropTypes.number,\n  labels: PropTypes.any,\n  max: PropTypes.number,\n  min: PropTypes.number,\n  name: PropTypes.oneOfType([PropTypes.array, PropTypes.string]),\n  step: PropTypes.number,\n  tooltips: PropTypes.bool,\n  tooltipsFormat: PropTypes.func,\n  track: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['fill'])]),\n  value: PropTypes.oneOfType([PropTypes.array, PropTypes.number]),\n  vertical: PropTypes.bool\n};\nCRangeSlider.displayName = 'CRangeSlider';\nexport { CRangeSlider };","map":{"version":3,"mappings":"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","names":["CRangeSlider","forwardRef","_a","ref","_b","clickableLabels","_c","disabled","_d","distance","labels","_e","min","_f","max","name","_g","step","_h","value","onChange","_j","tooltips","tooltipsFormat","_k","track","_l","vertical","rest","rangeSliderRef","useRef","forkedRef","useForkedRef","inputsRef","labelsContainerRef","labelsRef","trackRef","useState","Array","isArray","currentValue","setCurrentValue","isDragging","setIsDragging","_isRTL","setIsRTL","dragIndex","setDragIndex","thumbSize","setThumbSize","useEffect","current","isRTL","getThumbSize","maxSize","Math","apply","map","label","offsetWidth","offsetHeight","style","concat","document","addEventListener","handleMouseMove","handleMouseUp","removeEventListener","updateNearestValue","nearestIndex","getNearestValueIndex","newCurrentValue","validateValue","setTimeout","focus","handleInputChange","event","index","target","Number","updateValue","handleInputsContainerMouseDown","button","HTMLInputElement","clickValue","calculateClickValue","handleLabelClick","moveValue","calculateMoveValue","React","className","classNames","onMouseDown","Fragment","key","type","role","el","__assign","calculateTooltipPosition","updateGradient","labelPosition","calculateLabelPosition","labelValue","getLabelValue","labelStyle","Object","assign","bottom","right","left","clickable","propTypes","PropTypes","bool","number","any","oneOfType","array","string","func","oneOf","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\range-slider\\CRangeSlider.tsx"],"sourcesContent":["import React, {\n  ChangeEvent,\n  forwardRef,\n  HTMLAttributes,\n  ReactNode,\n  useEffect,\n  useRef,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { useForkedRef } from '../../hooks'\nimport { isRTL } from '../../utils'\n\nimport { ThumbSize, type Label } from './types'\nimport {\n  calculateClickValue,\n  calculateLabelPosition,\n  calculateMoveValue,\n  calculateTooltipPosition,\n  getLabelValue,\n  getNearestValueIndex,\n  getThumbSize,\n  updateGradient,\n  updateValue,\n  validateValue,\n} from './utils'\n\nexport interface CRangeSliderProps extends Omit<HTMLAttributes<HTMLDivElement>, 'onChange'> {\n  /**\n   * Customize the styling of your React Range Slider by adding a custom `className`.\n   * This allows you to apply additional CSS classes for enhanced design flexibility and integration with your existing stylesheets.\n   */\n  className?: string\n  /**\n   * Enable or disable clickable labels in the React Range Slider.\n   * When set to `true`, users can click on labels to adjust the slider's value directly, enhancing interactivity and user experience.\n   */\n  clickableLabels?: boolean\n  /**\n   * Control the interactive state of the React Range Slider with the `disabled` prop.\n   * Setting it to `true` will disable all slider functionalities, preventing user interaction and visually indicating a non-interactive state.\n   */\n  disabled?: boolean\n  /**\n   * Define the minimum distance between slider handles using the `distance` prop in the React Range Slider.\n   * This ensures that the handles maintain a specified separation, preventing overlap and maintaining clear value distinctions.\n   */\n  distance?: number\n  /**\n   * Add descriptive labels to your React Range Slider by providing an array of `labels`.\n   * These labels enhance the slider's usability by clearly indicating key values and providing contextual information to users.\n   */\n  labels?: Label[]\n  /**\n   * Specify the maximum value for the React Range Slider with the `max` prop.\n   * This determines the upper limit of the slider's range, enabling precise control over the highest selectable value.\n   */\n  max?: number\n  /**\n   * Set the minimum value for the React Range Slider using the `min` prop.\n   * This defines the lower bound of the slider's range, allowing you to control the starting point of user selection.\n   */\n  min?: number\n  /**\n   * Assign a `name` to the React Range Slider for form integration.\n   * Whether using a single string or an array of strings, this prop ensures that the slider's values are correctly identified when submitting forms.\n   */\n  name?: string | string[]\n  /**\n   * Control the granularity of the React Range Slider by setting the `step` prop.\n   * This defines the increment intervals between selectable values, allowing for precise adjustments based on your application's requirements.\n   */\n  step?: number\n  /**\n   * Handle value changes in the React Range Slider by utilizing the `onChange` callback.\n   * This function is triggered whenever the slider's value updates, enabling you to manage state and respond to user interactions effectively.\n   */\n  onChange?: (value: number[]) => void\n  /**\n   * Toggle the visibility of tooltips in the React Range Slider with the `tooltips` prop.\n   * When enabled, tooltips display the current value of the slider handles, providing real-time feedback to users.\n   */\n  tooltips?: boolean\n  /**\n   * Customize the display format of tooltips in the React Range Slider using the `tooltipsFormat` function.\n   * This allows you to format the tooltip values according to your specific requirements, enhancing the clarity and presentation of information.\n   */\n  tooltipsFormat?: (value: number) => ReactNode\n  /**\n   * Controls the visual representation of the slider's track. When set to `'fill'`, the track is dynamically filled based on the slider's value(s). Setting it to `false` disables the filled track.\n   */\n  track?: 'fill' | boolean\n  /**\n   * Set the current value(s) of the React Range Slider using the `value` prop.\n   * Whether you're using a single value or an array for multi-handle sliders, this prop controls the slider's position and ensures it reflects the desired state.\n   */\n  value?: number | number[]\n  /**\n   * Orient the React Range Slider vertically by setting the `vertical` prop to `true`.\n   * This changes the slider's layout from horizontal to vertical, providing a different aesthetic and fitting various UI designs.\n   */\n  vertical?: boolean\n}\n\nexport const CRangeSlider = forwardRef<HTMLDivElement, CRangeSliderProps>(\n  (\n    {\n      className,\n      clickableLabels = true,\n      disabled = false,\n      distance = 0,\n      labels,\n      min = 0,\n      max = 100,\n      name,\n      step = 1,\n      value = [],\n      onChange,\n      tooltips = true,\n      tooltipsFormat,\n      track = 'fill',\n      vertical = false,\n      ...rest\n    },\n    ref,\n  ) => {\n    const rangeSliderRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, rangeSliderRef)\n    const inputsRef = useRef<HTMLInputElement[]>([])\n    const labelsContainerRef = useRef<HTMLDivElement>(null)\n    const labelsRef = useRef<HTMLDivElement[]>([])\n    const trackRef = useRef<HTMLDivElement>(null)\n\n    const [currentValue, setCurrentValue] = useState<number[]>(\n      Array.isArray(value) ? value : [value],\n    )\n    const [isDragging, setIsDragging] = useState(false)\n    const [_isRTL, setIsRTL] = useState(false)\n    const [dragIndex, setDragIndex] = useState(0)\n    const [thumbSize, setThumbSize] = useState<ThumbSize | null>()\n\n    useEffect(() => {\n      setCurrentValue(Array.isArray(value) ? value : [value])\n    }, [value])\n\n    useEffect(() => {\n      if (rangeSliderRef.current) {\n        setIsRTL(isRTL(rangeSliderRef.current))\n        setThumbSize(getThumbSize(rangeSliderRef.current, vertical))\n      }\n    }, [rangeSliderRef])\n\n    useEffect(() => {\n      const maxSize = Math.max(\n        ...labelsRef.current.map((label) => (vertical ? label.offsetWidth : label.offsetHeight)),\n      )\n\n      if (labelsContainerRef.current) {\n        labelsContainerRef.current.style[vertical ? 'width' : 'height'] = `${maxSize}px`\n      }\n    }, [labelsRef])\n\n    useEffect(() => {\n      if (isDragging) {\n        document.addEventListener('mousemove', handleMouseMove)\n        document.addEventListener('mouseup', handleMouseUp)\n      }\n\n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove)\n        document.removeEventListener('mouseup', handleMouseUp)\n      }\n    }, [currentValue])\n\n    const updateNearestValue = (value: number) => {\n      const nearestIndex = getNearestValueIndex(value, currentValue)\n      const newCurrentValue = [...currentValue]\n      newCurrentValue[nearestIndex] = validateValue(value, currentValue, distance, nearestIndex)\n\n      setTimeout(() => {\n        inputsRef.current[nearestIndex].focus()\n      })\n\n      setCurrentValue(newCurrentValue)\n\n      if (onChange) {\n        onChange(newCurrentValue)\n      }\n    }\n\n    const handleInputChange = (event: ChangeEvent<HTMLInputElement>, index: number) => {\n      setIsDragging(false)\n\n      const target = event.target\n      const value = Number(target.value)\n\n      const newCurrentValue = updateValue(value, currentValue, distance, index)\n\n      setCurrentValue(newCurrentValue)\n\n      // Trigger change event if needed\n      if (onChange) {\n        onChange(newCurrentValue)\n      }\n    }\n\n    const handleInputsContainerMouseDown = (event: React.MouseEvent<HTMLDivElement>) => {\n      if (trackRef.current === null || event.button !== 0 || disabled) {\n        return\n      }\n\n      const target = event.target as HTMLDivElement | HTMLInputElement\n      if (!(target instanceof HTMLInputElement) && target !== trackRef.current) {\n        return\n      }\n\n      const clickValue = calculateClickValue(\n        event,\n        trackRef.current,\n        min,\n        max,\n        step,\n        vertical,\n        _isRTL,\n      )\n\n      const index = getNearestValueIndex(clickValue, currentValue)\n\n      setIsDragging(true)\n      setDragIndex(index)\n      updateNearestValue(clickValue)\n    }\n\n    const handleLabelClick = (event: React.MouseEvent<HTMLDivElement>, value: number) => {\n      if (!clickableLabels || disabled || event.button !== 0) {\n        return\n      }\n\n      updateNearestValue(value)\n    }\n\n    const handleMouseMove = (event: MouseEvent) => {\n      if (!isDragging || trackRef.current === null || disabled) {\n        return\n      }\n\n      const moveValue = calculateMoveValue(\n        event,\n        trackRef.current,\n        min,\n        max,\n        step,\n        vertical,\n        _isRTL,\n      )\n\n      const newCurrentValue = updateValue(moveValue, currentValue, distance, dragIndex)\n\n      setCurrentValue(newCurrentValue)\n\n      if (onChange) {\n        onChange(newCurrentValue)\n      }\n    }\n\n    const handleMouseUp = () => {\n      setIsDragging(false)\n    }\n\n    return (\n      <div\n        className={classNames('range-slider', className, {\n          'range-slider-vertical': vertical,\n          disabled,\n        })}\n        {...rest}\n        ref={forkedRef}\n      >\n        <div className=\"range-slider-inputs-container\" onMouseDown={handleInputsContainerMouseDown}>\n          {currentValue.map((value, index) => (\n            <React.Fragment key={index}>\n              <input\n                className=\"range-slider-input\"\n                type=\"range\"\n                min={min}\n                max={max}\n                step={step}\n                value={value}\n                name={Array.isArray(name) ? name[index] : `${name || ''}-${index}}`}\n                role=\"slider\"\n                aria-valuemin={min}\n                aria-valuemax={max}\n                aria-valuenow={value}\n                aria-orientation={vertical ? 'vertical' : 'horizontal'}\n                disabled={disabled}\n                onChange={(event) => handleInputChange(event, index)}\n                ref={(el: HTMLInputElement) => {\n                  inputsRef.current[index] = el\n                }}\n              />\n              {tooltips && (\n                <div\n                  className=\"range-slider-tooltip\"\n                  {...(thumbSize && {\n                    style: calculateTooltipPosition(min, max, value, thumbSize, vertical, _isRTL),\n                  })}\n                >\n                  <div className=\"range-slider-tooltip-inner\">\n                    {tooltipsFormat ? tooltipsFormat(value) : value}\n                  </div>\n                  <div className=\"range-slider-tooltip-arrow\"></div>\n                </div>\n              )}\n            </React.Fragment>\n          ))}\n          <div\n            className=\"range-slider-track\"\n            {...(track && {\n              style: updateGradient(min, max, currentValue, vertical, _isRTL),\n            })}\n            ref={trackRef}\n          ></div>\n        </div>\n        {labels && (\n          <div className=\"range-slider-labels-container\" ref={labelsContainerRef}>\n            {Array.isArray(labels) &&\n              labels.map((label: Label, index) => {\n                const labelPosition = calculateLabelPosition(min, max, labels, label, index)\n                const labelValue = getLabelValue(min, max, labels, label, index)\n                const labelStyle = Object.assign(\n                  vertical\n                    ? { bottom: labelPosition }\n                    : _isRTL\n                      ? { right: labelPosition }\n                      : { left: labelPosition },\n                  typeof label === 'object' && 'style' in label && label.style,\n                )\n                return (\n                  <div\n                    className={classNames(\n                      'range-slider-label',\n                      {\n                        clickable: clickableLabels,\n                      },\n                      typeof label === 'object' && 'className' in label && label.className,\n                    )}\n                    style={labelStyle}\n                    onMouseDown={(event) => handleLabelClick(event, labelValue)}\n                    key={index}\n                    ref={(el: HTMLDivElement) => {\n                      labelsRef.current[index] = el\n                    }}\n                  >\n                    {typeof label === 'object' && 'label' in label ? label.label : label}\n                  </div>\n                )\n              })}\n          </div>\n        )}\n      </div>\n    )\n  },\n)\n\nCRangeSlider.propTypes = {\n  clickableLabels: PropTypes.bool,\n  disabled: PropTypes.bool,\n  distance: PropTypes.number,\n  labels: PropTypes.any,\n  max: PropTypes.number,\n  min: PropTypes.number,\n  name: PropTypes.oneOfType([PropTypes.array, PropTypes.string]),\n  step: PropTypes.number,\n  tooltips: PropTypes.bool,\n  tooltipsFormat: PropTypes.func,\n  track: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf<'fill'>(['fill'])]),\n  value: PropTypes.oneOfType([PropTypes.array, PropTypes.number]),\n  vertical: PropTypes.bool,\n}\n\nCRangeSlider.displayName = 'CRangeSlider'\n"]},"metadata":{},"sourceType":"module"}