{"ast":null,"code":"var getAlignmentClassNames = function (alignment) {\n  var classNames = [];\n\n  if (typeof alignment === 'object') {\n    for (var key in alignment) {\n      classNames.push(\"dropdown-menu\".concat(key === 'xs' ? '' : \"-\".concat(key), \"-\").concat(alignment[key]));\n    }\n  }\n\n  if (typeof alignment === 'string') {\n    classNames.push(\"dropdown-menu-\".concat(alignment));\n  }\n\n  return classNames;\n};\n\nvar getPlacement = function (placement, direction, alignment, isRTL) {\n  var _placement = placement;\n\n  if (direction === 'dropup') {\n    _placement = isRTL ? 'top-end' : 'top-start';\n  }\n\n  if (direction === 'dropup-center') {\n    _placement = 'top';\n  }\n\n  if (direction === 'dropend') {\n    _placement = isRTL ? 'left-start' : 'right-start';\n  }\n\n  if (direction === 'dropstart') {\n    _placement = isRTL ? 'right-start' : 'left-start';\n  }\n\n  if (alignment === 'end') {\n    _placement = isRTL ? 'bottom-start' : 'bottom-end';\n  }\n\n  return _placement;\n};\n\nexport { getAlignmentClassNames, getPlacement };","map":{"version":3,"mappings":"AAIO,IAAMA,sBAAsB,GAAG,UAACC,SAAD,EAAsB;AAC1D,MAAMC,UAAU,GAAa,EAA7B;;AACA,MAAI,OAAOD,SAAP,KAAqB,QAAzB,EAAmC;AACjC,SAAK,IAAME,GAAX,IAAkBF,SAAlB,EAA6B;AAC3BC,gBAAU,CAACE,IAAX,CACE,gBAAgBC,MAAhB,CAAgBF,GAAG,KAAK,IAAR,GAAe,EAAf,GAAoB,WAAIA,GAAJ,CAApC,EAAiD,GAAjD,EAAiDE,MAAjD,CAAiDJ,SAAS,CAACE,GAAD,CAA1D,CADF;;;;AAMJ,MAAI,OAAOF,SAAP,KAAqB,QAAzB,EAAmC;AACjCC,cAAU,CAACE,IAAX,CAAgB,wBAAiBH,SAAjB,CAAhB;;;AAGF,SAAOC,UAAP;AACF,CAfO;;AAiBM,gBAAY,GAAG,UAC1BI,SAD0B,EAE1BC,SAF0B,EAG1BN,SAH0B,EAI1BO,KAJ0B,EAIZ;AAEd,MAAIC,UAAU,GAAGH,SAAjB;;AAEA,MAAIC,SAAS,KAAK,QAAlB,EAA4B;AAC1BE,cAAU,GAAGD,KAAK,GAAG,SAAH,GAAe,WAAjC;;;AAGF,MAAID,SAAS,KAAK,eAAlB,EAAmC;AACjCE,cAAU,GAAG,KAAb;;;AAGF,MAAIF,SAAS,KAAK,SAAlB,EAA6B;AAC3BE,cAAU,GAAGD,KAAK,GAAG,YAAH,GAAkB,aAApC;;;AAGF,MAAID,SAAS,KAAK,WAAlB,EAA+B;AAC7BE,cAAU,GAAGD,KAAK,GAAG,aAAH,GAAmB,YAArC;;;AAGF,MAAIP,SAAS,KAAK,KAAlB,EAAyB;AACvBQ,cAAU,GAAGD,KAAK,GAAG,cAAH,GAAoB,YAAtC;;;AAGF,SAAOC,UAAP;AACF,CA7Ba","names":["getAlignmentClassNames","alignment","classNames","key","push","concat","placement","direction","isRTL","_placement"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react\\src\\components\\dropdown\\utils.ts"],"sourcesContent":["import type { Placement } from '@popperjs/core'\nimport type { Placements } from '../../types'\nimport type { Alignments, Breakpoints } from './types'\n\nexport const getAlignmentClassNames = (alignment: Alignments) => {\n  const classNames: string[] = []\n  if (typeof alignment === 'object') {\n    for (const key in alignment) {\n      classNames.push(\n        `dropdown-menu${key === 'xs' ? '' : `-${key}`}-${alignment[key as keyof Breakpoints]}`,\n      )\n    }\n  }\n\n  if (typeof alignment === 'string') {\n    classNames.push(`dropdown-menu-${alignment}`)\n  }\n\n  return classNames\n}\n\nexport const getPlacement = (\n  placement: Placement,\n  direction: string | undefined,\n  alignment: Alignments | string | undefined,\n  isRTL: boolean,\n): Placements => {\n  let _placement = placement\n\n  if (direction === 'dropup') {\n    _placement = isRTL ? 'top-end' : 'top-start'\n  }\n\n  if (direction === 'dropup-center') {\n    _placement = 'top'\n  }\n\n  if (direction === 'dropend') {\n    _placement = isRTL ? 'left-start' : 'right-start'\n  }\n\n  if (direction === 'dropstart') {\n    _placement = isRTL ? 'right-start' : 'left-start'\n  }\n\n  if (alignment === 'end') {\n    _placement = isRTL ? 'bottom-start' : 'bottom-end'\n  }\n\n  return _placement\n}\n"]},"metadata":{},"sourceType":"module"}