{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CAccordionContext } from './CAccordionContext.js';\nvar CAccordion = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      activeItemKey = _a.activeItemKey,\n      _b = _a.alwaysOpen,\n      alwaysOpen = _b === void 0 ? false : _b,\n      className = _a.className,\n      flush = _a.flush,\n      rest = __rest(_a, [\"children\", \"activeItemKey\", \"alwaysOpen\", \"className\", \"flush\"]);\n\n  var _c = useState(activeItemKey),\n      _activeItemKey = _c[0],\n      setActiveKey = _c[1];\n\n  return React.createElement(\"div\", __assign({\n    className: classNames('accordion', {\n      'accordion-flush': flush\n    }, className)\n  }, rest, {\n    ref: ref\n  }), React.createElement(CAccordionContext.Provider, {\n    value: {\n      _activeItemKey: _activeItemKey,\n      alwaysOpen: alwaysOpen,\n      setActiveKey: setActiveKey\n    }\n  }, children));\n});\nCAccordion.propTypes = {\n  activeItemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  alwaysOpen: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  flush: PropTypes.bool\n};\nCAccordion.displayName = 'CAccordion';\nexport { CAccordion };","map":{"version":3,"mappings":";;;;;IAyBaA,UAAU,GAAGC,UAAU,CAClC,UAACC,EAAD,EAA6EC,GAA7E,EAAgF;AAA7E,cAAQ,cAAR;AAAA,MAAUC,aAAa,mBAAvB;AAAA,MAAyBC,kBAAzB;AAAA,MAAyBC,UAAU,GAAGD,wBAAKA,EAA3C;AAAA,MAA6CE,SAAS,eAAtD;AAAA,MAAwDC,KAAK,WAA7D;AAAA,MAAkEC,IAAI,GAAxEC,6EAAE;;AACK,WAAiCC,QAAQ,CAACP,aAAD,CAAzC;AAAA,MAACQ,cAAc,QAAf;AAAA,MAAiBC,YAAY,QAA7B;;AAEN,SACEC;AACEP,aAAS,EAAEQ,UAAU,CAAC,WAAD,EAAc;AAAE,yBAAmBP;AAArB,KAAd,EAA4CD,SAA5C;AADvB,KAEME,IAFN,EAEU;AACRN,OAAG,EAAEA;AADG,GAFV,GAKEW,KAAC,cAAD,CAACE,iBAAiB,CAACC,QAAnB,EAA2B;AAACC,SAAK,EAAE;AAAEN,oBAAc,gBAAhB;AAAkBN,gBAAU,YAA5B;AAA8BO,kBAAY;AAA1C;AAAR,GAA3B,EACGM,QADH,CALF,CADF;AAWD,CAfiC;AAkBpCnB,UAAU,CAACoB,SAAX,GAAuB;AACrBhB,eAAa,EAAEiB,SAAS,CAACC,SAAV,CAAoB,CAACD,SAAS,CAACE,MAAX,EAAmBF,SAAS,CAACG,MAA7B,CAApB,CADM;AAErBlB,YAAU,EAAEe,SAAS,CAACI,IAFD;AAGrBN,UAAQ,EAAEE,SAAS,CAACK,IAHC;AAIrBnB,WAAS,EAAEc,SAAS,CAACG,MAJA;AAKrBhB,OAAK,EAAEa,SAAS,CAACI;AALI,CAAvB;AAQAzB,UAAU,CAAC2B,WAAX,GAAyB,YAAzB","names":["CAccordion","forwardRef","_a","ref","activeItemKey","_b","alwaysOpen","className","flush","rest","__rest","useState","_activeItemKey","setActiveKey","React","classNames","CAccordionContext","Provider","value","children","propTypes","PropTypes","oneOfType","number","string","bool","node","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\accordion\\CAccordion.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CAccordionContext } from './CAccordionContext'\n\nexport interface CAccordionProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * The active item key.\n   */\n  activeItemKey?: number | string\n  /**\n   * Make accordion items stay open when another item is opened\n   */\n  alwaysOpen?: boolean\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Removes the default background-color, some borders, and some rounded corners to render accordions edge-to-edge with their parent container.\n   */\n  flush?: boolean\n}\n\nexport const CAccordion = forwardRef<HTMLDivElement, CAccordionProps>(\n  ({ children, activeItemKey, alwaysOpen = false, className, flush, ...rest }, ref) => {\n    const [_activeItemKey, setActiveKey] = useState(activeItemKey)\n\n    return (\n      <div\n        className={classNames('accordion', { 'accordion-flush': flush }, className)}\n        {...rest}\n        ref={ref}\n      >\n        <CAccordionContext.Provider value={{ _activeItemKey, alwaysOpen, setActiveKey }}>\n          {children}\n        </CAccordionContext.Provider>\n      </div>\n    )\n  },\n)\n\nCAccordion.propTypes = {\n  activeItemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  alwaysOpen: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  flush: PropTypes.bool,\n}\n\nCAccordion.displayName = 'CAccordion'\n"]},"metadata":{},"sourceType":"module"}