{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nvar CSidebarBrand = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      _b = _a.as,\n      Component = _b === void 0 ? 'a' : _b,\n      className = _a.className,\n      rest = __rest(_a, [\"children\", \"as\", \"className\"]);\n\n  return React.createElement(Component, __assign({\n    className: classNames('sidebar-brand', className),\n    ref: ref\n  }, rest), children);\n});\nCSidebarBrand.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string\n};\nCSidebarBrand.displayName = 'CSidebarBrand';\nexport { CSidebarBrand };","map":{"version":3,"mappings":";;;;IAmBaA,aAAa,GAA+DC,UAAU,CAGjG,UAACC,EAAD,EAAwDC,GAAxD,EAA2D;AAAxD,cAAQ,cAAR;AAAA,MAAUC,EAAmB,QAA7B;AAAA,MAAcC,SAAS,GAAGD,sBAAGA,EAA7B;AAAA,MAA+BE,SAAS,eAAxC;AAAA,MAA6CC,IAAI,cAAnD,+BAAmD,CAAjD;;AACH,SACEC,oBAACH,SAAD,EAAUI;AAACH,aAAS,EAAEI,UAAU,CAAC,eAAD,EAAkBJ,SAAlB,CAAtB;AAAoDH,OAAG,EAAEA;AAAzD,KAAkEI,IAAlE,CAAV,EACGI,QADH,CADF;AAKD,CATkG;AAWnGX,aAAa,CAACY,SAAd,GAA0B;AACxBC,IAAE,EAAEC,SAAS,CAACC,WADU;AAExBJ,UAAQ,EAAEG,SAAS,CAACE,IAFI;AAGxBV,WAAS,EAAEQ,SAAS,CAACG;AAHG,CAA1B;AAMAjB,aAAa,CAACkB,WAAd,GAA4B,eAA5B","names":["CSidebarBrand","forwardRef","_a","ref","_b","Component","className","rest","React","__assign","classNames","children","propTypes","as","PropTypes","elementType","node","string","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react\\src\\components\\sidebar\\CSidebarBrand.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CSidebarBrandProps extends HTMLAttributes<HTMLAnchorElement | HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   *\n   * @since 5.0.0\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CSidebarBrand: PolymorphicRefForwardingComponent<'a', CSidebarBrandProps> = forwardRef<\n  HTMLAnchorElement | HTMLDivElement,\n  CSidebarBrandProps\n>(({ children, as: Component = 'a', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('sidebar-brand', className)} ref={ref} {...rest}>\n      {children}\n    </Component>\n  )\n})\n\nCSidebarBrand.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCSidebarBrand.displayName = 'CSidebarBrand'\n"]},"metadata":{},"sourceType":"module"}