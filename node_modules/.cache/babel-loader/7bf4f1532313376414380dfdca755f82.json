{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useRef, useState, useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CBackdrop } from '../backdrop/CBackdrop.js';\nimport isInViewport from '../../utils/isInViewport.js';\nimport { useForkedRef } from '../../hooks/useForkedRef.js';\nimport '@popperjs/core';\n\nvar isOnMobile = function (element) {\n  return Boolean(getComputedStyle(element).getPropertyValue('--cui-is-mobile'));\n};\n\nvar CSidebar = forwardRef(function (_a, ref) {\n  var _b;\n\n  var children = _a.children,\n      _c = _a.as,\n      Component = _c === void 0 ? 'div' : _c,\n      className = _a.className,\n      colorScheme = _a.colorScheme,\n      narrow = _a.narrow,\n      onHide = _a.onHide,\n      onShow = _a.onShow,\n      onVisibleChange = _a.onVisibleChange,\n      overlaid = _a.overlaid,\n      placement = _a.placement,\n      position = _a.position,\n      size = _a.size,\n      unfoldable = _a.unfoldable,\n      visible = _a.visible,\n      rest = __rest(_a, [\"children\", \"as\", \"className\", \"colorScheme\", \"narrow\", \"onHide\", \"onShow\", \"onVisibleChange\", \"overlaid\", \"placement\", \"position\", \"size\", \"unfoldable\", \"visible\"]);\n\n  var sidebarRef = useRef(null);\n  var forkedRef = useForkedRef(ref, sidebarRef);\n\n  var _d = useState(),\n      inViewport = _d[0],\n      setInViewport = _d[1];\n\n  var _e = useState(false),\n      mobile = _e[0],\n      setMobile = _e[1];\n\n  var _f = useState(false),\n      visibleMobile = _f[0],\n      setVisibleMobile = _f[1];\n\n  var _g = useState(visible !== undefined ? visible : overlaid ? false : true),\n      visibleDesktop = _g[0],\n      setVisibleDesktop = _g[1];\n\n  useEffect(function () {\n    sidebarRef.current && setMobile(isOnMobile(sidebarRef.current));\n    visible !== undefined && handleVisibleChange(visible);\n  }, [visible]);\n  useEffect(function () {\n    inViewport !== undefined && onVisibleChange && onVisibleChange(inViewport);\n    !inViewport && onHide && onHide();\n    inViewport && onShow && onShow();\n  }, [inViewport]);\n  useEffect(function () {\n    mobile && setVisibleMobile(false);\n  }, [mobile]);\n  useEffect(function () {\n    var _a, _b;\n\n    sidebarRef.current && setMobile(isOnMobile(sidebarRef.current));\n    sidebarRef.current && setInViewport(isInViewport(sidebarRef.current));\n    window.addEventListener('resize', handleResize);\n    window.addEventListener('mouseup', handleClickOutside);\n    window.addEventListener('keyup', handleKeyup);\n    (_a = sidebarRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener('mouseup', handleOnClick);\n    (_b = sidebarRef.current) === null || _b === void 0 ? void 0 : _b.addEventListener('transitionend', function () {\n      sidebarRef.current && setInViewport(isInViewport(sidebarRef.current));\n    });\n    return function () {\n      var _a, _b;\n\n      window.removeEventListener('resize', handleResize);\n      window.removeEventListener('mouseup', handleClickOutside);\n      window.removeEventListener('keyup', handleKeyup);\n      (_a = sidebarRef.current) === null || _a === void 0 ? void 0 : _a.removeEventListener('mouseup', handleOnClick);\n      (_b = sidebarRef.current) === null || _b === void 0 ? void 0 : _b.removeEventListener('transitionend', function () {\n        sidebarRef.current && setInViewport(isInViewport(sidebarRef.current));\n      });\n    };\n  });\n\n  var handleVisibleChange = function (visible) {\n    if (mobile) {\n      setVisibleMobile(visible);\n      return;\n    }\n\n    setVisibleDesktop(visible);\n  };\n\n  var handleHide = function () {\n    handleVisibleChange(false);\n  };\n\n  var handleResize = function () {\n    sidebarRef.current && setMobile(isOnMobile(sidebarRef.current));\n    sidebarRef.current && setInViewport(isInViewport(sidebarRef.current));\n  };\n\n  var handleKeyup = function (event) {\n    if (mobile && sidebarRef.current && !sidebarRef.current.contains(event.target)) {\n      handleHide();\n    }\n  };\n\n  var handleClickOutside = function (event) {\n    if (mobile && sidebarRef.current && !sidebarRef.current.contains(event.target)) {\n      handleHide();\n    }\n  };\n\n  var handleOnClick = function (event) {\n    var target = event.target;\n    target && target.classList.contains('nav-link') && !target.classList.contains('nav-group-toggle') && mobile && handleHide();\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Component, __assign({\n    className: classNames('sidebar', (_b = {}, _b[\"sidebar-\".concat(colorScheme)] = colorScheme, _b['sidebar-narrow'] = narrow, _b['sidebar-overlaid'] = overlaid, _b[\"sidebar-\".concat(placement)] = placement, _b[\"sidebar-\".concat(position)] = position, _b[\"sidebar-\".concat(size)] = size, _b['sidebar-narrow-unfoldable'] = unfoldable, _b.show = mobile && visibleMobile || overlaid && visibleDesktop, _b.hide = visibleDesktop === false && !mobile && !overlaid, _b), className)\n  }, rest, {\n    ref: forkedRef\n  }), children), typeof window !== 'undefined' && mobile && createPortal(React.createElement(CBackdrop, {\n    className: \"sidebar-backdrop\",\n    visible: mobile && visibleMobile\n  }), document.body));\n});\nCSidebar.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  colorScheme: PropTypes.oneOf(['dark', 'light']),\n  narrow: PropTypes.bool,\n  onHide: PropTypes.func,\n  onShow: PropTypes.func,\n  onVisibleChange: PropTypes.func,\n  overlaid: PropTypes.bool,\n  placement: PropTypes.oneOf(['start', 'end']),\n  position: PropTypes.oneOf(['fixed', 'sticky']),\n  size: PropTypes.oneOf(['sm', 'lg', 'xl']),\n  unfoldable: PropTypes.bool,\n  visible: PropTypes.bool\n};\nCSidebar.displayName = 'CSidebar';\nexport { CSidebar };","map":{"version":3,"mappings":"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","names":["isOnMobile","element","getComputedStyle","getPropertyValue","CSidebar","forwardRef","_a","ref","_c","Component","className","colorScheme","narrow","onHide","onShow","onVisibleChange","overlaid","placement","position","size","unfoldable","visible","rest","__rest","sidebarRef","useRef","forkedRef","useForkedRef","useState","inViewport","setInViewport","mobile","setMobile","visibleMobile","setVisibleMobile","undefined","visibleDesktop","setVisibleDesktop","useEffect","current","handleVisibleChange","isInViewport","window","addEventListener","handleResize","handleClickOutside","handleKeyup","handleOnClick","_b","removeEventListener","handleHide","event","contains","target","classList","React","__assign","classNames","concat","children","createPortal","CBackdrop","document","body","propTypes","as","PropTypes","elementType","node","string","oneOf","bool","func","displayName"],"sources":["C:\\wamp64\\www\\Movie\\node_modules\\@coreui\\react\\src\\components\\sidebar\\CSidebar.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, HTMLAttributes, useEffect, useRef, useState } from 'react'\nimport { createPortal } from 'react-dom'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CBackdrop } from '../backdrop'\n\nimport { isInViewport } from '../../utils'\nimport { useForkedRef } from '../../hooks'\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CSidebarProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets if the color of text should be colored for a light or dark dark background.\n   *\n   * @type 'dark' | 'light'\n   */\n  colorScheme?: 'dark' | 'light'\n  /**\n   * Make sidebar narrow.\n   */\n  narrow?: boolean\n  /**\n   * Callback fired when the component requests to be hidden.\n   */\n  onHide?: () => void\n  /**\n   * Callback fired when the component requests to be shown.\n   */\n  onShow?: () => void\n  /**\n   * Event emitted after visibility of component changed.\n   */\n  onVisibleChange?: (visible: boolean) => void\n  /**\n   * Set sidebar to overlaid variant.\n   */\n  overlaid?: boolean\n  /**\n   * Components placement, there’s no default placement.\n   * @type 'start' | 'end'\n   */\n  placement?: 'start' | 'end'\n  /**\n   * Place sidebar in non-static positions.\n   */\n  position?: 'fixed' | 'sticky'\n  /**\n   * Size the component small, large, or extra large.\n   */\n  size?: 'sm' | 'lg' | 'xl'\n  /**\n   * Expand narrowed sidebar on hover.\n   */\n  unfoldable?: boolean\n  /**\n   * Toggle the visibility of sidebar component.\n   */\n  visible?: boolean\n}\n\nconst isOnMobile = (element: HTMLDivElement) =>\n  Boolean(getComputedStyle(element).getPropertyValue('--cui-is-mobile'))\n\nexport const CSidebar: PolymorphicRefForwardingComponent<'div', CSidebarProps> = forwardRef<\n  HTMLDivElement,\n  CSidebarProps\n>(\n  (\n    {\n      children,\n      as: Component = 'div',\n      className,\n      colorScheme,\n      narrow,\n      onHide,\n      onShow,\n      onVisibleChange,\n      overlaid,\n      placement,\n      position,\n      size,\n      unfoldable,\n      visible,\n      ...rest\n    },\n    ref,\n  ) => {\n    const sidebarRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, sidebarRef)\n\n    const [inViewport, setInViewport] = useState<boolean>()\n    const [mobile, setMobile] = useState(false)\n    const [visibleMobile, setVisibleMobile] = useState<boolean>(false)\n    const [visibleDesktop, setVisibleDesktop] = useState<boolean>(\n      visible !== undefined ? visible : overlaid ? false : true,\n    )\n\n    useEffect(() => {\n      sidebarRef.current && setMobile(isOnMobile(sidebarRef.current))\n      visible !== undefined && handleVisibleChange(visible)\n    }, [visible])\n\n    useEffect(() => {\n      inViewport !== undefined && onVisibleChange && onVisibleChange(inViewport)\n      !inViewport && onHide && onHide()\n      inViewport && onShow && onShow()\n    }, [inViewport])\n\n    useEffect(() => {\n      mobile && setVisibleMobile(false)\n    }, [mobile])\n\n    useEffect(() => {\n      sidebarRef.current && setMobile(isOnMobile(sidebarRef.current))\n      sidebarRef.current && setInViewport(isInViewport(sidebarRef.current))\n\n      window.addEventListener('resize', handleResize)\n      window.addEventListener('mouseup', handleClickOutside)\n      window.addEventListener('keyup', handleKeyup)\n\n      sidebarRef.current?.addEventListener('mouseup', handleOnClick)\n      sidebarRef.current?.addEventListener('transitionend', () => {\n        sidebarRef.current && setInViewport(isInViewport(sidebarRef.current))\n      })\n\n      return () => {\n        window.removeEventListener('resize', handleResize)\n        window.removeEventListener('mouseup', handleClickOutside)\n        window.removeEventListener('keyup', handleKeyup)\n\n        sidebarRef.current?.removeEventListener('mouseup', handleOnClick)\n        sidebarRef.current?.removeEventListener('transitionend', () => {\n          sidebarRef.current && setInViewport(isInViewport(sidebarRef.current))\n        })\n      }\n    })\n\n    const handleVisibleChange = (visible: boolean) => {\n      if (mobile) {\n        setVisibleMobile(visible)\n        return\n      }\n\n      setVisibleDesktop(visible)\n    }\n\n    const handleHide = () => {\n      handleVisibleChange(false)\n    }\n\n    const handleResize = () => {\n      sidebarRef.current && setMobile(isOnMobile(sidebarRef.current))\n      sidebarRef.current && setInViewport(isInViewport(sidebarRef.current))\n    }\n\n    const handleKeyup = (event: Event) => {\n      if (\n        mobile &&\n        sidebarRef.current &&\n        !sidebarRef.current.contains(event.target as HTMLElement)\n      ) {\n        handleHide()\n      }\n    }\n    const handleClickOutside = (event: Event) => {\n      if (\n        mobile &&\n        sidebarRef.current &&\n        !sidebarRef.current.contains(event.target as HTMLElement)\n      ) {\n        handleHide()\n      }\n    }\n\n    const handleOnClick = (event: Event) => {\n      const target = event.target as HTMLAnchorElement\n      target &&\n        target.classList.contains('nav-link') &&\n        !target.classList.contains('nav-group-toggle') &&\n        mobile &&\n        handleHide()\n    }\n\n    return (\n      <>\n        <Component\n          className={classNames(\n            'sidebar',\n            {\n              [`sidebar-${colorScheme}`]: colorScheme,\n              'sidebar-narrow': narrow,\n              'sidebar-overlaid': overlaid,\n              [`sidebar-${placement}`]: placement,\n              [`sidebar-${position}`]: position,\n              [`sidebar-${size}`]: size,\n              'sidebar-narrow-unfoldable': unfoldable,\n              show: (mobile && visibleMobile) || (overlaid && visibleDesktop),\n              hide: visibleDesktop === false && !mobile && !overlaid,\n            },\n            className,\n          )}\n          {...rest}\n          ref={forkedRef}\n        >\n          {children}\n        </Component>\n        {typeof window !== 'undefined' &&\n          mobile &&\n          createPortal(\n            <CBackdrop className=\"sidebar-backdrop\" visible={mobile && visibleMobile} />,\n            document.body,\n          )}\n      </>\n    )\n  },\n)\n\nCSidebar.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  colorScheme: PropTypes.oneOf(['dark', 'light']),\n  narrow: PropTypes.bool,\n  onHide: PropTypes.func,\n  onShow: PropTypes.func,\n  onVisibleChange: PropTypes.func,\n  overlaid: PropTypes.bool,\n  placement: PropTypes.oneOf(['start', 'end']),\n  position: PropTypes.oneOf(['fixed', 'sticky']),\n  size: PropTypes.oneOf(['sm', 'lg', 'xl']),\n  unfoldable: PropTypes.bool,\n  visible: PropTypes.bool,\n}\n\nCSidebar.displayName = 'CSidebar'"]},"metadata":{},"sourceType":"module"}