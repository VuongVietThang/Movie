{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { CCard } from '../card/CCard.js';\nimport { CCardBody } from '../card/CCardBody.js';\nimport '../card/CCardFooter.js';\nimport '../card/CCardGroup.js';\nimport '../card/CCardHeader.js';\nimport '../card/CCardImage.js';\nimport '../card/CCardImageOverlay.js';\nimport '../card/CCardLink.js';\nimport '../card/CCardSubtitle.js';\nimport '../card/CCardText.js';\nimport '../card/CCardTitle.js';\nimport { CProgress } from '../progress/CProgress.js';\nimport { colorPropType } from '../../props.js';\nimport classNames from '../../_virtual/index.js';\nvar CWidgetStatsC = forwardRef(function (_a, ref) {\n  var className = _a.className,\n      color = _a.color,\n      icon = _a.icon,\n      inverse = _a.inverse,\n      progress = _a.progress,\n      title = _a.title,\n      value = _a.value,\n      rest = __rest(_a, [\"className\", \"color\", \"icon\", \"inverse\", \"progress\", \"title\", \"value\"]);\n\n  return React.createElement(CCard, __assign({\n    className: className,\n    color: color\n  }, inverse && {\n    textColor: 'white'\n  }, rest, {\n    ref: ref\n  }), React.createElement(CCardBody, null, icon && React.createElement(\"div\", {\n    className: classNames('text-end mb-4', inverse ? 'text-white text-opacity-75' : 'text-body-secondary')\n  }, icon), value && React.createElement(\"div\", {\n    className: \"fs-4 fw-semibold\"\n  }, value), title && React.createElement(\"div\", {\n    className: inverse ? 'text-white text-opacity-75' : 'text-body-secondary'\n  }, title), React.createElement(CProgress, __assign({\n    className: \"mt-3 mb-0\",\n    height: 4\n  }, inverse && {\n    white: true\n  }, progress))));\n});\nCWidgetStatsC.propTypes = {\n  className: PropTypes.string,\n  color: colorPropType,\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  inverse: PropTypes.bool,\n  progress: PropTypes.object,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.node, PropTypes.number])\n};\nCWidgetStatsC.displayName = 'CWidgetStatsCWidgetStatsC';\nexport { CWidgetStatsC };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;IA6CaA,aAAa,GAAGC,UAAU,CACrC,UAACC,EAAD,EAAuEC,GAAvE,EAA0E;AAAvE,eAAS,eAAT;AAAA,MAAWC,KAAK,WAAhB;AAAA,MAAkBC,IAAI,UAAtB;AAAA,MAAwBC,OAAO,aAA/B;AAAA,MAAiCC,QAAQ,cAAzC;AAAA,MAA2CC,KAAK,WAAhD;AAAA,MAAkDC,KAAK,WAAvD;AAAA,MAA4DC,IAAI,GAAlEC,mFAAE;;AACD,SACEC,KAAC,cAAD,CAACC,KAAD,EACEC;AAAAC,aAAS,EAAEA,SAAX;AACAX,SAAK,EAAEA;AADP,KAEKE,OAAO,IAAI;AAAEU,aAAS,EAAE;AAAb,GAFhB,EAGIN,IAHJ,EAGQ;AACRP,OAAG,EAAEA;AADG,GAHR,CADF,EAOES,oBAACK,SAAD,EAAU,IAAV,EACGZ,IAAI,IACHO,KACE,cADF,CACE,KADF,EACE;AAAAG,aAAS,EAAEG,UAAU,CACnB,eADmB,EAEnBZ,OAAO,GAAG,4BAAH,GAAkC,qBAFtB;AAArB,GADF,EAMGD,IANH,CAFJ,EAWGI,KAAK,IAAIG,KAAK,cAAL,CAAK,KAAL,EAAK;AAAAG,aAAS,EAAC;AAAV,GAAL,EAAmCN,KAAnC,CAXZ,EAYGD,KAAK,IACJI;AAAKG,aAAS,EAAET,OAAO,GAAG,4BAAH,GAAkC;AAAzD,KACGE,KADH,CAbJ,EAiBEI,KAAC,cAAD,CAACO,SAAD,EACEL;AAAAC,aAAS,EAAC,WAAV;AACAK,UAAM,EAAE;AADR,KAEKd,OAAO,IAAI;AAAEe,SAAK,EAAE;AAAT,GAFhB,EAGId,QAHJ,CADF,CAjBF,CAPF,CADF;AAkCD,CApCoC;AAuCvCP,aAAa,CAACsB,SAAd,GAA0B;AACxBP,WAAS,EAAEQ,SAAS,CAACC,MADG;AAExBpB,OAAK,EAAEqB,aAFiB;AAGxBpB,MAAI,EAAEkB,SAAS,CAACG,SAAV,CAAoB,CAACH,SAAS,CAACC,MAAX,EAAmBD,SAAS,CAACI,IAA7B,CAApB,CAHkB;AAIxBrB,SAAO,EAAEiB,SAAS,CAACK,IAJK;AAKxBrB,UAAQ,EAAEgB,SAAS,CAACM,MALI;AAMxBrB,OAAK,EAAEe,SAAS,CAACG,SAAV,CAAoB,CAACH,SAAS,CAACC,MAAX,EAAmBD,SAAS,CAACI,IAA7B,CAApB,CANiB;AAOxBlB,OAAK,EAAEc,SAAS,CAACG,SAAV,CAAoB,CAACH,SAAS,CAACC,MAAX,EAAmBD,SAAS,CAACI,IAA7B,EAAmCJ,SAAS,CAACO,MAA7C,CAApB;AAPiB,CAA1B;AAUA9B,aAAa,CAAC+B,WAAd,GAA4B,2BAA5B","names":["CWidgetStatsC","forwardRef","_a","ref","color","icon","inverse","progress","title","value","rest","__rest","React","CCard","__assign","className","textColor","CCardBody","classNames","CProgress","height","white","propTypes","PropTypes","string","colorPropType","oneOfType","node","bool","object","number","displayName"],"sources":["C:\\wamp64\\www\\Movie\\node_modules\\@coreui\\react\\src\\components\\widgets\\CWidgetStatsC.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CCard, CCardBody } from '../card'\nimport { CProgress, CProgressProps } from '../progress/CProgress'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\nimport classNames from 'classnames'\n\nexport interface CWidgetStatsCProps extends Omit<HTMLAttributes<HTMLDivElement>, 'title'> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Icon node for your component.\n   */\n  icon?: string | ReactNode\n  /**\n   * Colors have been inverted from their default dark shade.\n   */\n  inverse?: boolean\n  /**\n   * Sets the color context of the progress bar to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  progress?: CProgressProps\n  /**\n   * Title node for your component.\n   */\n  title?: string | ReactNode\n  /**\n   * Value node for your component.\n   */\n  value?: string | number | ReactNode\n}\n\nexport const CWidgetStatsC = forwardRef<HTMLDivElement, CWidgetStatsCProps>(\n  ({ className, color, icon, inverse, progress, title, value, ...rest }, ref) => {\n    return (\n      <CCard\n        className={className}\n        color={color}\n        {...(inverse && { textColor: 'white' })}\n        {...rest}\n        ref={ref}\n      >\n        <CCardBody>\n          {icon && (\n            <div\n              className={classNames(\n                'text-end mb-4',\n                inverse ? 'text-white text-opacity-75' : 'text-body-secondary',\n              )}\n            >\n              {icon}\n            </div>\n          )}\n          {value && <div className=\"fs-4 fw-semibold\">{value}</div>}\n          {title && (\n            <div className={inverse ? 'text-white text-opacity-75' : 'text-body-secondary'}>\n              {title}\n            </div>\n          )}\n          <CProgress\n            className=\"mt-3 mb-0\"\n            height={4}\n            {...(inverse && { white: true })}\n            {...progress}\n          />\n        </CCardBody>\n      </CCard>\n    )\n  },\n)\n\nCWidgetStatsC.propTypes = {\n  className: PropTypes.string,\n  color: colorPropType,\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  inverse: PropTypes.bool,\n  progress: PropTypes.object,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.node, PropTypes.number]),\n}\n\nCWidgetStatsC.displayName = 'CWidgetStatsCWidgetStatsC'\n"]},"metadata":{},"sourceType":"module"}