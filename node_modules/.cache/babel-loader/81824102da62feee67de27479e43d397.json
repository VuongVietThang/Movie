{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CBackdrop } from '../backdrop/CBackdrop.js';\nimport { CConditionalPortal } from '../conditional-portal/CConditionalPortal.js';\nimport { useForkedRef } from '../../hooks/useForkedRef.js';\nimport '@popperjs/core';\nimport Transition from '../../node_modules/react-transition-group/esm/Transition.js';\nvar COffcanvas = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      _b = _a.backdrop,\n      backdrop = _b === void 0 ? true : _b,\n      className = _a.className,\n      dark = _a.dark,\n      _c = _a.keyboard,\n      keyboard = _c === void 0 ? true : _c,\n      onHide = _a.onHide,\n      onShow = _a.onShow,\n      placement = _a.placement,\n      _d = _a.portal,\n      portal = _d === void 0 ? false : _d,\n      _e = _a.responsive,\n      responsive = _e === void 0 ? true : _e,\n      _f = _a.scroll,\n      scroll = _f === void 0 ? false : _f,\n      _g = _a.visible,\n      visible = _g === void 0 ? false : _g,\n      rest = __rest(_a, [\"children\", \"backdrop\", \"className\", \"dark\", \"keyboard\", \"onHide\", \"onShow\", \"placement\", \"portal\", \"responsive\", \"scroll\", \"visible\"]);\n\n  var _h = useState(visible),\n      _visible = _h[0],\n      setVisible = _h[1];\n\n  var offcanvasRef = useRef(null);\n  var forkedRef = useForkedRef(ref, offcanvasRef);\n  useEffect(function () {\n    setVisible(visible);\n  }, [visible]);\n  useEffect(function () {\n    if (_visible && !scroll) {\n      document.body.style.overflow = 'hidden';\n      document.body.style.paddingRight = '0px';\n      return;\n    }\n\n    if (!scroll) {\n      document.body.style.removeProperty('overflow');\n      document.body.style.removeProperty('padding-right');\n    }\n  }, [_visible]);\n\n  var handleDismiss = function () {\n    setVisible(false);\n  };\n\n  var handleBackdropDismiss = function () {\n    if (backdrop !== 'static') {\n      setVisible(false);\n    }\n  };\n\n  var handleKeyDown = function (event) {\n    if (event.key === 'Escape' && keyboard) {\n      return handleDismiss();\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Transition, {\n    in: _visible,\n    nodeRef: offcanvasRef,\n    onEnter: onShow,\n    onEntered: function () {\n      var _a;\n\n      return (_a = offcanvasRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    },\n    onExit: onHide,\n    timeout: 300\n  }, function (state) {\n    var _a;\n\n    return React.createElement(CConditionalPortal, {\n      portal: portal\n    }, React.createElement(\"div\", __assign({\n      className: classNames((_a = {}, _a[\"offcanvas\".concat(typeof responsive === 'string' ? '-' + responsive : '')] = responsive, _a[\"offcanvas-\".concat(placement)] = placement, _a.showing = state === 'entering', _a.show = state === 'entered', _a['show hiding'] = state === 'exiting', _a), className),\n      role: \"dialog\",\n      tabIndex: -1,\n      onKeyDown: handleKeyDown\n    }, dark && {\n      'data-coreui-theme': 'dark'\n    }, rest, {\n      ref: forkedRef\n    }), children));\n  }), backdrop && React.createElement(CConditionalPortal, {\n    portal: portal\n  }, React.createElement(CBackdrop, {\n    className: \"offcanvas-backdrop\",\n    onClick: handleBackdropDismiss,\n    visible: _visible\n  })));\n});\nCOffcanvas.propTypes = {\n  backdrop: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['static'])]),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  dark: PropTypes.bool,\n  keyboard: PropTypes.bool,\n  onHide: PropTypes.func,\n  onShow: PropTypes.func,\n  placement: PropTypes.oneOf(['start', 'end', 'top', 'bottom']).isRequired,\n  portal: PropTypes.bool,\n  responsive: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['sm', 'md', 'lg', 'xl', 'xxl'])]),\n  scroll: PropTypes.bool,\n  visible: PropTypes.bool\n};\nCOffcanvas.displayName = 'COffcanvas';\nexport { COffcanvas };","map":{"version":3,"mappings":"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","names":["COffcanvas","forwardRef","_a","ref","_b","backdrop","className","dark","_c","keyboard","onHide","onShow","placement","_d","portal","_e","responsive","_f","scroll","_g","visible","rest","useState","_visible","setVisible","offcanvasRef","useRef","forkedRef","useForkedRef","useEffect","document","body","style","overflow","paddingRight","removeProperty","handleDismiss","handleBackdropDismiss","handleKeyDown","event","key","React","Transition","in","nodeRef","onEnter","onEntered","current","focus","onExit","timeout","state","CConditionalPortal","__assign","classNames","concat","role","tabIndex","onKeyDown","children","CBackdrop","onClick","propTypes","PropTypes","oneOfType","bool","oneOf","node","string","func","isRequired","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react\\src\\components\\offcanvas\\COffcanvas.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes, useEffect, useRef, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { Transition } from 'react-transition-group'\n\nimport { CBackdrop } from '../backdrop'\nimport { CConditionalPortal } from '../conditional-portal'\n\nimport { useForkedRef } from '../../hooks'\n\nexport interface COffcanvasProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Apply a backdrop on body while offcanvas is open.\n   */\n  backdrop?: boolean | 'static'\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets a darker color scheme.\n   */\n  dark?: boolean\n  /**\n   * Closes the offcanvas when escape key is pressed.\n   */\n  keyboard?: boolean\n  /**\n   * Callback fired when the component requests to be hidden.\n   */\n  onHide?: () => void\n  /**\n   * Callback fired when the component requests to be shown.\n   */\n  onShow?: () => void\n  /**\n   * Components placement, thereâ€™s no default placement.\n   */\n  placement: 'start' | 'end' | 'top' | 'bottom'\n  /**\n   * Generates modal using createPortal.\n   */\n  portal?: boolean\n  /**\n   * Responsive offcanvas property hide content outside the viewport from a specified breakpoint and down.\n   *\n   * @since 4.6.0\n   */\n  responsive?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n  /**\n   * Allow body scrolling while offcanvas is open\n   */\n  scroll?: boolean\n  /**\n   * Toggle the visibility of offcanvas component.\n   */\n  visible?: boolean\n}\n\nexport const COffcanvas = forwardRef<HTMLDivElement, COffcanvasProps>(\n  (\n    {\n      children,\n      backdrop = true,\n      className,\n      dark,\n      keyboard = true,\n      onHide,\n      onShow,\n      placement,\n      portal = false,\n      responsive = true,\n      scroll = false,\n      visible = false,\n      ...rest\n    },\n    ref,\n  ) => {\n    const [_visible, setVisible] = useState<boolean>(visible)\n    const offcanvasRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, offcanvasRef)\n\n    useEffect(() => {\n      setVisible(visible)\n    }, [visible])\n\n    useEffect(() => {\n      if (_visible && !scroll) {\n        document.body.style.overflow = 'hidden'\n        document.body.style.paddingRight = '0px'\n        return\n      }\n\n      if (!scroll) {\n        document.body.style.removeProperty('overflow')\n        document.body.style.removeProperty('padding-right')\n      }\n    }, [_visible])\n\n    const handleDismiss = () => {\n      setVisible(false)\n    }\n\n    const handleBackdropDismiss = () => {\n      if (backdrop !== 'static') {\n        setVisible(false)\n      }\n    }\n\n    const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === 'Escape' && keyboard) {\n        return handleDismiss()\n      }\n    }\n\n    return (\n      <>\n        <Transition\n          in={_visible}\n          nodeRef={offcanvasRef}\n          onEnter={onShow}\n          onEntered={() => offcanvasRef.current?.focus()}\n          onExit={onHide}\n          timeout={300}\n        >\n          {(state) => (\n            <CConditionalPortal portal={portal}>\n              <div\n                className={classNames(\n                  {\n                    [`offcanvas${typeof responsive === 'string' ? '-' + responsive : ''}`]:\n                      responsive,\n                    [`offcanvas-${placement}`]: placement,\n                    showing: state === 'entering',\n                    show: state === 'entered',\n                    'show hiding': state === 'exiting',\n                  },\n                  className,\n                )}\n                role=\"dialog\"\n                tabIndex={-1}\n                onKeyDown={handleKeyDown}\n                {...(dark && { 'data-coreui-theme': 'dark' })}\n                {...rest}\n                ref={forkedRef}\n              >\n                {children}\n              </div>\n            </CConditionalPortal>\n          )}\n        </Transition>\n        {backdrop && (\n          <CConditionalPortal portal={portal}>\n            <CBackdrop\n              className=\"offcanvas-backdrop\"\n              onClick={handleBackdropDismiss}\n              visible={_visible}\n            />\n          </CConditionalPortal>\n        )}\n      </>\n    )\n  },\n)\n\nCOffcanvas.propTypes = {\n  backdrop: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf<'static'>(['static'])]),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  dark: PropTypes.bool,\n  keyboard: PropTypes.bool,\n  onHide: PropTypes.func,\n  onShow: PropTypes.func,\n  placement: PropTypes.oneOf<'start' | 'end' | 'top' | 'bottom'>(['start', 'end', 'top', 'bottom'])\n    .isRequired,\n  portal: PropTypes.bool,\n  responsive: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n  scroll: PropTypes.bool,\n  visible: PropTypes.bool,\n}\n\nCOffcanvas.displayName = 'COffcanvas'\n"]},"metadata":{},"sourceType":"module"}