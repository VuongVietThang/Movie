{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CFormControlWrapper } from '../form/CFormControlWrapper.js';\nvar CPasswordInput = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      _b = _a.ariaLabelToggler,\n      ariaLabelToggler = _b === void 0 ? 'Toggle password visibility' : _b,\n      className = _a.className,\n      _c = _a.delay,\n      delay = _c === void 0 ? false : _c,\n      feedback = _a.feedback,\n      feedbackInvalid = _a.feedbackInvalid,\n      feedbackValid = _a.feedbackValid,\n      floatingClassName = _a.floatingClassName,\n      floatingLabel = _a.floatingLabel,\n      id = _a.id,\n      invalid = _a.invalid,\n      label = _a.label,\n      onChange = _a.onChange,\n      _d = _a.showPassword,\n      showPasswordProp = _d === void 0 ? false : _d,\n      size = _a.size,\n      text = _a.text,\n      tooltipFeedback = _a.tooltipFeedback,\n      valid = _a.valid,\n      rest = __rest(_a, [\"children\", \"ariaLabelToggler\", \"className\", \"delay\", \"feedback\", \"feedbackInvalid\", \"feedbackValid\", \"floatingClassName\", \"floatingLabel\", \"id\", \"invalid\", \"label\", \"onChange\", \"showPassword\", \"size\", \"text\", \"tooltipFeedback\", \"valid\"]);\n\n  var _e = useState(),\n      value = _e[0],\n      setValue = _e[1];\n\n  var _f = useState(showPasswordProp),\n      showPassword = _f[0],\n      setShowPassword = _f[1];\n\n  useEffect(function () {\n    var timeOutId = setTimeout(function () {\n      return value && onChange && onChange(value);\n    }, typeof delay === 'number' ? delay : 500);\n    return function () {\n      return clearTimeout(timeOutId);\n    };\n  }, [value]);\n  useEffect(function () {\n    setShowPassword(showPasswordProp);\n  }, [showPasswordProp]);\n\n  var renderInputAndButton = function () {\n    var _a;\n\n    return React.createElement(React.Fragment, null, React.createElement(\"input\", __assign({\n      className: classNames('form-control', (_a = {}, _a[\"form-control-\".concat(size)] = size, _a['is-invalid'] = invalid, _a['is-valid'] = valid, _a), className),\n      id: id,\n      type: showPassword ? 'text' : 'password',\n      onChange: function (event) {\n        return delay ? setValue(event) : onChange === null || onChange === void 0 ? void 0 : onChange(event);\n      }\n    }, rest, {\n      ref: ref\n    }), children), React.createElement(\"button\", {\n      type: \"button\",\n      className: \"form-password-action\",\n      \"data-coreui-toggle\": \"password\",\n      \"aria-label\": ariaLabelToggler,\n      onClick: function () {\n        return setShowPassword(function (prev) {\n          return !prev;\n        });\n      }\n    }, React.createElement(\"span\", {\n      className: \"form-password-action-icon\"\n    })));\n  };\n\n  return React.createElement(CFormControlWrapper, {\n    describedby: rest['aria-describedby'],\n    feedback: feedback,\n    feedbackInvalid: feedbackInvalid,\n    feedbackValid: feedbackValid,\n    floatingClassName: classNames('form-password', floatingClassName),\n    floatingLabel: floatingLabel,\n    id: id,\n    invalid: invalid,\n    label: label,\n    text: text,\n    tooltipFeedback: tooltipFeedback,\n    valid: valid\n  }, floatingLabel ? renderInputAndButton() : React.createElement(\"div\", {\n    className: \"form-password\"\n  }, renderInputAndButton()));\n});\nCPasswordInput.propTypes = __assign({\n  ariaLabelToggler: PropTypes.string,\n  className: PropTypes.string,\n  id: PropTypes.string,\n  delay: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  showPassword: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg'])\n}, CFormControlWrapper.propTypes);\nCPasswordInput.displayName = 'CPasswordInput';\nexport { CPasswordInput };","map":{"version":3,"mappings":";;;;;IA+DaA,cAAc,GAAGC,UAAU,CACtC,UACEC,EADF,EAsBEC,GAtBF,EAsBK;AApBD,cAAQ,cAAR;AAAA,MACAC,wBADA;AAAA,MACAC,gBAAgB,mBAAG,4BAAH,GAA+BD,EAD/C;AAAA,MAEAE,SAAS,eAFT;AAAA,MAGAC,aAHA;AAAA,MAGAC,KAAK,GAAGD,wBAAKA,EAHb;AAAA,MAIAE,QAAQ,cAJR;AAAA,MAKAC,eAAe,qBALf;AAAA,MAMAC,aAAa,mBANb;AAAA,MAOAC,iBAAiB,uBAPjB;AAAA,MAQAC,aAAa,mBARb;AAAA,MASAC,EAAE,QATF;AAAA,MAUAC,OAAO,aAVP;AAAA,MAWAC,KAAK,WAXL;AAAA,MAYAC,QAAQ,cAZR;AAAA,MAaAC,EAAsC,kBAbtC;AAAA,MAacC,gBAAgB,GAAGD,wBAAKA,EAbtC;AAAA,MAcAE,IAAI,UAdJ;AAAA,MAeAC,IAAI,UAfJ;AAAA,MAgBAC,eAAe,qBAhBf;AAAA,MAiBAC,KAAK,WAjBL;AAAA,MAkBGC,IAAI,cAnBT,8OAmBS,CAlBP;;AAsBI,WAAoBC,QAAQ,EAA5B;AAAA,MAACC,KAAK,QAAN;AAAA,MAAQC,QAAQ,QAAhB;;AACA,WAAkCF,QAAQ,CAAUN,gBAAV,CAA1C;AAAA,MAACS,YAAY,QAAb;AAAA,MAAeC,eAAe,QAA9B;;AAENC,WAAS,CAAC;AACR,QAAMC,SAAS,GAAGC,UAAU,CAC1B,YAAM;AAAA,kBAAK,IAAIf,QAAT,IAAqBA,QAAQ,CAACS,KAAD,CAA7B;AAAoC,KADhB,EAE1B,OAAOlB,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoC,GAFV,CAA5B;AAKA,WAAO;AAAM,yBAAY,CAACuB,SAAD,CAAZ;AAAuB,KAApC;AACD,GAPQ,EAON,CAACL,KAAD,CAPM,CAAT;AASAI,WAAS,CAAC;AACRD,mBAAe,CAACV,gBAAD,CAAf;AACD,GAFQ,EAEN,CAACA,gBAAD,CAFM,CAAT;;AAIA,MAAMc,oBAAoB,GAAG;;;AAAM,WACjCC,0CACEA;AACE5B,eAAS,EAAE6B,UAAU,CACnB,cADmB,GACLjC,SAEZA,GAAC,gBAAgBkC,MAAhB,CAAgBhB,IAAhB,CAAD,IAA0BA,IAFd,EAGZlB,mBAAca,OAHF,EAIZb,iBAAYqB,KAJA,IADK,GAOnBjB,SAPmB,CADvB;AAUEQ,QAAE,EAAEA,EAVN;AAWEuB,UAAI,EAAET,YAAY,GAAG,MAAH,GAAY,UAXhC;AAYEX,cAAQ,EAAE,UAACqB,KAAD,EAAM;AAAK,eAAC9B,KAAK,GAAGmB,QAAQ,CAACW,KAAD,CAAX,GAAqBrB,QAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAGqB,KAAH,CAAnC;AAA6C;AAZpE,OAaMd,IAbN,EAcE;AAAArB,SAAG,EAAEA;AAAL,KAdF,GAgBGoC,QAhBH,CADF,EAmBEL;AACEG,UAAI,EAAC,QADP;AAEE/B,eAAS,EAAC,sBAFZ;AAEkC,4BACb,UAHrB;AAG+B,oBACjBD,gBAJd;AAKEmC,aAAO,EAAE,YAAM;AAAA,8BAAe,CAAC,UAACC,IAAD,EAAU;AAAA,kBAACA,IAAD;AAAK,SAAhB,CAAf;AAAgC;AALjD,OAOEP;AAAM5B,eAAS,EAAC;AAAhB,MAPF,CAnBF,CADiC;AA8BlC,GA9BD;;AAgCA,SACE4B,KAAC,cAAD,CAACQ,mBAAD,EACE;AAAAC,eAAW,EAAEnB,IAAI,CAAC,kBAAD,CAAjB;AACAf,YAAQ,EAAEA,QADV;AAEAC,mBAAe,EAAEA,eAFjB;AAGAC,iBAAa,EAAEA,aAHf;AAIAC,qBAAiB,EAAEuB,UAAU,CAAC,eAAD,EAAkBvB,iBAAlB,CAJ7B;AAKAC,iBAAa,EAAEA,aALf;AAMAC,MAAE,EAAEA,EANJ;AAOAC,WAAO,EAAEA,OAPT;AAQAC,SAAK,EAAEA,KARP;AASAK,QAAI,EAAEA,IATN;AAUAC,mBAAe,EAAEA,eAVjB;AAWAC,SAAK,EAAEA;AAXP,GADF,EAcGV,aAAa,GACZoB,oBAAoB,EADR,GAGZC,KAAK,cAAL,CAAK,KAAL,EAAK;AAAA5B,aAAS,EAAC;AAAV,GAAL,EAAgC2B,oBAAoB,EAApD,CAjBJ,CADF;AAsBD,CA/FqC;AAkGxCjC,cAAc,CAAC4C,SAAf,GACEC;AAAAxC,kBAAgB,EAAEyC,SAAS,CAACC,MAA5B;AACAzC,WAAS,EAAEwC,SAAS,CAACC,MADrB;AAEAjC,IAAE,EAAEgC,SAAS,CAACC,MAFd;AAGAvC,OAAK,EAAEsC,SAAS,CAACE,SAAV,CAAoB,CAACF,SAAS,CAACG,IAAX,EAAiBH,SAAS,CAACI,MAA3B,CAApB,CAHP;AAIAtB,cAAY,EAAEkB,SAAS,CAACG,IAJxB;AAKA7B,MAAI,EAAE0B,SAAS,CAACK,KAAV,CAAgB,CAAC,IAAD,EAAO,IAAP,CAAhB;AALN,GAMGT,mBAAmB,CAACE,SANvB,CADF;AAUA5C,cAAc,CAACoD,WAAf,GAA6B,gBAA7B","names":["CPasswordInput","forwardRef","_a","ref","_b","ariaLabelToggler","className","_c","delay","feedback","feedbackInvalid","feedbackValid","floatingClassName","floatingLabel","id","invalid","label","onChange","_d","showPasswordProp","size","text","tooltipFeedback","valid","rest","useState","value","setValue","showPassword","setShowPassword","useEffect","timeOutId","setTimeout","renderInputAndButton","React","classNames","concat","type","event","children","onClick","prev","CFormControlWrapper","describedby","propTypes","__assign","PropTypes","string","oneOfType","bool","number","oneOf","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\password-input\\CPasswordInput.tsx"],"sourcesContent":["import React, {\n  ChangeEventHandler,\n  forwardRef,\n  InputHTMLAttributes,\n  useEffect,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlWrapper, CFormControlWrapperProps } from '../form/CFormControlWrapper'\n\nexport interface CPasswordInputProps\n  extends CFormControlWrapperProps,\n    Omit<InputHTMLAttributes<HTMLInputElement>, 'size'> {\n  /**\n   * Sets the accessible label (`aria-label`) for the toggle password visibility button. This improves accessibility for screen readers and should describe the action, e.g. `\"Show password\"` or `\"Hide password\"`.\n   */\n  ariaLabelToggler?: string\n\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n\n  /**\n   * Enables delayed `onChange` execution for improved performance in React password inputs.\n   * - `true` delays the `onChange` callback by 500ms.\n   * - You can also pass a custom delay (in milliseconds) as a number.\n   */\n  delay?: boolean | number\n\n  /**\n   * Disables the password input field. When `true`, the user cannot interact with the field.\n   */\n  disabled?: boolean\n\n  /**\n   * Callback triggered when the value of the password input changes. If `delay` is set, the callback is called after the specified timeout.\n   */\n  onChange?: ChangeEventHandler<HTMLInputElement>\n\n  /**\n   * Makes the React password input read-only. Prevents user input but allows text selection.\n   */\n  readOnly?: boolean\n\n  /**\n   * Controls the initial visibility of the password. When `true`, the input type is set to `\"text\"` instead of `\"password\"`. This allows **toggling password visibility** in React forms.\n   */\n  showPassword?: boolean\n\n  /**\n   * Sets the visual size of the password input. Use `'sm'` for small or `'lg'` for large input fields.\n   */\n  size?: 'sm' | 'lg'\n\n  /**\n   * The value of the password input field. To make the input controlled, pair this with the `onChange` handler.\n   */\n  value?: string | string[] | number\n}\n\nexport const CPasswordInput = forwardRef<HTMLInputElement, CPasswordInputProps>(\n  (\n    {\n      children,\n      ariaLabelToggler = 'Toggle password visibility',\n      className,\n      delay = false,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingClassName,\n      floatingLabel,\n      id,\n      invalid,\n      label,\n      onChange,\n      showPassword: showPasswordProp = false,\n      size,\n      text,\n      tooltipFeedback,\n      valid,\n      ...rest\n    },\n    ref\n  ) => {\n    const [value, setValue] = useState<React.ChangeEvent<HTMLInputElement>>()\n    const [showPassword, setShowPassword] = useState<boolean>(showPasswordProp)\n\n    useEffect(() => {\n      const timeOutId = setTimeout(\n        () => value && onChange && onChange(value),\n        typeof delay === 'number' ? delay : 500\n      )\n\n      return () => clearTimeout(timeOutId)\n    }, [value])\n\n    useEffect(() => {\n      setShowPassword(showPasswordProp)\n    }, [showPasswordProp])\n\n    const renderInputAndButton = () => (\n      <>\n        <input\n          className={classNames(\n            'form-control',\n            {\n              [`form-control-${size}`]: size,\n              'is-invalid': invalid,\n              'is-valid': valid,\n            },\n            className\n          )}\n          id={id}\n          type={showPassword ? 'text' : 'password'}\n          onChange={(event) => (delay ? setValue(event) : onChange?.(event))}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </input>\n        <button\n          type=\"button\"\n          className=\"form-password-action\"\n          data-coreui-toggle=\"password\"\n          aria-label={ariaLabelToggler}\n          onClick={() => setShowPassword((prev) => !prev)}\n        >\n          <span className=\"form-password-action-icon\"></span>\n        </button>\n      </>\n    )\n\n    return (\n      <CFormControlWrapper\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingClassName={classNames('form-password', floatingClassName)}\n        floatingLabel={floatingLabel}\n        id={id}\n        invalid={invalid}\n        label={label}\n        text={text}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      >\n        {floatingLabel ? (\n          renderInputAndButton()\n        ) : (\n          <div className=\"form-password\">{renderInputAndButton()}</div>\n        )}\n      </CFormControlWrapper>\n    )\n  }\n)\n\nCPasswordInput.propTypes = {\n  ariaLabelToggler: PropTypes.string,\n  className: PropTypes.string,\n  id: PropTypes.string,\n  delay: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  showPassword: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg']),\n  ...CFormControlWrapper.propTypes,\n}\n\nCPasswordInput.displayName = 'CPasswordInput'\n"]},"metadata":{},"sourceType":"module"}