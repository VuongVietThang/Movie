{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { CTableBody } from '../table/CTableBody.js';\nimport '../form/CForm.js';\nimport { CFormCheck } from '../form/CFormCheck.js';\nimport '../form/CFormControlValidation.js';\nimport '../form/CFormControlWrapper.js';\nimport '../form/CFormFeedback.js';\nimport '../form/CFormFloating.js';\nimport '../form/CFormInput.js';\nimport '../form/CFormLabel.js';\nimport '../form/CFormRange.js';\nimport '../form/CFormSelect.js';\nimport '../form/CFormSwitch.js';\nimport '../form/CFormText.js';\nimport '../form/CFormTextarea.js';\nimport '../form/CInputGroup.js';\nimport '../form/CInputGroupText.js';\nimport '../table/CTable.js';\nimport '../table/CTableCaption.js';\nimport { CTableDataCell } from '../table/CTableDataCell.js';\nimport '../table/CTableFoot.js';\nimport '../table/CTableHead.js';\nimport '../table/CTableHeaderCell.js';\nimport { CTableRow } from '../table/CTableRow.js';\nimport isObjectInArray from '../../utils/isObjectInArray.js';\nimport { ITEM_INTERNAL_KEYS } from './consts.js';\nimport { getColumns, getClickedColumnName, getColumnName, getTableDataCellProps, getTableDataCellStyles } from './utils.js';\nvar CSmartTableBody = forwardRef(function (_a, ref) {\n  var clickableRows = _a.clickableRows,\n      columnNames = _a.columnNames,\n      columns = _a.columns,\n      currentItems = _a.currentItems,\n      firstItemOnActivePageIndex = _a.firstItemOnActivePageIndex,\n      noItemsLabel = _a.noItemsLabel,\n      onRowChecked = _a.onRowChecked,\n      onRowClick = _a.onRowClick,\n      scopedColumns = _a.scopedColumns,\n      selectable = _a.selectable,\n      selected = _a.selected,\n      rest = __rest(_a, [\"clickableRows\", \"columnNames\", \"columns\", \"currentItems\", \"firstItemOnActivePageIndex\", \"noItemsLabel\", \"onRowChecked\", \"onRowClick\", \"scopedColumns\", \"selectable\", \"selected\"]);\n\n  var colspan = selectable ? columns.length + 1 : columns.length;\n\n  var _columns = useMemo(function () {\n    return getColumns(columns);\n  }, [columns]);\n\n  return React.createElement(CTableBody, __assign({}, clickableRows && {\n    style: {\n      cursor: 'pointer'\n    }\n  }, rest, {\n    ref: ref\n  }), currentItems.length > 0 ? currentItems.map(function (item, trIndex) {\n    return React.createElement(React.Fragment, {\n      key: trIndex\n    }, React.createElement(CTableRow, __assign({}, item._props && __assign({}, item._props), clickableRows && {\n      tabIndex: 0\n    }, {\n      onClick: function (event) {\n        return onRowClick && onRowClick(item, trIndex + firstItemOnActivePageIndex, getClickedColumnName(event.target, columnNames, selectable), event);\n      }\n    }), selectable && React.createElement(CTableDataCell, null, React.createElement(CFormCheck, {\n      checked: selected && isObjectInArray(selected, item, ITEM_INTERNAL_KEYS),\n      disabled: item._selectable === false,\n      onChange: function (event) {\n        var _item = __assign({}, item);\n\n        for (var _i = 0, ITEM_INTERNAL_KEYS_1 = ITEM_INTERNAL_KEYS; _i < ITEM_INTERNAL_KEYS_1.length; _i++) {\n          var key = ITEM_INTERNAL_KEYS_1[_i];\n          delete _item[key];\n        }\n\n        onRowChecked && onRowChecked(_item, event.target.checked);\n      }\n    })), _columns.map(function (column, index) {\n      var colName = getColumnName(column);\n      return scopedColumns && scopedColumns[colName] && React.cloneElement(scopedColumns[colName](item, trIndex + firstItemOnActivePageIndex), {\n        key: index\n      }) || item[colName] !== undefined && React.createElement(CTableDataCell, __assign({}, getTableDataCellProps(column, item, colName), {\n        style: getTableDataCellStyles(column, item, colName),\n        key: index\n      }), item[colName]);\n    })), scopedColumns && scopedColumns.details && React.createElement(React.Fragment, null, React.createElement(CTableRow, null, React.createElement(CTableDataCell, {\n      colSpan: colspan,\n      className: \"p-0\",\n      style: {\n        borderBottomWidth: 0\n      },\n      tabIndex: -1\n    })), React.createElement(CTableRow, {\n      className: \"p-0\",\n      key: \"details\".concat(trIndex)\n    }, React.createElement(CTableDataCell, {\n      colSpan: colspan,\n      className: \"p-0\",\n      style: {\n        border: 0\n      }\n    }, scopedColumns.details(item, trIndex + firstItemOnActivePageIndex)))));\n  }) : React.createElement(CTableRow, null, React.createElement(CTableDataCell, {\n    colSpan: colspan\n  }, noItemsLabel)));\n});\nCSmartTableBody.propTypes = {\n  clickableRows: PropTypes.bool,\n  columns: PropTypes.array.isRequired,\n  currentItems: PropTypes.array.isRequired,\n  firstItemOnActivePageIndex: PropTypes.number.isRequired,\n  noItemsLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  onRowChecked: PropTypes.func,\n  onRowClick: PropTypes.func,\n  columnNames: PropTypes.array.isRequired,\n  scopedColumns: PropTypes.object,\n  selectable: PropTypes.bool,\n  selected: PropTypes.array\n};\nCSmartTableBody.displayName = 'CSmartTableBody';\nexport { CSmartTableBody };","map":{"version":3,"mappings":"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","names":["CSmartTableBody","forwardRef","_a","ref","columnNames","columns","currentItems","firstItemOnActivePageIndex","noItemsLabel","onRowChecked","onRowClick","scopedColumns","selectable","selected","rest","colspan","length","_columns","useMemo","React","CTableBody","__assign","clickableRows","style","cursor","map","item","trIndex","Fragment","key","CTableRow","_props","tabIndex","onClick","event","getClickedColumnName","target","CTableDataCell","CFormCheck","checked","isObjectInArray","ITEM_INTERNAL_KEYS","disabled","_selectable","onChange","_item","_i","column","index","colName","getColumnName","cloneElement","undefined","getTableDataCellStyles","details","colSpan","className","borderBottomWidth","concat","border","propTypes","PropTypes","bool","array","isRequired","number","oneOfType","string","node","func","object","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\smart-table\\CSmartTableBody.tsx"],"sourcesContent":["import React, { forwardRef, MouseEvent, ReactNode, useMemo } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CTableBody, CTableBodyProps } from '../table/CTableBody'\nimport { CFormCheck } from '../form'\nimport { CTableDataCell, CTableRow } from '../table'\n\nimport { isObjectInArray } from '../../utils'\n\nimport { ITEM_INTERNAL_KEYS } from './consts'\nimport type { Column, Item, ScopedColumns } from './types'\nimport {\n  getClickedColumnName,\n  getColumnName,\n  getColumns,\n  getTableDataCellProps,\n  getTableDataCellStyles,\n} from './utils'\n\nexport interface CSmartTableBodyProps extends CTableBodyProps {\n  clickableRows?: boolean\n  columnNames: string[]\n  columns: (Column | string)[]\n  currentItems: Item[]\n  firstItemOnActivePageIndex: number\n  noItemsLabel?: string | ReactNode\n  onRowChecked?: (item: Item, value: boolean) => void\n  onRowClick?: (item: Item, index: number, columnName: string, event: MouseEvent | boolean) => void\n  scopedColumns?: ScopedColumns\n  selectable?: boolean\n  selected?: Item[]\n}\n\nexport const CSmartTableBody = forwardRef<HTMLTableSectionElement, CSmartTableBodyProps>(\n  (\n    {\n      clickableRows,\n      columnNames,\n      columns,\n      currentItems,\n      firstItemOnActivePageIndex,\n      noItemsLabel,\n      onRowChecked,\n      onRowClick,\n      scopedColumns,\n      selectable,\n      selected,\n      ...rest\n    },\n    ref,\n  ) => {\n    const colspan: number = selectable ? columns.length + 1 : columns.length\n    const _columns = useMemo(() => getColumns(columns), [columns])\n    return (\n      <CTableBody\n        {...(clickableRows && {\n          style: { cursor: 'pointer' },\n        })}\n        {...rest}\n        ref={ref}\n      >\n        {currentItems.length > 0 ? (\n          currentItems.map((item: Item, trIndex) => {\n            return (\n              <React.Fragment key={trIndex}>\n                <CTableRow\n                  {...(item._props && { ...item._props })}\n                  {...(clickableRows && { tabIndex: 0 })}\n                  onClick={(event) =>\n                    onRowClick &&\n                    onRowClick(\n                      item,\n                      trIndex + firstItemOnActivePageIndex,\n                      getClickedColumnName(\n                        event.target as HTMLElement,\n                        columnNames,\n                        selectable,\n                      ),\n                      event,\n                    )\n                  }\n                >\n                  {selectable && (\n                    <CTableDataCell>\n                      <CFormCheck\n                        checked={\n                          selected &&\n                          isObjectInArray(selected, item, ITEM_INTERNAL_KEYS)\n                        }\n                        disabled={item._selectable === false}\n                        onChange={(event) => {\n                          const _item = { ...item }\n                          for (const key of ITEM_INTERNAL_KEYS ) {\n                            delete _item[key]\n                          }\n                          onRowChecked && onRowChecked(_item, event.target.checked)\n                        }}\n                      />\n                    </CTableDataCell>\n                  )}\n                  {_columns.map((column, index) => {\n                    const colName = getColumnName(column)\n                    return (\n                      (scopedColumns &&\n                        scopedColumns[colName] &&\n                        React.cloneElement(\n                          scopedColumns[colName](item, trIndex + firstItemOnActivePageIndex),\n                          {\n                            key: index,\n                          },\n                        )) ||\n                      (item[colName] !== undefined && (\n                        <CTableDataCell\n                          {...getTableDataCellProps(column, item, colName)}\n                          style={getTableDataCellStyles(column, item, colName)}\n                          key={index}\n                        >\n                          {item[colName]}\n                        </CTableDataCell>\n                      ))\n                    )\n                  })}\n                </CTableRow>\n                {scopedColumns && scopedColumns.details && (\n                  <>\n                    <CTableRow>\n                      <CTableDataCell\n                        colSpan={colspan}\n                        className=\"p-0\"\n                        style={{ borderBottomWidth: 0 }}\n                        tabIndex={-1}\n                      ></CTableDataCell>\n                    </CTableRow>\n                    <CTableRow className=\"p-0\" key={`details${trIndex}`}>\n                      <CTableDataCell colSpan={colspan} className=\"p-0\" style={{ border: 0 }}>\n                        {scopedColumns.details(item, trIndex + firstItemOnActivePageIndex)}\n                      </CTableDataCell>\n                    </CTableRow>\n                  </>\n                )}\n              </React.Fragment>\n            )\n          })\n        ) : (\n          <CTableRow>\n            <CTableDataCell colSpan={colspan}>{noItemsLabel}</CTableDataCell>\n          </CTableRow>\n        )}\n      </CTableBody>\n    )\n  },\n)\n\nCSmartTableBody.propTypes = {\n  clickableRows: PropTypes.bool,\n  columns: PropTypes.array.isRequired,\n  currentItems: PropTypes.array.isRequired,\n  firstItemOnActivePageIndex: PropTypes.number.isRequired,\n  noItemsLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  onRowChecked: PropTypes.func,\n  onRowClick: PropTypes.func,\n  columnNames: PropTypes.array.isRequired,\n  scopedColumns: PropTypes.object,\n  selectable: PropTypes.bool,\n  selected: PropTypes.array,\n}\n\nCSmartTableBody.displayName = 'CSmartTableBody'\n"]},"metadata":{},"sourceType":"module"}