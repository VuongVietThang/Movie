{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nvar BREAKPOINTS = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];\nvar CRow = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      className = _a.className,\n      rest = __rest(_a, [\"children\", \"className\"]);\n\n  var repsonsiveClassNames = [];\n  BREAKPOINTS.forEach(function (bp) {\n    var breakpoint = rest[bp];\n    delete rest[bp];\n    var infix = bp === 'xs' ? '' : \"-\".concat(bp);\n\n    if (typeof breakpoint === 'object') {\n      if (breakpoint.cols) {\n        repsonsiveClassNames.push(\"row-cols\".concat(infix, \"-\").concat(breakpoint.cols));\n      }\n\n      if (typeof breakpoint.gutter === 'number') {\n        repsonsiveClassNames.push(\"g\".concat(infix, \"-\").concat(breakpoint.gutter));\n      }\n\n      if (typeof breakpoint.gutterX === 'number') {\n        repsonsiveClassNames.push(\"gx\".concat(infix, \"-\").concat(breakpoint.gutterX));\n      }\n\n      if (typeof breakpoint.gutterY === 'number') {\n        repsonsiveClassNames.push(\"gy\".concat(infix, \"-\").concat(breakpoint.gutterY));\n      }\n    }\n  });\n  return React.createElement(\"div\", __assign({\n    className: classNames('row', repsonsiveClassNames, className)\n  }, rest, {\n    ref: ref\n  }), children);\n});\nvar bp = PropTypes.shape({\n  cols: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.string]),\n  gutter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterY: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n});\nCRow.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: bp,\n  sm: bp,\n  md: bp,\n  lg: bp,\n  xl: bp,\n  xxl: bp\n};\nCRow.displayName = 'CRow';\nexport { CRow };","map":{"version":3,"mappings":"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","names":["BREAKPOINTS","CRow","forwardRef","_a","ref","className","rest","__rest","repsonsiveClassNames","forEach","bp","breakpoint","infix","concat","cols","push","gutter","gutterX","gutterY","React","classNames","children","PropTypes","shape","oneOfType","oneOf","number","string","propTypes","node","xs","sm","md","lg","xl","xxl","displayName"],"sources":["C:\\wamp64\\www\\Movie\\node_modules\\@coreui\\react\\src\\components\\grid\\CRow.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport type BPObject = {\n  cols?: 'auto' | number | string | null\n  gutter?: number | string | null\n  gutterX?: number | string | null\n  gutterY?: number | string | null\n}\n\nexport interface CRowProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xs?: BPObject\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  sm?: BPObject\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  md?: BPObject\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  lg?: BPObject\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xl?: BPObject\n  /**\n   * The number of columns/offset/order on XX-Large devices (â‰¥1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xxl?: BPObject\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CRow = forwardRef<HTMLDivElement, CRowProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'object') {\n        if (breakpoint.cols) {\n          repsonsiveClassNames.push(`row-cols${infix}-${breakpoint.cols}`)\n        }\n\n        if (typeof breakpoint.gutter === 'number') {\n          repsonsiveClassNames.push(`g${infix}-${breakpoint.gutter}`)\n        }\n\n        if (typeof breakpoint.gutterX === 'number') {\n          repsonsiveClassNames.push(`gx${infix}-${breakpoint.gutterX}`)\n        }\n\n        if (typeof breakpoint.gutterY === 'number') {\n          repsonsiveClassNames.push(`gy${infix}-${breakpoint.gutterY}`)\n        }\n      }\n    })\n\n    return (\n      <div className={classNames('row', repsonsiveClassNames, className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nconst bp = PropTypes.shape({\n  cols: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.string]),\n  gutter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n})\n\nCRow.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: bp,\n  sm: bp,\n  md: bp,\n  lg: bp,\n  xl: bp,\n  xxl: bp,\n}\n\nCRow.displayName = 'CRow'\n"]},"metadata":{},"sourceType":"module"}