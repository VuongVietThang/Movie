{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useRef, useId, useState, useEffect } from 'react';\nimport classNames from '../../_virtual/index.js';\nimport PropTypes from 'prop-types';\nimport { CConditionalPortal } from '../conditional-portal/CConditionalPortal.js';\nimport { useForkedRef } from '../../hooks/useForkedRef.js';\nimport { usePopper } from '../../hooks/usePopper.js';\nimport { triggerPropType, fallbackPlacementsPropType } from '../../props.js';\nimport executeAfterTransition from '../../utils/executeAfterTransition.js';\nimport getRTLPlacement from '../../utils/getRTLPlacement.js';\nvar CTooltip = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      _b = _a.animation,\n      animation = _b === void 0 ? true : _b,\n      className = _a.className,\n      container = _a.container,\n      content = _a.content,\n      _c = _a.delay,\n      delay = _c === void 0 ? 0 : _c,\n      _d = _a.fallbackPlacements,\n      fallbackPlacements = _d === void 0 ? ['top', 'right', 'bottom', 'left'] : _d,\n      _e = _a.offset,\n      offset = _e === void 0 ? [0, 6] : _e,\n      onHide = _a.onHide,\n      onShow = _a.onShow,\n      _f = _a.placement,\n      placement = _f === void 0 ? 'top' : _f,\n      popperConfig = _a.popperConfig,\n      _g = _a.trigger,\n      trigger = _g === void 0 ? ['hover', 'focus'] : _g,\n      visible = _a.visible,\n      rest = __rest(_a, [\"children\", \"animation\", \"className\", \"container\", \"content\", \"delay\", \"fallbackPlacements\", \"offset\", \"onHide\", \"onShow\", \"placement\", \"popperConfig\", \"trigger\", \"visible\"]);\n\n  var tooltipRef = useRef(null);\n  var togglerRef = useRef(null);\n  var forkedRef = useForkedRef(ref, tooltipRef);\n  var id = \"tooltip\".concat(useId());\n\n  var _h = useState(false),\n      mounted = _h[0],\n      setMounted = _h[1];\n\n  var _j = useState(visible),\n      _visible = _j[0],\n      setVisible = _j[1];\n\n  var _k = usePopper(),\n      initPopper = _k.initPopper,\n      destroyPopper = _k.destroyPopper,\n      updatePopper = _k.updatePopper;\n\n  var _delay = typeof delay === 'number' ? {\n    show: delay,\n    hide: delay\n  } : delay;\n\n  var defaultPopperConfig = {\n    modifiers: [{\n      name: 'arrow',\n      options: {\n        element: '.tooltip-arrow'\n      }\n    }, {\n      name: 'flip',\n      options: {\n        fallbackPlacements: fallbackPlacements\n      }\n    }, {\n      name: 'offset',\n      options: {\n        offset: offset\n      }\n    }],\n    placement: getRTLPlacement(placement, togglerRef.current)\n  };\n\n  var computedPopperConfig = __assign(__assign({}, defaultPopperConfig), typeof popperConfig === 'function' ? popperConfig(defaultPopperConfig) : popperConfig);\n\n  useEffect(function () {\n    if (visible) {\n      handleShow();\n      return;\n    }\n\n    handleHide();\n  }, [visible]);\n  useEffect(function () {\n    if (mounted && togglerRef.current && tooltipRef.current) {\n      initPopper(togglerRef.current, tooltipRef.current, computedPopperConfig);\n      setTimeout(function () {\n        setVisible(true);\n      }, _delay.show);\n      return;\n    }\n\n    if (!mounted && togglerRef.current && tooltipRef.current) {\n      destroyPopper();\n    }\n  }, [mounted]);\n  useEffect(function () {\n    if (!_visible && togglerRef.current && tooltipRef.current) {\n      executeAfterTransition(function () {\n        setMounted(false);\n      }, tooltipRef.current);\n    }\n  }, [_visible]);\n\n  var handleShow = function () {\n    setMounted(true);\n\n    if (onShow) {\n      onShow();\n    }\n  };\n\n  var handleHide = function () {\n    setTimeout(function () {\n      setVisible(false);\n\n      if (onHide) {\n        onHide();\n      }\n    }, _delay.hide);\n  };\n\n  useEffect(function () {\n    updatePopper();\n  }, [content]);\n  return React.createElement(React.Fragment, null, React.cloneElement(children, __assign(__assign(__assign(__assign(__assign({}, _visible && {\n    'aria-describedby': id\n  }), {\n    ref: togglerRef\n  }), (trigger === 'click' || trigger.includes('click')) && {\n    onClick: function () {\n      return _visible ? handleHide() : handleShow();\n    }\n  }), (trigger === 'focus' || trigger.includes('focus')) && {\n    onFocus: function () {\n      return handleShow();\n    },\n    onBlur: function () {\n      return handleHide();\n    }\n  }), (trigger === 'hover' || trigger.includes('hover')) && {\n    onMouseEnter: function () {\n      return handleShow();\n    },\n    onMouseLeave: function () {\n      return handleHide();\n    }\n  })), React.createElement(CConditionalPortal, {\n    container: container,\n    portal: true\n  }, mounted && React.createElement(\"div\", __assign({\n    className: classNames('tooltip', 'bs-tooltip-auto', {\n      fade: animation,\n      show: _visible\n    }, className),\n    id: id,\n    ref: forkedRef,\n    role: \"tooltip\"\n  }, rest), React.createElement(\"div\", {\n    className: \"tooltip-arrow\"\n  }), React.createElement(\"div\", {\n    className: \"tooltip-inner\"\n  }, content))));\n});\nCTooltip.propTypes = {\n  animation: PropTypes.bool,\n  children: PropTypes.node,\n  container: PropTypes.any,\n  content: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  delay: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    show: PropTypes.number.isRequired,\n    hide: PropTypes.number.isRequired\n  })]),\n  fallbackPlacements: fallbackPlacementsPropType,\n  offset: PropTypes.any,\n  // TODO: find good proptype\n  onHide: PropTypes.func,\n  onShow: PropTypes.func,\n  placement: PropTypes.oneOf(['auto', 'top', 'right', 'bottom', 'left']),\n  popperConfig: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  trigger: triggerPropType,\n  visible: PropTypes.bool\n};\nCTooltip.displayName = 'CTooltip';\nexport { CTooltip };","map":{"version":3,"mappings":"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","names":["CTooltip","forwardRef","_a","ref","_b","animation","className","container","content","_c","delay","_d","fallbackPlacements","_e","offset","onHide","onShow","_f","placement","popperConfig","_g","trigger","visible","rest","tooltipRef","useRef","togglerRef","forkedRef","useForkedRef","id","useId","useState","mounted","setMounted","_visible","setVisible","initPopper","destroyPopper","updatePopper","_delay","show","hide","defaultPopperConfig","modifiers","name","options","element","getRTLPlacement","current","computedPopperConfig","useEffect","handleShow","handleHide","setTimeout","executeAfterTransition","React","cloneElement","children","__assign","includes","onClick","onFocus","onBlur","onMouseEnter","onMouseLeave","CConditionalPortal","portal","classNames","fade","role","propTypes","PropTypes","bool","node","any","oneOfType","string","number","shape","isRequired","fallbackPlacementsPropType","func","oneOf","object","triggerPropType","displayName"],"sources":["C:\\wamp64\\www\\Movie\\node_modules\\@coreui\\react\\src\\components\\tooltip\\CTooltip.tsx"],"sourcesContent":["import React, {\n  forwardRef,\n  HTMLAttributes,\n  ReactNode,\n  useEffect,\n  useId,\n  useRef,\n  useState,\n} from 'react'\nimport classNames from 'classnames'\nimport PropTypes from 'prop-types'\nimport type { Options } from '@popperjs/core'\n\nimport { CConditionalPortal } from '../conditional-portal'\nimport { useForkedRef, usePopper } from '../../hooks'\nimport { fallbackPlacementsPropType, triggerPropType } from '../../props'\nimport type { Placements, Triggers } from '../../types'\nimport { executeAfterTransition, getRTLPlacement } from '../../utils'\n\nexport interface CTooltipProps extends Omit<HTMLAttributes<HTMLDivElement>, 'content'> {\n  /**\n   * Enables or disables the CSS fade transition for the React Tooltip.\n   *\n   * @since 4.9.0\n   */\n  animation?: boolean\n\n  /**\n   * Adds a custom class name to the React Tooltip container. Useful for overriding default styles or applying additional design choices.\n   */\n  className?: string\n\n  /**\n   * Appends the React Tooltip to a specific element instead of the default `document.body`. You may pass:\n   * - A DOM element (`HTMLElement` or `DocumentFragment`)\n   * - A function that returns a single element\n   * - `null`\n   *\n   * @example\n   * <CTooltip container={document.getElementById('my-container')}>...</CTooltip>\n   *\n   * @default document.body\n   * @since 4.11.0\n   */\n  container?: DocumentFragment | Element | (() => DocumentFragment | Element | null) | null\n\n  /**\n   * Content to be displayed within the React Tooltip. Can be a string or any valid React node.\n   */\n  content: ReactNode | string\n\n  /**\n   * The delay (in milliseconds) before showing or hiding the React Tooltip.\n   * - If provided as a number, the delay is applied to both \"show\" and \"hide\".\n   * - If provided as an object, it should have distinct \"show\" and \"hide\" values.\n   *\n   * @example\n   * // Delays 300ms on both show and hide\n   * <CTooltip delay={300}>...</CTooltip>\n   *\n   * // Delays 500ms on show and 100ms on hide\n   * <CTooltip delay={{ show: 500, hide: 100 }}>...</CTooltip>\n   *\n   * @since 4.9.0\n   */\n  delay?: number | { show: number; hide: number }\n\n  /**\n   * Array of fallback placements for the React Tooltip to use when the preferred placement cannot be achieved. These placements are tried in order.\n   *\n   * @type 'top', 'right', 'bottom', 'left' | ('top', 'right', 'bottom', 'left')[]\n   * @since 4.9.0\n   */\n  fallbackPlacements?: Placements | Placements[]\n\n  /**\n   * Adjusts the offset of the React Tooltip relative to its target. Expects a tuple `[x-axis, y-axis]`.\n   *\n   * @example\n   * // Offset the menu 0px in X and 10px in Y direction\n   * <CTooltip offset={[0, 10]}>...</CTooltip>\n   *\n   * // Offset the menu 5px in both X and Y direction\n   * <CTooltip offset={[5, 5]}>...</CTooltip>\n   */\n  offset?: [number, number]\n\n  /**\n   * Callback fired immediately after the React Tooltip is hidden.\n   */\n  onHide?: () => void\n\n  /**\n   * Callback fired immediately after the React Tooltip is shown.\n   */\n  onShow?: () => void\n\n  /**\n   * Initial placement of the React Tooltip. Note that Popper.js modifiers may alter this placement automatically if there's insufficient space in the chosen position.\n   */\n  placement?: 'auto' | 'top' | 'right' | 'bottom' | 'left'\n\n  /**\n   * Customize the Popper.js configuration used to position the React Tooltip. Pass either an object or a function returning a modified config. [Learn more](https://popper.js.org/docs/v2/constructors/#options)\n   *\n   * @example\n   * <CTooltip\n   *   popperConfig={(defaultConfig) => ({\n   *     ...defaultConfig,\n   *     strategy: 'fixed',\n   *     modifiers: [\n   *       ...defaultConfig.modifiers,\n   *       { name: 'computeStyles', options: { adaptive: false } },\n   *     ],\n   *   })}\n   * >...</CTooltip>\n   *\n   * @since 5.5.0\n   */\n  popperConfig?: Partial<Options> | ((defaultPopperConfig: Partial<Options>) => Partial<Options>)\n\n  /**\n   * Determines the events that toggle the visibility of the React Tooltip. Can be a single trigger or an array of triggers.\n   *\n   * @example\n   * // Hover-only tooltip\n   * <CTooltip trigger=\"hover\">...</CTooltip>\n   *\n   * // Hover + click combined\n   * <CTooltip trigger={['hover', 'click']}>...</CTooltip>\n   *\n   * @type 'hover' | 'focus' | 'click' | ('hover' | 'focus' | 'click')[]\n   */\n  trigger?: Triggers | Triggers[]\n\n  /**\n   * Controls the visibility of the React Tooltip.\n   * - `true` to show the tooltip.\n   * - `false` to hide the tooltip.\n   */\n  visible?: boolean\n}\n\nexport const CTooltip = forwardRef<HTMLDivElement, CTooltipProps>(\n  (\n    {\n      children,\n      animation = true,\n      className,\n      container,\n      content,\n      delay = 0,\n      fallbackPlacements = ['top', 'right', 'bottom', 'left'],\n      offset = [0, 6],\n      onHide,\n      onShow,\n      placement = 'top',\n      popperConfig,\n      trigger = ['hover', 'focus'],\n      visible,\n      ...rest\n    },\n    ref\n  ) => {\n    const tooltipRef = useRef<HTMLDivElement>(null)\n    const togglerRef = useRef(null)\n    const forkedRef = useForkedRef(ref, tooltipRef)\n\n    const id = `tooltip${useId()}`\n    const [mounted, setMounted] = useState(false)\n    const [_visible, setVisible] = useState(visible)\n\n    const { initPopper, destroyPopper, updatePopper } = usePopper()\n\n    const _delay = typeof delay === 'number' ? { show: delay, hide: delay } : delay\n\n    const defaultPopperConfig: Partial<Options> = {\n      modifiers: [\n        { name: 'arrow', options: { element: '.tooltip-arrow' } },\n        { name: 'flip', options: { fallbackPlacements } },\n        { name: 'offset', options: { offset } },\n      ],\n      placement: getRTLPlacement(placement, togglerRef.current),\n    }\n\n    const computedPopperConfig: Partial<Options> = {\n      ...defaultPopperConfig,\n      ...(typeof popperConfig === 'function' ? popperConfig(defaultPopperConfig) : popperConfig),\n    }\n\n    useEffect(() => {\n      if (visible) {\n        handleShow()\n        return\n      }\n\n      handleHide()\n    }, [visible])\n\n    useEffect(() => {\n      if (mounted && togglerRef.current && tooltipRef.current) {\n        initPopper(togglerRef.current, tooltipRef.current, computedPopperConfig)\n        setTimeout(() => {\n          setVisible(true)\n        }, _delay.show)\n\n        return\n      }\n\n      if (!mounted && togglerRef.current && tooltipRef.current) {\n        destroyPopper()\n      }\n    }, [mounted])\n\n    useEffect(() => {\n      if (!_visible && togglerRef.current && tooltipRef.current) {\n        executeAfterTransition(() => {\n          setMounted(false)\n        }, tooltipRef.current)\n      }\n    }, [_visible])\n\n    const handleShow = () => {\n      setMounted(true)\n      if (onShow) {\n        onShow()\n      }\n    }\n\n    const handleHide = () => {\n      setTimeout(() => {\n        setVisible(false)\n        if (onHide) {\n          onHide()\n        }\n      }, _delay.hide)\n    }\n\n    useEffect(() => {\n      updatePopper()\n    }, [content])\n\n    return (\n      <>\n        {React.cloneElement(children as React.ReactElement<any>, {\n          ...(_visible && {\n            'aria-describedby': id,\n          }),\n          ref: togglerRef,\n          ...((trigger === 'click' || trigger.includes('click')) && {\n            onClick: () => (_visible ? handleHide() : handleShow()),\n          }),\n          ...((trigger === 'focus' || trigger.includes('focus')) && {\n            onFocus: () => handleShow(),\n            onBlur: () => handleHide(),\n          }),\n          ...((trigger === 'hover' || trigger.includes('hover')) && {\n            onMouseEnter: () => handleShow(),\n            onMouseLeave: () => handleHide(),\n          }),\n        })}\n        <CConditionalPortal container={container} portal={true}>\n          {mounted && (\n            <div\n              className={classNames(\n                'tooltip',\n                'bs-tooltip-auto',\n                {\n                  fade: animation,\n                  show: _visible,\n                },\n                className\n              )}\n              id={id}\n              ref={forkedRef}\n              role=\"tooltip\"\n              {...rest}\n            >\n              <div className=\"tooltip-arrow\"></div>\n              <div className=\"tooltip-inner\">{content}</div>\n            </div>\n          )}\n        </CConditionalPortal>\n      </>\n    )\n  }\n)\n\nCTooltip.propTypes = {\n  animation: PropTypes.bool,\n  children: PropTypes.node,\n  container: PropTypes.any,\n  content: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  delay: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.shape({\n      show: PropTypes.number.isRequired,\n      hide: PropTypes.number.isRequired,\n    }),\n  ]),\n  fallbackPlacements: fallbackPlacementsPropType,\n  offset: PropTypes.any, // TODO: find good proptype\n  onHide: PropTypes.func,\n  onShow: PropTypes.func,\n  placement: PropTypes.oneOf(['auto', 'top', 'right', 'bottom', 'left']),\n  popperConfig: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  trigger: triggerPropType,\n  visible: PropTypes.bool,\n}\n\nCTooltip.displayName = 'CTooltip'\n"]},"metadata":{},"sourceType":"module"}