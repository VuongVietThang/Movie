{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CProgressStackedContext } from './CProgressStackedContext.js';\nimport { CProgressBar } from './CProgressBar.js';\nvar CProgress = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      className = _a.className,\n      height = _a.height,\n      progressBarClassName = _a.progressBarClassName,\n      thin = _a.thin,\n      value = _a.value,\n      white = _a.white,\n      rest = __rest(_a, [\"children\", \"className\", \"height\", \"progressBarClassName\", \"thin\", \"value\", \"white\"]);\n\n  var stacked = useContext(CProgressStackedContext).stacked;\n  return React.createElement(\"div\", __assign({\n    className: classNames('progress', {\n      'progress-thin': thin,\n      'progress-white': white\n    }, className)\n  }, value !== undefined && {\n    role: 'progressbar',\n    'aria-valuenow': value,\n    'aria-valuemin': 0,\n    'aria-valuemax': 100\n  }, {\n    style: __assign(__assign({}, height ? {\n      height: \"\".concat(height, \"px\")\n    } : {}), stacked ? {\n      width: \"\".concat(value, \"%\")\n    } : {}),\n    ref: ref\n  }), React.Children.toArray(children).some( // @ts-expect-error displayName is set in the CProgressBar component\n  function (child) {\n    return child.type && child.type.displayName === 'CProgressBar';\n  }) ? React.Children.map(children, function (child) {\n    // @ts-expect-error displayName is set in the CProgressBar component\n    if (React.isValidElement(child) && child.type.displayName === 'CProgressBar') {\n      return React.cloneElement(child, __assign(__assign({}, value && {\n        value: value\n      }), rest));\n    }\n\n    return;\n  }) : React.createElement(CProgressBar, __assign({}, progressBarClassName && {\n    className: progressBarClassName\n  }, {\n    value: value\n  }, rest), children));\n});\nCProgress.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  height: PropTypes.number,\n  progressBarClassName: PropTypes.string,\n  thin: PropTypes.bool,\n  value: PropTypes.number,\n  white: PropTypes.bool\n};\nCProgress.displayName = 'CProgress';\nexport { CProgress };","map":{"version":3,"mappings":";;;;;;IAsCaA,SAAS,GAAGC,UAAU,CACjC,UAACC,EAAD,EAAqFC,GAArF,EAAwF;AAArF,cAAQ,cAAR;AAAA,MAAUC,SAAS,eAAnB;AAAA,MAAqBC,MAAM,YAA3B;AAAA,MAA6BC,oBAAoB,0BAAjD;AAAA,MAAmDC,IAAI,UAAvD;AAAA,MAAyDC,KAAK,WAA9D;AAAA,MAAgEC,KAAK,WAArE;AAAA,MAA0EC,IAAI,GAAhFC,iGAAE;;AACO,aAAO,GAAKC,UAAU,CAACC,uBAAD,CAAV,CAAmCC,OAA/C;AAER,SACEC,KACE,cADF,CACE,KADF,EACEC;AAAAZ,aAAS,EAAEa,UAAU,CACnB,UADmB,EAEnB;AACE,uBAAiBV,IADnB;AAEE,wBAAkBE;AAFpB,KAFmB,EAMnBL,SANmB;AAArB,KAQKI,KAAK,KAAKU,SAAV,IAAuB;AAC1BC,QAAI,EAAE,aADoB;AAE1B,qBAAiBX,KAFS;AAG1B,qBAAiB,CAHS;AAI1B,qBAAiB;AAJS,GAR5B,EAaE;AACFY,SAAK,wBACCf,MAAM,GAAG;AAAEA,YAAM,EAAE,UAAGA,MAAH,EAAa,IAAb;AAAV,KAAH,GAA+B,EADtC,GAECS,OAAO,GAAG;AAAEO,WAAK,EAAE,GAAGC,MAAH,CAAGd,KAAH,EAAW,GAAX;AAAT,KAAH,GAA4B,EAFpC,CADH;AAKFL,OAAG,EAAEA;AALH,GAbF,CADF,EAqBGY,KAAK,CAACQ,QAAN,CAAeC,OAAf,CAAuBC,QAAvB,EAAiCC,IAAjC;AAEC,YAACC,KAAD,EAAM;AAAK,gBAAK,CAACC,IAAN,IAAcD,KAAK,CAACC,IAAN,CAAWC,WAAX,KAA2B,cAAzC;AAAuD,GAFnE,IAICd,KAAK,CAACQ,QAAN,CAAeO,GAAf,CAAmBL,QAAnB,EAA6B,UAACE,KAAD,EAAM;;AAEjC,QAAIZ,KAAK,CAACgB,cAAN,CAAqBJ,KAArB,KAA+BA,KAAK,CAACC,IAAN,CAAWC,WAAX,KAA2B,cAA9D,EAA8E;AAC5E,aAAOd,KAAK,CAACiB,YAAN,CAAmBL,KAAnB,EAAwBX,sBACzBR,KAAK,IAAI;AAAEA,aAAK,EAAEA;AAAT,OADgB,GAE1BE,IAF0B,CAAxB,CAAP;;;AAMF;AACD,GAVD,CAJD,GAgBCK,KAAC,cAAD,CAACkB,YAAD,EACMjB,aAACV,oBAAoB,IAAI;AAAEF,aAAS,EAAEE;AAAb,GAAzB,EAA6D;AACjEE,SAAK,EAAEA;AAD0D,GAA7D,EAEAE,IAFA,CADN,EAKGe,QALH,CArCJ,CADF;AAgDD,CApDgC;AAuDnCzB,SAAS,CAACkC,SAAV,GAAsB;AACpBT,UAAQ,EAAEU,SAAS,CAACC,IADA;AAEpBhC,WAAS,EAAE+B,SAAS,CAACE,MAFD;AAGpBhC,QAAM,EAAE8B,SAAS,CAACG,MAHE;AAIpBhC,sBAAoB,EAAE6B,SAAS,CAACE,MAJZ;AAKpB9B,MAAI,EAAE4B,SAAS,CAACI,IALI;AAMpB/B,OAAK,EAAE2B,SAAS,CAACG,MANG;AAOpB7B,OAAK,EAAE0B,SAAS,CAACI;AAPG,CAAtB;AAUAvC,SAAS,CAAC6B,WAAV,GAAwB,WAAxB","names":["CProgress","forwardRef","_a","ref","className","height","progressBarClassName","thin","value","white","rest","__rest","useContext","CProgressStackedContext","stacked","React","__assign","classNames","undefined","role","style","width","concat","Children","toArray","children","some","child","type","displayName","map","isValidElement","cloneElement","CProgressBar","propTypes","PropTypes","node","string","number","bool"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react\\src\\components\\progress\\CProgress.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CProgressStackedContext } from './CProgressStackedContext'\nimport { CProgressBar, CProgressBarProps } from './CProgressBar'\n\nexport interface CProgressProps\n  extends Omit<HTMLAttributes<HTMLDivElement>, 'color'>,\n    CProgressBarProps {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the height of the component. If you set that value the inner `<CProgressBar>` will automatically resize accordingly.\n   */\n  height?: number\n  /**\n   * A string of all className you want applied to the `<CProgressBar/>` component.\n   *\n   * @since 4.9.0\n   */\n  progressBarClassName?: string\n  /**\n   * Makes progress bar thinner.\n   */\n  thin?: boolean\n  /**\n   * The percent to progress the ProgressBar (out of 100).\n   */\n  value?: number\n  /**\n   * Change the default color to white.\n   */\n  white?: boolean\n}\n\nexport const CProgress = forwardRef<HTMLDivElement, CProgressProps>(\n  ({ children, className, height, progressBarClassName, thin, value, white, ...rest }, ref) => {\n    const { stacked } = useContext(CProgressStackedContext)\n\n    return (\n      <div\n        className={classNames(\n          'progress',\n          {\n            'progress-thin': thin,\n            'progress-white': white,\n          },\n          className,\n        )}\n        {...(value !== undefined && {\n          role: 'progressbar',\n          'aria-valuenow': value,\n          'aria-valuemin': 0,\n          'aria-valuemax': 100,\n        })}\n        style={{\n          ...(height ? { height: `${height}px` } : {}),\n          ...(stacked ? { width: `${value}%` } : {}),\n        }}\n        ref={ref}\n      >\n        {React.Children.toArray(children).some(\n          // @ts-expect-error displayName is set in the CProgressBar component\n          (child) => child.type && child.type.displayName === 'CProgressBar',\n        ) ? (\n          React.Children.map(children, (child) => {\n            // @ts-expect-error displayName is set in the CProgressBar component\n            if (React.isValidElement(child) && child.type.displayName === 'CProgressBar') {\n              return React.cloneElement(child, {\n                ...(value && { value: value }),\n                ...rest,\n              })\n            }\n\n            return\n          })\n        ) : (\n          <CProgressBar\n            {...(progressBarClassName && { className: progressBarClassName })}\n            value={value}\n            {...rest}\n          >\n            {children}\n          </CProgressBar>\n        )}\n      </div>\n    )\n  },\n)\n\nCProgress.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  height: PropTypes.number,\n  progressBarClassName: PropTypes.string,\n  thin: PropTypes.bool,\n  value: PropTypes.number,\n  white: PropTypes.bool,\n}\n\nCProgress.displayName = 'CProgress'\n"]},"metadata":{},"sourceType":"module"}