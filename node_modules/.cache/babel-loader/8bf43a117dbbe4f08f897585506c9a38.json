{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport PropTypes from 'prop-types';\nimport React, { forwardRef, useRef, useState, useEffect } from 'react';\nimport classNames from '../../_virtual/index.js';\nimport '@popperjs/core';\nimport { useForkedRef } from '../../hooks/useForkedRef.js';\nimport { CSpinner } from '../spinner/CSpinner.js';\nvar CElementCover = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      className = _a.className,\n      boundaries = _a.boundaries,\n      _b = _a.opacity,\n      opacity = _b === void 0 ? 0.4 : _b,\n      rest = __rest(_a, [\"children\", \"className\", \"boundaries\", \"opacity\"]);\n\n  var elementCoverRef = useRef(null);\n  var forkedRef = useForkedRef(ref, elementCoverRef);\n\n  var _c = useState({}),\n      customBoundaries = _c[0],\n      setCustomBoundaries = _c[1];\n\n  var getCustomBoundaries = function () {\n    if (!elementCoverRef || !elementCoverRef.current || !boundaries) {\n      return {};\n    }\n\n    var parent = elementCoverRef.current.parentElement;\n\n    if (!parent) {\n      return {};\n    }\n\n    var parentCoords = parent.getBoundingClientRect();\n    var customBoundaries = {};\n    boundaries.forEach(function (_a) {\n      var sides = _a.sides,\n          query = _a.query;\n      var element = parent.querySelector(query);\n\n      if (!element || !sides) {\n        return;\n      }\n\n      var coords = element.getBoundingClientRect();\n      sides.forEach(function (side) {\n        var sideMargin = Math.abs(coords[side] - parentCoords[side]);\n        customBoundaries[side] = \"\".concat(sideMargin, \"px\");\n      });\n    });\n    return customBoundaries;\n  };\n\n  useEffect(function () {\n    setCustomBoundaries(getCustomBoundaries());\n  }, [JSON.stringify(getCustomBoundaries())]);\n  var classes = classNames(className);\n\n  var containerCoords = __assign({\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }, customBoundaries);\n\n  var coverStyles = __assign(__assign({}, containerCoords), {\n    position: 'absolute',\n    zIndex: 2,\n    backgroundColor: \"rgba(255,255,255,\".concat(opacity, \")\")\n  });\n\n  return React.createElement(\"div\", __assign({\n    className: classes,\n    style: coverStyles\n  }, rest, {\n    ref: forkedRef\n  }), React.createElement(\"div\", {\n    style: {\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      transform: 'translateX(-50%) translateY(-50%)'\n    }\n  }, children || React.createElement(CSpinner, {\n    variant: \"grow\",\n    color: \"primary\"\n  })));\n});\nCElementCover.propTypes = {\n  boundaries: PropTypes.array,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  opacity: PropTypes.number\n};\nCElementCover.displayName = 'CElementCover';\nexport { CElementCover };","map":{"version":3,"mappings":"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","names":["CElementCover","forwardRef","_a","ref","className","boundaries","_b","opacity","rest","elementCoverRef","useRef","forkedRef","useForkedRef","useState","customBoundaries","setCustomBoundaries","getCustomBoundaries","current","parent","parentElement","parentCoords","getBoundingClientRect","forEach","sides","query","element","querySelector","coords","side","sideMargin","Math","abs","concat","useEffect","JSON","stringify","classes","classNames","containerCoords","top","left","right","bottom","coverStyles","__assign","position","zIndex","backgroundColor","React","style","transform","children","CSpinner","variant","color","propTypes","PropTypes","array","node","string","number","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\element-cover\\CElementCover.tsx"],"sourcesContent":["import PropTypes from 'prop-types'\nimport React, {\n  CSSProperties,\n  forwardRef,\n  HTMLAttributes,\n  useEffect,\n  useRef,\n  useState,\n} from 'react'\nimport classNames from 'classnames'\n\nimport { useForkedRef } from '../../hooks'\nimport { CSpinner } from '../spinner/CSpinner'\n\ninterface CElementCoverProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Array of custom boundaries. Use to create custom cover area (instead of parent element area). Area is defined by four sides: 'top', 'bottom', 'right', 'left'. If side is not defined by any custom boundary it is equal to parent element boundary. Each custom boundary is object with keys:\n   * - sides (array) - select boundaries of element to define boundaries. Sides names: 'top', 'bottom', 'right', 'left'.\n   * - query (string) - query used to get element which define boundaries. Search will be done only inside parent element, by parent.querySelector(query) function.\n   */\n  boundaries?: { sides: string[]; query: string }[]\n  /**\n   * Opacity of the cover.\n   */\n  opacity?: number\n}\nexport const CElementCover = forwardRef<HTMLDivElement, CElementCoverProps>(\n  ({ children, className, boundaries, opacity = 0.4, ...rest }, ref) => {\n    const elementCoverRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, elementCoverRef)\n    const [customBoundaries, setCustomBoundaries] = useState({})\n\n    const getCustomBoundaries = () => {\n      if (!elementCoverRef || !elementCoverRef.current || !boundaries) {\n        return {}\n      }\n\n      const parent = elementCoverRef.current.parentElement\n      if (!parent) {\n        return {}\n      }\n\n      const parentCoords: {[key: string]: any} = parent.getBoundingClientRect()\n      const customBoundaries: {[key: string]: string} = {}\n      boundaries.forEach(({ sides, query }) => {\n        const element = parent.querySelector(query)\n        if (!element || !sides) {\n          return\n        }\n\n        const coords: {[key: string]: any} = element.getBoundingClientRect()\n        sides.forEach((side) => {\n          const sideMargin = Math.abs(coords[side] - parentCoords[side])\n          customBoundaries[side] = `${sideMargin}px`\n        })\n      })\n      return customBoundaries\n    }\n\n    useEffect(() => {\n      setCustomBoundaries(getCustomBoundaries())\n    }, [JSON.stringify(getCustomBoundaries())])\n\n    const classes = classNames(className)\n\n    const containerCoords = {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      ...customBoundaries,\n    }\n\n    const coverStyles: CSSProperties = {\n      ...containerCoords,\n      position: 'absolute',\n      zIndex: 2,\n      backgroundColor: `rgba(255,255,255,${opacity})`,\n    }\n\n    return (\n      <div className={classes} style={coverStyles} {...rest} ref={forkedRef}>\n        <div\n          style={{\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translateX(-50%) translateY(-50%)',\n          }}\n        >\n          {children || <CSpinner variant=\"grow\" color=\"primary\" />}\n        </div>\n      </div>\n    )\n  },\n)\n\nCElementCover.propTypes = {\n  boundaries: PropTypes.array,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  opacity: PropTypes.number,\n}\n\nCElementCover.displayName = 'CElementCover'\n"]},"metadata":{},"sourceType":"module"}