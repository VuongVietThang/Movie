{"ast":null,"code":"import { __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CFormFeedback } from './CFormFeedback.js';\n\nvar CFormControlValidation = function (_a) {\n  var describedby = _a.describedby,\n      feedback = _a.feedback,\n      feedbackInvalid = _a.feedbackInvalid,\n      feedbackValid = _a.feedbackValid,\n      invalid = _a.invalid,\n      tooltipFeedback = _a.tooltipFeedback,\n      valid = _a.valid;\n  return React.createElement(React.Fragment, null, feedback && (valid || invalid) && React.createElement(CFormFeedback, __assign({}, invalid && {\n    id: describedby\n  }, {\n    invalid: invalid,\n    tooltip: tooltipFeedback,\n    valid: valid\n  }), feedback), feedbackInvalid && React.createElement(CFormFeedback, {\n    id: describedby,\n    invalid: true,\n    tooltip: tooltipFeedback\n  }, feedbackInvalid), feedbackValid && React.createElement(CFormFeedback, {\n    valid: true,\n    tooltip: tooltipFeedback\n  }, feedbackValid));\n};\n\nCFormControlValidation.propTypes = {\n  describedby: PropTypes.string,\n  feedback: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackValid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackInvalid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  invalid: PropTypes.bool,\n  tooltipFeedback: PropTypes.bool,\n  valid: PropTypes.bool\n};\nCFormControlValidation.displayName = 'CFormControlValidation';\nexport { CFormControlValidation };","map":{"version":3,"mappings":";;;;;AAkDO,IAAMA,sBAAsB,GAAoC,UAACC,EAAD,EAQtE;AAPC,iBAAW,iBAAX;AAAA,MACAC,QAAQ,cADR;AAAA,MAEAC,eAAe,qBAFf;AAAA,MAGAC,aAAa,mBAHb;AAAA,MAIAC,OAAO,aAJP;AAAA,MAKAC,eAAe,qBALf;AAAA,MAMAC,KAAK,WANL;AAQA,SACEC,0CACGN,QAAQ,KAAKK,KAAK,IAAIF,OAAd,CAAR,IACCG,oBAACC,aAAD,EACMC,aAACL,OAAO,IAAI;AAAEM,MAAE,EAAEC;AAAN,GAAZ,EACJ;AAAAP,WAAO,EAAEA,OAAT;AACAQ,WAAO,EAAEP,eADT;AAEAC,SAAK,EAAEA;AAFP,GADI,CADN,EAMGL,QANH,CAFJ,EAWGC,eAAe,IACdK,oBAACC,aAAD,EAAc;AAACE,MAAE,EAAEC,WAAL;AAAkBP,WAAO,MAAzB;AAA0BQ,WAAO,EAAEP;AAAnC,GAAd,EACGH,eADH,CAZJ,EAgBGC,aAAa,IACZI,oBAACC,aAAD,EAAc;AAACF,SAAK,EAAC,IAAP;AAAOM,WAAO,EAAEP;AAAhB,GAAd,EACGF,aADH,CAjBJ,CADF;AAwBF,CAjCO;;AAmCPJ,sBAAsB,CAACc,SAAvB,GAAmC;AACjCF,aAAW,EAAEG,SAAS,CAACC,MADU;AAEjCd,UAAQ,EAAEa,SAAS,CAACE,SAAV,CAAoB,CAACF,SAAS,CAACG,IAAX,EAAiBH,SAAS,CAACC,MAA3B,CAApB,CAFuB;AAGjCZ,eAAa,EAAEW,SAAS,CAACE,SAAV,CAAoB,CAACF,SAAS,CAACG,IAAX,EAAiBH,SAAS,CAACC,MAA3B,CAApB,CAHkB;AAIjCb,iBAAe,EAAEY,SAAS,CAACE,SAAV,CAAoB,CAACF,SAAS,CAACG,IAAX,EAAiBH,SAAS,CAACC,MAA3B,CAApB,CAJgB;AAKjCX,SAAO,EAAEU,SAAS,CAACI,IALc;AAMjCb,iBAAe,EAAES,SAAS,CAACI,IANM;AAOjCZ,OAAK,EAAEQ,SAAS,CAACI;AAPgB,CAAnC;AAUAnB,sBAAsB,CAACoB,WAAvB,GAAqC,wBAArC","names":["CFormControlValidation","_a","feedback","feedbackInvalid","feedbackValid","invalid","tooltipFeedback","valid","React","CFormFeedback","__assign","id","describedby","tooltip","propTypes","PropTypes","string","oneOfType","node","bool","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react\\src\\components\\form\\CFormControlValidation.tsx"],"sourcesContent":["import React, { FC, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CFormFeedback } from './CFormFeedback'\n\nexport interface CFormControlValidationProps {\n  /**\n   * @ignore\n   */\n  describedby?: string\n  /**\n   * Provide valuable, actionable feedback.\n   *\n   * @since 4.2.0\n   */\n  feedback?: ReactNode | string\n  /**\n   * Provide valuable, actionable feedback.\n   *\n   * @since 4.2.0\n   */\n  feedbackInvalid?: ReactNode | string\n  /**\n   * Provide valuable, actionable invalid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  feedbackValid?: ReactNode | string\n  /**\n   * Provide valuable, actionable valid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  floatingLabel?: ReactNode | string\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * Display validation feedback in a styled tooltip.\n   *\n   * @since 4.2.0\n   */\n  tooltipFeedback?: boolean\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormControlValidation: FC<CFormControlValidationProps> = ({\n  describedby,\n  feedback,\n  feedbackInvalid,\n  feedbackValid,\n  invalid,\n  tooltipFeedback,\n  valid,\n}) => {\n  return (\n    <>\n      {feedback && (valid || invalid) && (\n        <CFormFeedback\n          {...(invalid && { id: describedby })}\n          invalid={invalid}\n          tooltip={tooltipFeedback}\n          valid={valid}\n        >\n          {feedback}\n        </CFormFeedback>\n      )}\n      {feedbackInvalid && (\n        <CFormFeedback id={describedby} invalid tooltip={tooltipFeedback}>\n          {feedbackInvalid}\n        </CFormFeedback>\n      )}\n      {feedbackValid && (\n        <CFormFeedback valid tooltip={tooltipFeedback}>\n          {feedbackValid}\n        </CFormFeedback>\n      )}\n    </>\n  )\n}\n\nCFormControlValidation.propTypes = {\n  describedby: PropTypes.string,\n  feedback: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackValid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  feedbackInvalid: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  invalid: PropTypes.bool,\n  tooltipFeedback: PropTypes.bool,\n  valid: PropTypes.bool,\n}\n\nCFormControlValidation.displayName = 'CFormControlValidation'\n"]},"metadata":{},"sourceType":"module"}