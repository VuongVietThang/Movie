{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nvar BREAKPOINTS = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];\nvar CCol = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      className = _a.className,\n      rest = __rest(_a, [\"children\", \"className\"]);\n\n  var repsonsiveClassNames = [];\n  BREAKPOINTS.forEach(function (bp) {\n    var breakpoint = rest[bp];\n    delete rest[bp];\n    var infix = bp === 'xs' ? '' : \"-\".concat(bp);\n\n    if (typeof breakpoint === 'number' || typeof breakpoint === 'string') {\n      repsonsiveClassNames.push(\"col\".concat(infix, \"-\").concat(breakpoint));\n    }\n\n    if (typeof breakpoint === 'boolean') {\n      repsonsiveClassNames.push(\"col\".concat(infix));\n    }\n\n    if (breakpoint && typeof breakpoint === 'object') {\n      if (typeof breakpoint.span === 'number' || typeof breakpoint.span === 'string') {\n        repsonsiveClassNames.push(\"col\".concat(infix, \"-\").concat(breakpoint.span));\n      }\n\n      if (typeof breakpoint.span === 'boolean') {\n        repsonsiveClassNames.push(\"col\".concat(infix));\n      }\n\n      if (typeof breakpoint.order === 'number' || typeof breakpoint.order === 'string') {\n        repsonsiveClassNames.push(\"order\".concat(infix, \"-\").concat(breakpoint.order));\n      }\n\n      if (typeof breakpoint.offset === 'number') {\n        repsonsiveClassNames.push(\"offset\".concat(infix, \"-\").concat(breakpoint.offset));\n      }\n    }\n  });\n  return React.createElement(\"div\", __assign({\n    className: classNames(repsonsiveClassNames.length > 0 ? repsonsiveClassNames : 'col', className)\n  }, rest, {\n    ref: ref\n  }), children);\n});\nvar span = PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string, PropTypes.oneOf(['auto'])]);\nvar col = PropTypes.oneOfType([span, PropTypes.shape({\n  span: span,\n  offset: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  order: PropTypes.oneOfType([PropTypes.oneOf(['first', 'last']), PropTypes.number, PropTypes.string])\n})]);\nCCol.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: col,\n  sm: col,\n  md: col,\n  lg: col,\n  xl: col,\n  xxl: col\n};\nCCol.displayName = 'CCol';\nexport { CCol };","map":{"version":3,"mappings":"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","names":["BREAKPOINTS","CCol","forwardRef","_a","ref","className","rest","__rest","repsonsiveClassNames","forEach","bp","breakpoint","infix","concat","push","span","order","offset","React","classNames","length","children","PropTypes","oneOfType","bool","number","string","oneOf","col","shape","propTypes","node","xs","sm","md","lg","xl","xxl","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react\\src\\components\\grid\\CCol.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\ntype Span = 'auto' | number | string | boolean | null\n\ntype BPObject = {\n  span?: Span\n  offset?: number | string | null\n  order?: 'first' | 'last' | number | string | null\n}\n\ntype Col = Span | BPObject\n\nexport interface CColProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xs?: Col\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  sm?: Col\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  md?: Col\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  lg?: Col\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xl?: Col\n  /**\n   * The number of columns/offset/order on XX-Large devices (â‰¥1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xxl?: Col\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CCol = forwardRef<HTMLDivElement, CColProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'number' || typeof breakpoint === 'string') {\n        repsonsiveClassNames.push(`col${infix}-${breakpoint}`)\n      }\n\n      if (typeof breakpoint === 'boolean') {\n        repsonsiveClassNames.push(`col${infix}`)\n      }\n\n      if (breakpoint && typeof breakpoint === 'object') {\n        if (typeof breakpoint.span === 'number' || typeof breakpoint.span === 'string') {\n          repsonsiveClassNames.push(`col${infix}-${breakpoint.span}`)\n        }\n\n        if (typeof breakpoint.span === 'boolean') {\n          repsonsiveClassNames.push(`col${infix}`)\n        }\n\n        if (typeof breakpoint.order === 'number' || typeof breakpoint.order === 'string') {\n          repsonsiveClassNames.push(`order${infix}-${breakpoint.order}`)\n        }\n\n        if (typeof breakpoint.offset === 'number') {\n          repsonsiveClassNames.push(`offset${infix}-${breakpoint.offset}`)\n        }\n      }\n    })\n\n    return (\n      <div\n        className={classNames(\n          repsonsiveClassNames.length > 0 ? repsonsiveClassNames : 'col',\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nconst span = PropTypes.oneOfType([\n  PropTypes.bool,\n  PropTypes.number,\n  PropTypes.string,\n  PropTypes.oneOf(['auto']),\n])\n\nconst col = PropTypes.oneOfType([\n  span,\n  PropTypes.shape({\n    span: span,\n    offset: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    order: PropTypes.oneOfType([\n      PropTypes.oneOf(['first', 'last']),\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n  }),\n])\n\nCCol.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: col,\n  sm: col,\n  md: col,\n  lg: col,\n  xl: col,\n  xxl: col,\n}\n\nCCol.displayName = 'CCol'\n"]},"metadata":{},"sourceType":"module"}