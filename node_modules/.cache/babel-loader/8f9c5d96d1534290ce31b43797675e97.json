{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { textColorsPropType, colorPropType, shapePropType } from '../../props.js';\nvar CBadge = forwardRef(function (_a, ref) {\n  var _b;\n\n  var children = _a.children,\n      _c = _a.as,\n      Component = _c === void 0 ? 'span' : _c,\n      className = _a.className,\n      color = _a.color,\n      position = _a.position,\n      shape = _a.shape,\n      size = _a.size,\n      textBgColor = _a.textBgColor,\n      textColor = _a.textColor,\n      rest = __rest(_a, [\"children\", \"as\", \"className\", \"color\", \"position\", \"shape\", \"size\", \"textBgColor\", \"textColor\"]);\n\n  return React.createElement(Component, __assign({\n    className: classNames('badge', (_b = {}, _b[\"bg-\".concat(color)] = color, _b['position-absolute translate-middle'] = position, _b['top-0'] = position === null || position === void 0 ? void 0 : position.includes('top'), _b['top-100'] = position === null || position === void 0 ? void 0 : position.includes('bottom'), _b['start-100'] = position === null || position === void 0 ? void 0 : position.includes('end'), _b['start-0'] = position === null || position === void 0 ? void 0 : position.includes('start'), _b[\"badge-\".concat(size)] = size, _b[\"text-\".concat(textColor)] = textColor, _b[\"text-bg-\".concat(textBgColor)] = textBgColor, _b), shape, className)\n  }, rest, {\n    ref: ref\n  }), children);\n});\nCBadge.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  position: PropTypes.oneOf(['top-start', 'top-end', 'bottom-end', 'bottom-start']),\n  shape: shapePropType,\n  size: PropTypes.oneOf(['sm']),\n  textBgColor: colorPropType,\n  textColor: textColorsPropType\n};\nCBadge.displayName = 'CBadge';\nexport { CBadge };","map":{"version":3,"mappings":";;;;;IAmDaA,MAAM,GAA2DC,UAAU,CAItF,UACEC,EADF,EAaEC,GAbF,EAaK;;;AAXD,cAAQ,cAAR;AAAA,MACAC,UADA;AAAA,MACIC,SAAS,mBAAG,MAAH,GAASD,EADtB;AAAA,MAEAE,SAAS,eAFT;AAAA,MAGAC,KAAK,WAHL;AAAA,MAIAC,QAAQ,cAJR;AAAA,MAKAC,KAAK,WALL;AAAA,MAMAC,IAAI,UANJ;AAAA,MAOAC,WAAW,iBAPX;AAAA,MAQAC,SAAS,eART;AAAA,MASGC,IAAI,cAVT,iGAUS,CATP;;AAaF,SACEC,oBAACT,SAAD,EAAUU;AACRT,aAAS,EAAEU,UAAU,CACnB,OADmB,GACZC,SAELA,GAAC,MAAMC,MAAN,CAAMX,KAAN,CAAD,IAAiBA,KAFZ,EAGLU,2CAAsCT,QAHjC,EAILS,EAAO,SAAP,GAAST,QAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEW,QAAV,CAAmB,KAAnB,CAJJ,EAKLF,EAAS,WAAT,GAAWT,QAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEW,QAAV,CAAmB,QAAnB,CALN,EAMLF,EAAW,aAAX,GAAaT,QAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEW,QAAV,CAAmB,KAAnB,CANR,EAOLF,EAAS,WAAT,GAAWT,QAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEW,QAAV,CAAmB,OAAnB,CAPN,EAQLF,GAAC,SAASC,MAAT,CAASR,IAAT,CAAD,IAAmBA,IARd,EASLO,GAAC,QAAQC,MAAR,CAAQN,SAAR,CAAD,IAAuBA,SATlB,EAULK,GAAC,WAAWC,MAAX,CAAWP,WAAX,CAAD,IAA4BA,WAVvB,EAYPM,EAbmB,GAanBR,KAbmB,EAcnBH,SAdmB;AADb,KAiBJO,IAjBI,EAiBA;AACRV,OAAG,EAAEA;AADG,GAjBA,CAAV,EAoBGiB,QApBH,CADF;AAwBD,CA3CqF;AA8CxFpB,MAAM,CAACqB,SAAP,GAAmB;AACjBC,IAAE,EAAEC,SAAS,CAACC,WADG;AAEjBJ,UAAQ,EAAEG,SAAS,CAACE,IAFH;AAGjBnB,WAAS,EAAEiB,SAAS,CAACG,MAHJ;AAIjBnB,OAAK,EAAEoB,aAJU;AAKjBnB,UAAQ,EAAEe,SAAS,CAACK,KAAV,CAAgB,CAAC,WAAD,EAAc,SAAd,EAAyB,YAAzB,EAAuC,cAAvC,CAAhB,CALO;AAMjBnB,OAAK,EAAEoB,aANU;AAOjBnB,MAAI,EAAEa,SAAS,CAACK,KAAV,CAAgB,CAAC,IAAD,CAAhB,CAPW;AAQjBjB,aAAW,EAAEgB,aARI;AASjBf,WAAS,EAAEkB;AATM,CAAnB;AAYA9B,MAAM,CAAC+B,WAAP,GAAqB,QAArB","names":["CBadge","forwardRef","_a","ref","_c","Component","className","color","position","shape","size","textBgColor","textColor","rest","React","__assign","classNames","_b","concat","includes","children","propTypes","as","PropTypes","elementType","node","string","colorPropType","oneOf","shapePropType","textColorsPropType","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react\\src\\components\\badge\\CBadge.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\nimport { colorPropType, shapePropType, textColorsPropType } from '../../props'\nimport type { Colors, Shapes, TextColors } from '../../types'\n\nexport interface CBadgeProps extends HTMLAttributes<HTMLDivElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Position badge in one of the corners of a link or button.\n   */\n  position?: 'top-start' | 'top-end' | 'bottom-end' | 'bottom-start'\n  /**\n   * Select the shape of the component.\n   *\n   * @type 'rounded' | 'rounded-top' | 'rounded-end' | 'rounded-bottom' | 'rounded-start' | 'rounded-circle' | 'rounded-pill' | 'rounded-0' | 'rounded-1' | 'rounded-2' | 'rounded-3' | string\n   */\n  shape?: Shapes\n  /**\n   * Size the component small.\n   */\n  size?: 'sm'\n  /**\n   * Sets the component's color scheme to one of CoreUI's themed colors, ensuring the text color contrast adheres to the WCAG 4.5:1 contrast ratio standard for accessibility.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   * @since 5.0.0\n   */\n  textBgColor?: Colors\n  /**\n   * Sets the text color of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: TextColors\n}\nexport const CBadge: PolymorphicRefForwardingComponent<'span', CBadgeProps> = forwardRef<\n  HTMLDivElement | HTMLSpanElement,\n  CBadgeProps\n>(\n  (\n    {\n      children,\n      as: Component = 'span',\n      className,\n      color,\n      position,\n      shape,\n      size,\n      textBgColor,\n      textColor,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <Component\n        className={classNames(\n          'badge',\n          {\n            [`bg-${color}`]: color,\n            'position-absolute translate-middle': position,\n            'top-0': position?.includes('top'),\n            'top-100': position?.includes('bottom'),\n            'start-100': position?.includes('end'),\n            'start-0': position?.includes('start'),\n            [`badge-${size}`]: size,\n            [`text-${textColor}`]: textColor,\n            [`text-bg-${textBgColor}`]: textBgColor,\n          },\n          shape,\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </Component>\n    )\n  },\n)\n\nCBadge.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  position: PropTypes.oneOf(['top-start', 'top-end', 'bottom-end', 'bottom-start']),\n  shape: shapePropType,\n  size: PropTypes.oneOf(['sm']),\n  textBgColor: colorPropType,\n  textColor: textColorsPropType,\n}\n\nCBadge.displayName = 'CBadge'\n"]},"metadata":{},"sourceType":"module"}