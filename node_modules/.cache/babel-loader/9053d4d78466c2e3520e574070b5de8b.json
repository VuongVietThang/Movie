{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CLink } from '../link/CLink.js';\nvar CCardLink = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      className = _a.className,\n      rest = __rest(_a, [\"children\", \"className\"]);\n\n  return React.createElement(CLink, __assign({\n    className: classNames('card-link', className)\n  }, rest, {\n    ref: ref\n  }), children);\n});\nCCardLink.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string\n};\nCCardLink.displayName = 'CCardLink';\nexport { CCardLink };","map":{"version":3,"mappings":";;;;;IAiBaA,SAAS,GAAGC,UAAU,CACjC,UAACC,EAAD,EAAmCC,GAAnC,EAAsC;AAAnC,cAAQ,cAAR;AAAA,MAAUC,SAAS,eAAnB;AAAA,MAAwBC,IAAI,GAA9BC,qCAAE;;AACD,SACEC,oBAACC,KAAD,EAAMC;AAACL,aAAS,EAAEM,UAAU,CAAC,WAAD,EAAcN,SAAd;AAAtB,KAAoDC,IAApD,EAAwD;AAAEF,OAAG,EAAEA;AAAP,GAAxD,CAAN,EACGQ,QADH,CADF;AAKD,CAPgC;AAUnCX,SAAS,CAACY,SAAV,GAAsB;AACpBD,UAAQ,EAAEE,SAAS,CAACC,IADA;AAEpBV,WAAS,EAAES,SAAS,CAACE;AAFD,CAAtB;AAKAf,SAAS,CAACgB,WAAV,GAAwB,WAAxB","names":["CCardLink","forwardRef","_a","ref","className","rest","__rest","React","CLink","__assign","classNames","children","propTypes","PropTypes","node","string","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\card\\CCardLink.tsx"],"sourcesContent":["import React, { AnchorHTMLAttributes, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CLink } from '../link/CLink'\n\nexport interface CCardLinkProps extends AnchorHTMLAttributes<HTMLAnchorElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The href attribute specifies the URL of the page the link goes to.\n   */\n  href?: string\n}\n\nexport const CCardLink = forwardRef<HTMLAnchorElement, CCardLinkProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <CLink className={classNames('card-link', className)} {...rest} ref={ref}>\n        {children}\n      </CLink>\n    )\n  },\n)\n\nCCardLink.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardLink.displayName = 'CCardLink'\n"]},"metadata":{},"sourceType":"module"}