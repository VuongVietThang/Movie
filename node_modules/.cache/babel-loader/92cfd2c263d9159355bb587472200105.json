{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useRef, useState, useEffect, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport isInViewport from '../../utils/isInViewport.js';\nimport '@popperjs/core';\nimport { useForkedRef } from '../../hooks/useForkedRef.js';\nimport { CCarouselContext } from './CCarouselContext.js';\nvar CCarousel = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      _b = _a.activeIndex,\n      activeIndex = _b === void 0 ? 0 : _b,\n      className = _a.className,\n      controls = _a.controls,\n      dark = _a.dark,\n      indicators = _a.indicators,\n      _c = _a.interval,\n      interval = _c === void 0 ? 5000 : _c,\n      onSlid = _a.onSlid,\n      onSlide = _a.onSlide,\n      _d = _a.pause,\n      pause = _d === void 0 ? 'hover' : _d,\n      _e = _a.touch,\n      touch = _e === void 0 ? true : _e,\n      transition = _a.transition,\n      _f = _a.wrap,\n      wrap = _f === void 0 ? true : _f,\n      rest = __rest(_a, [\"children\", \"activeIndex\", \"className\", \"controls\", \"dark\", \"indicators\", \"interval\", \"onSlid\", \"onSlide\", \"pause\", \"touch\", \"transition\", \"wrap\"]);\n\n  var carouselRef = useRef(null);\n  var forkedRef = useForkedRef(ref, carouselRef);\n  var data = useRef({}).current;\n\n  var _g = useState(activeIndex),\n      active = _g[0],\n      setActive = _g[1];\n\n  var _h = useState(false),\n      animating = _h[0],\n      setAnimating = _h[1];\n\n  var _j = useState(),\n      customInterval = _j[0],\n      setCustomInterval = _j[1];\n\n  var _k = useState('next'),\n      direction = _k[0],\n      setDirection = _k[1];\n\n  var _l = useState(0),\n      itemsNumber = _l[0],\n      setItemsNumber = _l[1];\n\n  var _m = useState(null),\n      touchPosition = _m[0],\n      setTouchPosition = _m[1];\n\n  var _o = useState(),\n      visible = _o[0],\n      setVisible = _o[1];\n\n  useEffect(function () {\n    setItemsNumber(Children.toArray(children).length);\n  });\n  useEffect(function () {\n    visible && cycle();\n  }, [visible]);\n  useEffect(function () {\n    !animating && cycle();\n    !animating && onSlid && onSlid(active, direction);\n    animating && onSlide && onSlide(active, direction);\n  }, [animating]);\n  useEffect(function () {\n    window.addEventListener('scroll', handleScroll);\n    return function () {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  });\n\n  var cycle = function () {\n    _pause();\n\n    if (!wrap && active === itemsNumber - 1) {\n      return;\n    }\n\n    if (typeof interval === 'number') {\n      data.timeout = setTimeout(function () {\n        return nextItemWhenVisible();\n      }, typeof customInterval === 'number' ? customInterval : interval);\n    }\n  };\n\n  var _pause = function () {\n    return pause && data.timeout && clearTimeout(data.timeout);\n  };\n\n  var nextItemWhenVisible = function () {\n    // Don't call next when the page isn't visible\n    // or the carousel or its parent isn't visible\n    if (!document.hidden && carouselRef.current && isInViewport(carouselRef.current)) {\n      if (animating) {\n        return;\n      }\n\n      handleControlClick('next');\n    }\n  };\n\n  var handleControlClick = function (direction) {\n    if (animating) {\n      return;\n    }\n\n    setDirection(direction);\n\n    if (direction === 'next') {\n      active === itemsNumber - 1 ? setActive(0) : setActive(active + 1);\n    } else {\n      active === 0 ? setActive(itemsNumber - 1) : setActive(active - 1);\n    }\n  };\n\n  var handleIndicatorClick = function (index) {\n    if (active === index) {\n      return;\n    }\n\n    if (active < index) {\n      setDirection('next');\n      setActive(index);\n      return;\n    }\n\n    if (active > index) {\n      setDirection('prev');\n      setActive(index);\n    }\n  };\n\n  var handleScroll = function () {\n    if (!document.hidden && carouselRef.current && isInViewport(carouselRef.current)) {\n      setVisible(true);\n    } else {\n      setVisible(false);\n    }\n  };\n\n  var handleTouchMove = function (e) {\n    var touchDown = touchPosition;\n\n    if (touchDown === null) {\n      return;\n    }\n\n    var currentTouch = e.touches[0].clientX;\n    var diff = touchDown - currentTouch;\n\n    if (diff > 5) {\n      handleControlClick('next');\n    }\n\n    if (diff < -5) {\n      handleControlClick('prev');\n    }\n\n    setTouchPosition(null);\n  };\n\n  var handleTouchStart = function (e) {\n    var touchDown = e.touches[0].clientX;\n    setTouchPosition(touchDown);\n  };\n\n  return React.createElement(\"div\", __assign({\n    className: classNames('carousel slide', {\n      'carousel-fade': transition === 'crossfade'\n    }, className)\n  }, dark && {\n    'data-coreui-theme': 'dark'\n  }, {\n    onMouseEnter: _pause,\n    onMouseLeave: cycle\n  }, touch && {\n    onTouchStart: handleTouchStart,\n    onTouchMove: handleTouchMove\n  }, rest, {\n    ref: forkedRef\n  }), React.createElement(CCarouselContext.Provider, {\n    value: {\n      setAnimating: setAnimating,\n      setCustomInterval: setCustomInterval\n    }\n  }, indicators && React.createElement(\"div\", {\n    className: \"carousel-indicators\"\n  }, Array.from({\n    length: itemsNumber\n  }, function (_, i) {\n    return i;\n  }).map(function (index) {\n    return React.createElement(\"button\", __assign({\n      key: \"indicator\".concat(index),\n      onClick: function () {\n        !animating && handleIndicatorClick(index);\n      },\n      className: classNames({\n        active: active === index\n      }),\n      \"data-coreui-target\": \"\"\n    }, active === index && {\n      'aria-current': true\n    }, {\n      \"aria-label\": \"Slide \".concat(index + 1)\n    }));\n  })), React.createElement(\"div\", {\n    className: \"carousel-inner\"\n  }, Children.map(children, function (child, index) {\n    if (React.isValidElement(child)) {\n      return React.cloneElement(child, {\n        active: active === index ? true : false,\n        direction: direction,\n        key: index\n      });\n    }\n\n    return;\n  })), controls && React.createElement(React.Fragment, null, React.createElement(\"button\", {\n    className: \"carousel-control-prev\",\n    onClick: function () {\n      return handleControlClick('prev');\n    }\n  }, React.createElement(\"span\", {\n    className: \"carousel-control-prev-icon\",\n    \"aria-label\": \"prev\"\n  })), React.createElement(\"button\", {\n    className: \"carousel-control-next\",\n    onClick: function () {\n      return handleControlClick('next');\n    }\n  }, React.createElement(\"span\", {\n    className: \"carousel-control-next-icon\",\n    \"aria-label\": \"next\"\n  })))));\n});\nCCarousel.propTypes = {\n  activeIndex: PropTypes.number,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  controls: PropTypes.bool,\n  dark: PropTypes.bool,\n  indicators: PropTypes.bool,\n  interval: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  onSlid: PropTypes.func,\n  onSlide: PropTypes.func,\n  pause: PropTypes.oneOf([false, 'hover']),\n  touch: PropTypes.bool,\n  transition: PropTypes.oneOf(['slide', 'crossfade']),\n  wrap: PropTypes.bool\n};\nCCarousel.displayName = 'CCarousel';\nexport { CCarousel };","map":{"version":3,"mappings":"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","names":["CCarousel","forwardRef","_a","ref","_b","activeIndex","className","controls","dark","indicators","_c","interval","onSlid","onSlide","_d","pause","_e","touch","transition","_f","wrap","rest","carouselRef","useRef","forkedRef","useForkedRef","data","current","useState","active","setActive","animating","setAnimating","customInterval","setCustomInterval","direction","setDirection","itemsNumber","setItemsNumber","touchPosition","setTouchPosition","visible","setVisible","useEffect","Children","toArray","children","length","cycle","window","addEventListener","handleScroll","removeEventListener","_pause","timeout","setTimeout","clearTimeout","nextItemWhenVisible","document","hidden","isInViewport","handleControlClick","handleIndicatorClick","index","handleTouchMove","e","touchDown","currentTouch","touches","clientX","diff","handleTouchStart","React","__assign","classNames","onMouseEnter","onMouseLeave","onTouchStart","onTouchMove","CCarouselContext","Provider","value","Array","from","_","i","map","key","onClick","concat","child","isValidElement","cloneElement","propTypes","PropTypes","number","node","string","bool","oneOfType","func","oneOf","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\carousel\\CCarousel.tsx"],"sourcesContent":["import React, {\n  Children,\n  forwardRef,\n  HTMLAttributes,\n  TouchEvent,\n  useState,\n  useEffect,\n  useRef,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { isInViewport } from '../../utils'\nimport { useForkedRef } from '../../hooks'\n\nimport { CCarouselContext } from './CCarouselContext'\n\nexport interface CCarouselProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * index of the active item.\n   */\n  activeIndex?: number\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Adding in the previous and next controls.\n   */\n  controls?: boolean\n  /**\n   * Add darker controls, indicators, and captions.\n   */\n  dark?: boolean\n  /**\n   * The amount of time to delay between automatically cycling an item. If false, carousel will not automatically cycle.\n   */\n  interval?: boolean | number\n  /**\n   * Adding indicators at the bottom of the carousel for each item.\n   */\n  indicators?: boolean\n  /**\n   * Callback fired when a slide transition end.\n   */\n  onSlid?: (active: number, direction: string) => void\n  /**\n   * Callback fired when a slide transition starts.\n   */\n  onSlide?: (active: number, direction: string) => void\n  /**\n   * If set to 'hover', pauses the cycling of the carousel on mouseenter and resumes the cycling of the carousel on mouseleave. If set to false, hovering over the carousel won't pause it.\n   */\n  pause?: boolean | 'hover'\n  /**\n   * Set whether the carousel should support left/right swipe interactions on touchscreen devices.\n   *\n   * @since 4.5.0\n   */\n  touch?: boolean\n  /**\n   * Set type of the transition.\n   */\n  transition?: 'slide' | 'crossfade'\n  /**\n   * Set whether the carousel should cycle continuously or have hard stops.\n   */\n  wrap?: boolean\n}\n\ninterface DataType {\n  timeout?: null | ReturnType<typeof setTimeout>\n}\n\nexport const CCarousel = forwardRef<HTMLDivElement, CCarouselProps>(\n  (\n    {\n      children,\n      activeIndex = 0,\n      className,\n      controls,\n      dark,\n      indicators,\n      interval = 5000,\n      onSlid,\n      onSlide,\n      pause = 'hover',\n      touch = true,\n      transition,\n      wrap = true,\n      ...rest\n    },\n    ref\n  ) => {\n    const carouselRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, carouselRef)\n    const data = useRef<DataType>({}).current\n\n    const [active, setActive] = useState<number>(activeIndex)\n    const [animating, setAnimating] = useState<boolean>(false)\n    const [customInterval, setCustomInterval] = useState<boolean | number>()\n    const [direction, setDirection] = useState<string>('next')\n    const [itemsNumber, setItemsNumber] = useState<number>(0)\n    const [touchPosition, setTouchPosition] = useState<number | null>(null)\n    const [visible, setVisible] = useState<boolean>()\n\n    useEffect(() => {\n      setItemsNumber(Children.toArray(children).length)\n    })\n\n    useEffect(() => {\n      visible && cycle()\n    }, [visible])\n\n    useEffect(() => {\n      !animating && cycle()\n      !animating && onSlid && onSlid(active, direction)\n      animating && onSlide && onSlide(active, direction)\n    }, [animating])\n\n    useEffect(() => {\n      window.addEventListener('scroll', handleScroll)\n\n      return () => {\n        window.removeEventListener('scroll', handleScroll)\n      }\n    })\n\n    const cycle = () => {\n      _pause()\n      if (!wrap && active === itemsNumber - 1) {\n        return\n      }\n\n      if (typeof interval === 'number') {\n        data.timeout = setTimeout(\n          () => nextItemWhenVisible(),\n          typeof customInterval === 'number' ? customInterval : interval\n        )\n      }\n    }\n    const _pause = () => pause && data.timeout && clearTimeout(data.timeout)\n\n    const nextItemWhenVisible = () => {\n      // Don't call next when the page isn't visible\n      // or the carousel or its parent isn't visible\n      if (!document.hidden && carouselRef.current && isInViewport(carouselRef.current)) {\n        if (animating) {\n          return\n        }\n        handleControlClick('next')\n      }\n    }\n\n    const handleControlClick = (direction: string) => {\n      if (animating) {\n        return\n      }\n      setDirection(direction)\n      if (direction === 'next') {\n        active === itemsNumber - 1 ? setActive(0) : setActive(active + 1)\n      } else {\n        active === 0 ? setActive(itemsNumber - 1) : setActive(active - 1)\n      }\n    }\n\n    const handleIndicatorClick = (index: number) => {\n      if (active === index) {\n        return\n      }\n\n      if (active < index) {\n        setDirection('next')\n        setActive(index)\n        return\n      }\n\n      if (active > index) {\n        setDirection('prev')\n        setActive(index)\n      }\n    }\n\n    const handleScroll = () => {\n      if (!document.hidden && carouselRef.current && isInViewport(carouselRef.current)) {\n        setVisible(true)\n      } else {\n        setVisible(false)\n      }\n    }\n\n    const handleTouchMove = (e: TouchEvent) => {\n      const touchDown = touchPosition\n\n      if (touchDown === null) {\n        return\n      }\n\n      const currentTouch = e.touches[0].clientX\n      const diff = touchDown - currentTouch\n\n      if (diff > 5) {\n        handleControlClick('next')\n      }\n\n      if (diff < -5) {\n        handleControlClick('prev')\n      }\n\n      setTouchPosition(null)\n    }\n\n    const handleTouchStart = (e: TouchEvent) => {\n      const touchDown = e.touches[0].clientX\n      setTouchPosition(touchDown)\n    }\n\n    return (\n      <div\n        className={classNames(\n          'carousel slide',\n          {\n            'carousel-fade': transition === 'crossfade',\n          },\n          className\n        )}\n        {...(dark && { 'data-coreui-theme': 'dark' })}\n        onMouseEnter={_pause}\n        onMouseLeave={cycle}\n        {...(touch && { onTouchStart: handleTouchStart, onTouchMove: handleTouchMove })}\n        {...rest}\n        ref={forkedRef}\n      >\n        <CCarouselContext.Provider\n          value={{\n            setAnimating,\n            setCustomInterval,\n          }}\n        >\n          {indicators && (\n            <div className=\"carousel-indicators\">\n              {Array.from({ length: itemsNumber }, (_, i) => i).map((index) => {\n                return (\n                  <button\n                    key={`indicator${index}`}\n                    onClick={() => {\n                      !animating && handleIndicatorClick(index)\n                    }}\n                    className={classNames({\n                      active: active === index,\n                    })}\n                    data-coreui-target=\"\"\n                    {...(active === index && { 'aria-current': true })}\n                    aria-label={`Slide ${index + 1}`}\n                  />\n                )\n              })}\n            </div>\n          )}\n          <div className=\"carousel-inner\">\n            {Children.map(children, (child, index) => {\n              if (React.isValidElement(child)) {\n                return React.cloneElement(child as React.ReactElement<any>, {\n                  active: active === index ? true : false,\n                  direction: direction,\n                  key: index,\n                })\n              }\n              return\n            })}\n          </div>\n          {controls && (\n            <>\n              <button className=\"carousel-control-prev\" onClick={() => handleControlClick('prev')}>\n                <span className={`carousel-control-prev-icon`} aria-label=\"prev\" />\n              </button>\n              <button className=\"carousel-control-next\" onClick={() => handleControlClick('next')}>\n                <span className={`carousel-control-next-icon`} aria-label=\"next\" />\n              </button>\n            </>\n          )}\n        </CCarouselContext.Provider>\n      </div>\n    )\n  }\n)\n\nCCarousel.propTypes = {\n  activeIndex: PropTypes.number,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  controls: PropTypes.bool,\n  dark: PropTypes.bool,\n  indicators: PropTypes.bool,\n  interval: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n  onSlid: PropTypes.func,\n  onSlide: PropTypes.func,\n  pause: PropTypes.oneOf([false, 'hover']),\n  touch: PropTypes.bool,\n  transition: PropTypes.oneOf(['slide', 'crossfade']),\n  wrap: PropTypes.bool,\n}\n\nCCarousel.displayName = 'CCarousel'\n"]},"metadata":{},"sourceType":"module"}