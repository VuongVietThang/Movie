{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { colorPropType } from '../../props.js';\nvar CTableHeaderCell = forwardRef(function (_a, ref) {\n  var _b;\n\n  var children = _a.children,\n      className = _a.className,\n      color = _a.color,\n      rest = __rest(_a, [\"children\", \"className\", \"color\"]);\n\n  return React.createElement(\"th\", __assign({\n    className: classNames((_b = {}, _b[\"table-\".concat(color)] = color, _b), className) || undefined\n  }, rest, {\n    ref: ref\n  }), children);\n});\nCTableHeaderCell.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType\n};\nCTableHeaderCell.displayName = 'CTableHeaderCell';\nexport { CTableHeaderCell };","map":{"version":3,"mappings":";;;;;IAoBaA,gBAAgB,GAAGC,UAAU,CACxC,UAACC,EAAD,EAA0CC,GAA1C,EAA6C;;;AAA1C,cAAQ,cAAR;AAAA,MAAUC,SAAS,eAAnB;AAAA,MAAqBC,KAAK,WAA1B;AAAA,MAA+BC,IAAI,GAArCC,8CAAE;;AACD,SACEC;AACEJ,aAAS,EACPK,UAAU,WAENC,GAAC,SAASC,MAAT,CAASN,KAAT,CAAD,IAAoBA,KAFd,EAIRK,EAJQ,GAIRN,SAJQ,CAAV,IAKKQ;AAPT,KASMN,IATN,EASU;AACRH,OAAG,EAAEA;AADG,GATV,GAYGU,QAZH,CADF;AAgBD,CAlBuC;AAqB1Cb,gBAAgB,CAACc,SAAjB,GAA6B;AAC3BD,UAAQ,EAAEE,SAAS,CAACC,IADO;AAE3BZ,WAAS,EAAEW,SAAS,CAACE,MAFM;AAG3BZ,OAAK,EAAEa;AAHoB,CAA7B;AAMAlB,gBAAgB,CAACmB,WAAjB,GAA+B,kBAA/B","names":["CTableHeaderCell","forwardRef","_a","ref","className","color","rest","__rest","React","classNames","_b","concat","undefined","children","propTypes","PropTypes","node","string","colorPropType","displayName"],"sources":["C:\\wamp64\\www\\Movie\\node_modules\\@coreui\\react\\src\\components\\table\\CTableHeaderCell.tsx"],"sourcesContent":["import React, { forwardRef, ThHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableHeaderCellProps extends ThHTMLAttributes<HTMLTableCellElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUIâ€™s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableHeaderCell = forwardRef<HTMLTableCellElement, CTableHeaderCellProps>(\n  ({ children, className, color, ...rest }, ref) => {\n    return (\n      <th\n        className={\n          classNames(\n            {\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </th>\n    )\n  },\n)\n\nCTableHeaderCell.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableHeaderCell.displayName = 'CTableHeaderCell'\n"]},"metadata":{},"sourceType":"module"}