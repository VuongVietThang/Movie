{"ast":null,"code":"import { __assign } from '../node_modules/tslib/tslib.es6.js';\nimport { useRef, useState, useEffect } from 'react';\nimport { usePopper } from './usePopper.js';\nimport isRTL from '../utils/isRTL.js';\n\nvar useDropdownWithPopper = function (popperConfig) {\n  var dropdownRefElement = useRef(null);\n  var dropdownMenuElement = useRef(null);\n\n  var _a = useState(false),\n      isOpen = _a[0],\n      setIsOpen = _a[1];\n\n  var _b = usePopper(),\n      popper = _b.popper,\n      initPopper = _b.initPopper,\n      destroyPopper = _b.destroyPopper;\n\n  var _popperConfig = __assign({\n    placement: isRTL(dropdownRefElement.current) ? 'bottom-end' : 'bottom-start',\n    modifiers: [{\n      name: 'preventOverflow',\n      options: {\n        boundary: 'clippingParents'\n      }\n    }, {\n      name: 'offset',\n      options: {\n        offset: [0, 2]\n      }\n    }]\n  }, popperConfig);\n\n  var closeDropdown = function () {\n    setIsOpen(false);\n  };\n\n  var openDropdown = function () {\n    setIsOpen(true);\n  };\n\n  var toggleDropdown = function () {\n    setIsOpen(function (prev) {\n      return !prev;\n    });\n  };\n\n  var updatePopper = function () {\n    if (popper) {\n      popper.update();\n    }\n  };\n\n  var handleKeyUp = function (event) {\n    if (event.key === 'Escape') {\n      setIsOpen(false);\n      return;\n    }\n\n    if (event.key === 'Tab') {\n      if (dropdownRefElement.current && dropdownRefElement.current.contains(document.activeElement)) {\n        return;\n      }\n\n      if (dropdownMenuElement.current && dropdownMenuElement.current.contains(document.activeElement)) {\n        return;\n      }\n\n      setIsOpen(false);\n    }\n  };\n\n  var handleMouseUp = function (event) {\n    if (dropdownMenuElement.current && dropdownMenuElement.current.contains(event.target) || dropdownRefElement.current && dropdownRefElement.current.contains(event.target)) {\n      return;\n    }\n\n    setIsOpen(false);\n  };\n\n  useEffect(function () {\n    if (isOpen) {\n      window.addEventListener('mouseup', handleMouseUp);\n      window.addEventListener('keyup', handleKeyUp);\n\n      if (dropdownRefElement.current && dropdownMenuElement.current) {\n        initPopper(dropdownRefElement.current, dropdownMenuElement.current, _popperConfig);\n      }\n    } else {\n      window.removeEventListener('mouseup', handleMouseUp);\n      window.removeEventListener('keyup', handleKeyUp);\n      destroyPopper();\n    }\n\n    return function () {\n      window.removeEventListener('mouseup', handleMouseUp);\n      window.removeEventListener('keyup', handleKeyUp);\n      destroyPopper();\n    };\n  }, [isOpen]);\n  return {\n    dropdownMenuElement: dropdownMenuElement,\n    dropdownRefElement: dropdownRefElement,\n    isOpen: isOpen,\n    closeDropdown: closeDropdown,\n    openDropdown: openDropdown,\n    toggleDropdown: toggleDropdown,\n    updatePopper: updatePopper\n  };\n};\n\nexport { useDropdownWithPopper };","map":{"version":3,"mappings":"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","names":["useDropdownWithPopper","popperConfig","dropdownRefElement","useRef","dropdownMenuElement","useState","isOpen","setIsOpen","popper","initPopper","destroyPopper","_popperConfig","placement","isRTL","current","modifiers","name","options","boundary","offset","closeDropdown","openDropdown","toggleDropdown","prev","updatePopper","update","handleKeyUp","event","key","contains","document","activeElement","handleMouseUp","target","useEffect","window","addEventListener","removeEventListener"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\hooks\\useDropdownWithPopper.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react'\nimport { type Options, type Placement } from '@popperjs/core'\n\nimport { usePopper } from './usePopper'\nimport { isRTL } from '../utils'\n\nexport const useDropdownWithPopper = <T extends HTMLElement = never>(\n  popperConfig?: Partial<Options>,\n) => {\n  const dropdownRefElement = useRef<T>(null)\n  const dropdownMenuElement = useRef<HTMLDivElement | null>(null)\n  const [isOpen, setIsOpen] = useState<boolean>(false)\n\n  const { popper, initPopper, destroyPopper } = usePopper()\n\n  const _popperConfig = {\n    placement: (isRTL(dropdownRefElement.current) ? 'bottom-end' : 'bottom-start') as Placement,\n    modifiers: [\n      {\n        name: 'preventOverflow',\n        options: {\n          boundary: 'clippingParents',\n        },\n      },\n      {\n        name: 'offset',\n        options: {\n          offset: [0, 2],\n        },\n      },\n    ],\n    ...popperConfig,\n  }\n\n  const closeDropdown = () => {\n    setIsOpen(false)\n  }\n\n  const openDropdown = () => {\n    setIsOpen(true)\n  }\n\n  const toggleDropdown = () => {\n    setIsOpen((prev) => !prev)\n  }\n\n  const updatePopper = () => {\n    if (popper) {\n      popper.update()\n    }\n  }\n\n  const handleKeyUp = (event: KeyboardEvent) => {\n    if (event.key === 'Escape') {\n      setIsOpen(false)\n      return\n    }\n\n    if (event.key === 'Tab') {\n      if (\n        dropdownRefElement.current &&\n        dropdownRefElement.current.contains(document.activeElement as HTMLElement)\n      ) {\n        return\n      }\n\n      if (\n        dropdownMenuElement.current &&\n        dropdownMenuElement.current.contains(document.activeElement as HTMLElement)\n      ) {\n        return\n      }\n\n      setIsOpen(false)\n    }\n  }\n\n  const handleMouseUp = (event: Event) => {\n    if (\n      (dropdownMenuElement.current &&\n        dropdownMenuElement.current.contains(event.target as HTMLElement)) ||\n      (dropdownRefElement.current &&\n        dropdownRefElement.current.contains(event.target as HTMLElement))\n    ) {\n      return\n    }\n\n    setIsOpen(false)\n  }\n\n  useEffect(() => {\n    if (isOpen) {\n      window.addEventListener('mouseup', handleMouseUp)\n      window.addEventListener('keyup', handleKeyUp)\n\n      if (dropdownRefElement.current && dropdownMenuElement.current) {\n        initPopper(dropdownRefElement.current, dropdownMenuElement.current, _popperConfig)\n      }\n    } else {\n      window.removeEventListener('mouseup', handleMouseUp)\n      window.removeEventListener('keyup', handleKeyUp)\n\n      destroyPopper()\n    }\n\n    return () => {\n      window.removeEventListener('mouseup', handleMouseUp)\n      window.removeEventListener('keyup', handleKeyUp)\n\n      destroyPopper()\n    }\n  }, [isOpen])\n\n  return {\n    dropdownMenuElement,\n    dropdownRefElement,\n    isOpen,\n    closeDropdown,\n    openDropdown,\n    toggleDropdown,\n    updatePopper,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}