{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useRef, useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CLink } from '../link/CLink.js';\nimport { CSidebarNavContext } from '../sidebar/CSidebarNavContext.js';\nimport '@popperjs/core';\nimport { useForkedRef } from '../../hooks/useForkedRef.js';\nvar CNavLink = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      className = _a.className,\n      idx = _a.idx,\n      rest = __rest(_a, [\"children\", \"className\", \"idx\"]);\n\n  var navLinkRef = useRef(null);\n  var forkedRef = useForkedRef(ref, navLinkRef);\n  var setVisibleGroup = useContext(CSidebarNavContext).setVisibleGroup;\n  useEffect(function () {\n    var _a;\n\n    rest.active = (_a = navLinkRef.current) === null || _a === void 0 ? void 0 : _a.classList.contains('active');\n    idx && rest.active && setVisibleGroup(idx);\n  }, [rest.active, className]);\n  return React.createElement(CLink, __assign({\n    className: classNames('nav-link', className)\n  }, rest, {\n    ref: forkedRef\n  }), children);\n});\nCNavLink.propTypes = {\n  active: PropTypes.bool,\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  idx: PropTypes.string\n};\nCNavLink.displayName = 'CNavLink';\nexport { CNavLink };","map":{"version":3,"mappings":";;;;;;;;IAqBaA,QAAQ,GAA0DC,UAAU,CAGvF,UAACC,EAAD,EAAwCC,GAAxC,EAA2C;AAAxC,cAAQ,cAAR;AAAA,MAAUC,SAAS,eAAnB;AAAA,MAAqBC,GAAG,SAAxB;AAAA,MAA6BC,IAAI,GAAnCC,4CAAE;;AACH,MAAMC,UAAU,GAAGC,MAAM,CAAoB,IAApB,CAAzB;AACA,MAAMC,SAAS,GAAGC,YAAY,CAACR,GAAD,EAAMK,UAAN,CAA9B;AAEQ,qBAAe,GAAKI,UAAU,CAACC,kBAAD,CAAV,CAA8BC,eAAlD;AAERC,WAAS,CAAC;;;AACRT,QAAI,CAACU,MAAL,GAAc,gBAAU,CAACC,OAAX,MAAoB,IAApB,IAAoBf,aAApB,GAAoB,MAApB,GAAoBA,aAAUgB,QAAV,CAAmB,QAAnB,CAAlC;AACAb,OAAG,IAAIC,IAAI,CAACU,MAAZ,IAAsBF,eAAe,CAACT,GAAD,CAArC;AACD,GAHQ,EAGN,CAACC,IAAI,CAACU,MAAN,EAAcZ,SAAd,CAHM,CAAT;AAKA,SACEe,oBAACC,KAAD,EAAMC;AAACjB,aAAS,EAAEkB,UAAU,CAAC,UAAD,EAAalB,SAAb;AAAtB,KAAmDE,IAAnD,EAAuD;AAAEH,OAAG,EAAEO;AAAP,GAAvD,CAAN,EACGa,QADH,CADF;AAKD,CAnBwF;AAqBzFvB,QAAQ,CAACwB,SAAT,GAAqB;AACnBR,QAAM,EAAES,SAAS,CAACC,IADC;AAEnBC,IAAE,EAAEF,SAAS,CAACG,WAFK;AAGnBL,UAAQ,EAAEE,SAAS,CAACI,IAHD;AAInBzB,WAAS,EAAEqB,SAAS,CAACK,MAJF;AAKnBC,UAAQ,EAAEN,SAAS,CAACC,IALD;AAMnBrB,KAAG,EAAEoB,SAAS,CAACK;AANI,CAArB;AASA9B,QAAQ,CAACgC,WAAT,GAAuB,UAAvB","names":["CNavLink","forwardRef","_a","ref","className","idx","rest","__rest","navLinkRef","useRef","forkedRef","useForkedRef","useContext","CSidebarNavContext","setVisibleGroup","useEffect","active","current","contains","React","CLink","__assign","classNames","children","propTypes","PropTypes","bool","as","elementType","node","string","disabled","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\nav\\CNavLink.tsx"],"sourcesContent":["import React, { forwardRef, useContext, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CLinkProps, CLink } from '../link/CLink'\nimport { CSidebarNavContext } from '../sidebar/CSidebarNavContext'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\nimport { useForkedRef } from '../../hooks'\n\nexport interface CNavLinkProps extends Omit<CLinkProps, 'idx'> {\n  /**\n   * @ignore\n   */\n  idx?: string\n  /**\n   * @ignore\n   */\n  to?: string\n}\n\nexport const CNavLink: PolymorphicRefForwardingComponent<'a', CNavLinkProps> = forwardRef<\n  HTMLButtonElement | HTMLAnchorElement,\n  CNavLinkProps\n>(({ children, className, idx, ...rest }, ref) => {\n  const navLinkRef = useRef<HTMLAnchorElement>(null)\n  const forkedRef = useForkedRef(ref, navLinkRef)\n\n  const { setVisibleGroup } = useContext(CSidebarNavContext)\n\n  useEffect(() => {\n    rest.active = navLinkRef.current?.classList.contains('active')\n    idx && rest.active && setVisibleGroup(idx)\n  }, [rest.active, className])\n\n  return (\n    <CLink className={classNames('nav-link', className)} {...rest} ref={forkedRef}>\n      {children}\n    </CLink>\n  )\n})\n\nCNavLink.propTypes = {\n  active: PropTypes.bool,\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n  idx: PropTypes.string,\n}\n\nCNavLink.displayName = 'CNavLink'\n"]},"metadata":{},"sourceType":"module"}