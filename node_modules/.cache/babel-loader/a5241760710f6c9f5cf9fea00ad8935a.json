{"ast":null,"code":"import { __rest, __spreadArray } from '../../node_modules/tslib/tslib.es6.js';\n\nvar createOption = function (label, options) {\n  var value = label.toLowerCase().replace(/\\s/g, '-');\n  var uniqueValue = value;\n  var i = 1;\n\n  while (options.some(function (option) {\n    return String(option.value) === uniqueValue;\n  })) {\n    uniqueValue = \"\".concat(value, \"-\").concat(i);\n    i++;\n  }\n\n  return [{\n    value: uniqueValue,\n    label: label,\n    custom: true\n  }];\n};\n\nvar filterOptionsList = function (search, _options) {\n  if (search.length > 0 && _options) {\n    var optionsList = [];\n\n    for (var _i = 0, _options_1 = _options; _i < _options_1.length; _i++) {\n      var option = _options_1[_i];\n      var options = option.options && option.options.filter(function (option) {\n        return option.label && option.label.toLowerCase().includes(search.toLowerCase());\n      });\n\n      if (option.label && option.label.toLowerCase().includes(search.toLowerCase()) || options && options.length > 0) {\n        optionsList.push(Object.assign({}, option, options && options.length > 0 && {\n          options: options\n        }));\n      }\n    }\n\n    return optionsList;\n  }\n\n  return _options;\n};\n\nvar flattenOptionsArray = function (options, keepGroupLabel) {\n  var optionsList = [];\n\n  for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {\n    var option = options_1[_i];\n\n    if (Array.isArray(option.options)) {\n      var options_2 = option.options,\n          rest = __rest(option, [\"options\"]);\n\n      if (keepGroupLabel) {\n        optionsList.push(rest);\n      }\n\n      optionsList.push.apply(optionsList, options_2);\n    } else {\n      optionsList.push(option);\n    }\n  }\n\n  return optionsList;\n};\n\nvar getNextSibling = function (elem, selector) {\n  // Get the next sibling element\n  var sibling = elem.nextElementSibling; // If the sibling matches our selector, use it\n  // If not, jump to the next sibling and continue the loop\n\n  while (sibling) {\n    if (sibling.matches(selector)) return sibling;\n    sibling = sibling.nextElementSibling;\n  }\n\n  return;\n};\n\nvar getOptionsList = function (container) {\n  return Array.from(container.querySelectorAll('.form-multi-select-option:not(.disabled):not(:disabled)'));\n};\n\nvar getPreviousSibling = function (elem, selector) {\n  // Get the next sibling element\n  var sibling = elem.previousElementSibling; // If the sibling matches our selector, use it\n  // If not, jump to the next sibling and continue the loop\n\n  while (sibling) {\n    if (sibling.matches(selector)) return sibling;\n    sibling = sibling.previousElementSibling;\n  }\n\n  return;\n};\n\nvar isExternalSearch = function (search) {\n  return typeof search === 'string' && search === 'external' || typeof search === 'object' && search.external === true;\n};\n\nvar isGlobalSearch = function (search) {\n  return typeof search === 'string' && search === 'global' || typeof search === 'object' && search.global === true;\n};\n\nvar selectOptions = function (multiple, options, selected, deselected) {\n  if (!multiple) {\n    return [options[0]];\n  }\n\n  var _selected = __spreadArray(__spreadArray([], selected, true), options, true);\n\n  if (deselected) {\n    _selected = _selected.filter(function (selectedOption) {\n      return !deselected.some(function (deselectedOption) {\n        return deselectedOption.value === selectedOption.value;\n      });\n    });\n  }\n\n  var deduplicated = [];\n\n  var _loop_1 = function (option) {\n    if (!deduplicated.some(function (obj) {\n      return obj.value === option.value;\n    })) {\n      deduplicated.push(option);\n    }\n  };\n\n  for (var _i = 0, _selected_1 = _selected; _i < _selected_1.length; _i++) {\n    var option = _selected_1[_i];\n\n    _loop_1(option);\n  }\n\n  return deduplicated;\n};\n\nexport { createOption, filterOptionsList, flattenOptionsArray, getNextSibling, getOptionsList, getPreviousSibling, isExternalSearch, isGlobalSearch, selectOptions };","map":{"version":3,"mappings":";;AAEa,gBAAY,GAAG,UAACA,KAAD,EAAgBC,OAAhB,EAAkD;AAC5E,MAAMC,KAAK,GAAGF,KAAK,CAACG,WAAN,GAAoBC,OAApB,CAA4B,KAA5B,EAAmC,GAAnC,CAAd;AACA,MAAIC,WAAW,GAAGH,KAAlB;AACA,MAAII,CAAC,GAAG,CAAR;;AAEA,SAAOL,OAAO,CAACM,IAAR,CAAa,UAACC,MAAD,EAAO;AAAK,iBAAM,CAACA,MAAM,CAACN,KAAR,CAAN,KAAyBG,WAAzB;AAAoC,GAA7D,CAAP,EAAuE;AACrEA,eAAW,GAAG,GAAGI,MAAH,CAAGP,KAAH,EAAY,GAAZ,EAAYO,MAAZ,CAAYH,CAAZ,CAAd;AACAA,KAAC;;;AAGH,SAAO,CACL;AACEJ,SAAK,EAAEG,WADT;AAEEL,SAAK,OAFP;AAGEU,UAAM,EAAE;AAHV,GADK,CAAP;AAOF,CAjBa;;AAmBA,qBAAiB,GAAG,UAACC,MAAD,EAAiBC,QAAjB,EAAoD;AACnF,MAAID,MAAM,CAACE,MAAP,GAAgB,CAAhB,IAAqBD,QAAzB,EAAmC;AACjC,QAAME,WAAW,GAAG,EAApB;;AAEA,SAAqB,sBAAQ,WAA7B,EAAqBC,sBAArB,EAAqBA,IAArB,EAA+B;AAA1B,UAAMP,MAAM,iBAAZ;AACH,UAAMP,OAAO,GACXO,MAAM,CAACP,OAAP,IACAO,MAAM,CAACP,OAAP,CAAee,MAAf,CACE,UAACR,MAAD,EAAe;AACb,qBAAM,CAACR,KAAP,IAAgBQ,MAAM,CAACR,KAAP,CAAaG,WAAb,GAA2Bc,QAA3B,CAAoCN,MAAM,CAACR,WAAP,EAApC,CAAhB;AAAyE,OAF7E,CAFF;;AAMA,UACGK,MAAM,CAACR,KAAP,IAAgBQ,MAAM,CAACR,KAAP,CAAaG,WAAb,GAA2Bc,QAA3B,CAAoCN,MAAM,CAACR,WAAP,EAApC,CAAjB,IACCF,OAAO,IAAIA,OAAO,CAACY,MAAR,GAAiB,CAF/B,EAGE;AACAC,mBAAW,CAACI,IAAZ,CAAiBC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,MAAlB,EAA0BP,OAAO,IAAIA,OAAO,CAACY,MAAR,GAAiB,CAA5B,IAAiC;AAAEZ,iBAAO;AAAT,SAA3D,CAAjB;;;;AAIJ,WAAOa,WAAP;;;AAGF,SAAOF,QAAP;AACF,CAvBa;;AAyBA,uBAAmB,GAAG,UACjCX,OADiC,EAEjCoB,cAFiC,EAET;AAExB,MAAMP,WAAW,GAA8B,EAA/C;;AAEA,OAAqB,qBAAO,UAA5B,EAAqBC,qBAArB,EAAqBA,IAArB,EAA8B;AAAzB,QAAMP,MAAM,gBAAZ;;AACH,QAAIc,KAAK,CAACC,OAAN,CAAcf,MAAM,CAACP,OAArB,CAAJ,EAAmC;AACzB,mBAAO,GAAcO,MAAM,CAApBP,OAAP;AAAA,UAAYuB,IAAI,UAAKhB,MAAL,EAAlB,CAAoB,SAApB,CAAkB,CAAhB;;AACR,UAAIa,cAAJ,EAAoB;AAClBP,mBAAW,CAACI,IAAZ,CAAiBM,IAAjB;;;AAGFV,iBAAW,CAACI,IAAZ,CAAgBO,KAAhB,cAAoBC,SAApB;KANF,MAOO;AACLZ,iBAAW,CAACI,IAAZ,CAAiBV,MAAjB;;;;AAIJ,SAAOM,WAAP;AACF,CApBa;;AAsBA,kBAAc,GAAG,UAACa,IAAD,EAAoBC,QAApB,EAAqC;;AAEjE,MAAIC,OAAO,GAAGF,IAAI,CAACG,kBAAnB,CAFiE;;;AASjE,SAAOD,OAAP,EAAgB;AACd,QAAIA,OAAO,CAACE,OAAR,CAAgBH,QAAhB,CAAJ,EAA+B,OAAOC,OAAP;AAC/BA,WAAO,GAAGA,OAAO,CAACC,kBAAlB;;;AAGF;AACF,CAfa;;AAiBN,IAAME,cAAc,GAAG,UAACC,SAAD,EAAuB;AACnD,SAAOX,KAAK,CAACY,IAAN,CACLD,SAAS,CAACE,gBAAV,CAA2B,yDAA3B,CADK,CAAP;AAGF,CAJO;;AAMM,sBAAkB,GAAG,UAACR,IAAD,EAAoBC,QAApB,EAAqC;;AAErE,MAAIC,OAAO,GAAGF,IAAI,CAACS,sBAAnB,CAFqE;;;AASrE,SAAOP,OAAP,EAAgB;AACd,QAAIA,OAAO,CAACE,OAAR,CAAgBH,QAAhB,CAAJ,EAA+B,OAAOC,OAAP;AAC/BA,WAAO,GAAGA,OAAO,CAACO,sBAAlB;;;AAGF;AACF,CAfa;;AAiBN,IAAMC,gBAAgB,GAAG,UAAC1B,MAAD,EAAe;AAC7C,SACG,OAAOA,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,KAAK,UAA1C,IACC,OAAOA,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAAC2B,QAAP,KAAoB,IAFrD;AAIF,CALO;;AAOA,IAAMC,cAAc,GAAG,UAAC5B,MAAD,EAAe;AAC3C,SACG,OAAOA,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,KAAK,QAA1C,IACC,OAAOA,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAAC6B,MAAP,KAAkB,IAFnD;AAIF,CALO;;AAOM,iBAAa,GAAG,UAC3BC,QAD2B,EAE3BxC,OAF2B,EAG3ByC,QAH2B,EAI3BC,UAJ2B,EAIN;AAErB,MAAI,CAACF,QAAL,EAAe;AACb,WAAO,CAACxC,OAAO,CAAC,CAAD,CAAR,CAAP;;;AAGF,MAAI2C,SAAS,GAAOC,0CAAa,IAAb,GAAa5C,OAAb,EAAoB,IAApB,CAApB;;AAEA,MAAI0C,UAAJ,EAAgB;AACdC,aAAS,GAAGA,SAAS,CAAC5B,MAAV,CACV,UAAC8B,cAAD,EAAe;AACb,cAACH,UAAU,CAACpC,IAAX,CAAgB,UAACwC,gBAAD,EAAsB;AAAA,+BAAgB,CAAC7C,KAAjB,KAA2B4C,cAAc,CAAC5C,KAA1C;AAA+C,OAArF,CAAD;AAAuF,KAF/E,CAAZ;;;AAMF,MAAM8C,YAAY,GAAqB,EAAvC;;0BAEWxC,QAAM;AACf,QAAI,CAACwC,YAAY,CAACzC,IAAb,CAAkB,UAAC0C,GAAD,EAAI;AAAK,gBAAG,CAAC/C,KAAJ,KAAcM,MAAM,CAACN,KAArB;AAA0B,KAArD,CAAL,EAA6D;AAC3D8C,kBAAY,CAAC9B,IAAb,CAAkBV,MAAlB;;;;AAFJ,OAAqB,mCAArB,EAAqBO,uBAArB,EAAqBA,EAAS,EAA9B,EAA8B;AAAzB,QAAMP,MAAM,kBAAZ;;YAAMA;AAIV;;AAED,SAAOwC,YAAP;AACF,CA5Ba","names":["label","options","value","toLowerCase","replace","uniqueValue","i","some","option","concat","custom","search","_options","length","optionsList","_i","filter","includes","push","Object","assign","keepGroupLabel","Array","isArray","rest","apply","options_2","elem","selector","sibling","nextElementSibling","matches","getOptionsList","container","from","querySelectorAll","previousElementSibling","isExternalSearch","external","isGlobalSearch","global","multiple","selected","deselected","_selected","__spreadArray","selectedOption","deselectedOption","deduplicated","obj"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\multi-select\\utils.ts"],"sourcesContent":["import type { Option, OptionsGroup, Search, SelectedOption } from './types'\n\nexport const createOption = (label: string, options: (Option | OptionsGroup)[]) => {\n  const value = label.toLowerCase().replace(/\\s/g, '-')\n  let uniqueValue = value\n  let i = 1\n\n  while (options.some((option) => String(option.value) === uniqueValue)) {\n    uniqueValue = `${value}-${i}`\n    i++\n  }\n\n  return [\n    {\n      value: uniqueValue,\n      label,\n      custom: true,\n    },\n  ]\n}\n\nexport const filterOptionsList = (search: string, _options: (Option | OptionsGroup)[]) => {\n  if (search.length > 0 && _options) {\n    const optionsList = []\n\n    for (const option of _options) {\n      const options =\n        option.options &&\n        option.options.filter(\n          (option: Option) =>\n            option.label && option.label.toLowerCase().includes(search.toLowerCase()),\n        )\n      if (\n        (option.label && option.label.toLowerCase().includes(search.toLowerCase())) ||\n        (options && options.length > 0)\n      ) {\n        optionsList.push(Object.assign({}, option, options && options.length > 0 && { options }))\n      }\n    }\n\n    return optionsList\n  }\n\n  return _options\n}\n\nexport const flattenOptionsArray = (\n  options: (Option | OptionsGroup)[],\n  keepGroupLabel?: boolean,\n): (Option | OptionsGroup)[] => {\n  const optionsList: (Option | OptionsGroup)[] = []\n\n  for (const option of options) {\n    if (Array.isArray(option.options)) {\n      const { options, ...rest } = option\n      if (keepGroupLabel) {\n        optionsList.push(rest)\n      }\n\n      optionsList.push(...options)\n    } else {\n      optionsList.push(option)\n    }\n  }\n\n  return optionsList\n}\n\nexport const getNextSibling = (elem: HTMLElement, selector?: string) => {\n  // Get the next sibling element\n  let sibling = elem.nextElementSibling\n\n  // If there's no selector, return the first sibling\n  if (!selector) return sibling\n\n  // If the sibling matches our selector, use it\n  // If not, jump to the next sibling and continue the loop\n  while (sibling) {\n    if (sibling.matches(selector)) return sibling\n    sibling = sibling.nextElementSibling\n  }\n\n  return\n}\n\nexport const getOptionsList = (container: HTMLElement): HTMLElement[] => {\n  return Array.from(\n    container.querySelectorAll('.form-multi-select-option:not(.disabled):not(:disabled)'),\n  )\n}\n\nexport const getPreviousSibling = (elem: HTMLElement, selector?: string) => {\n  // Get the next sibling element\n  let sibling = elem.previousElementSibling\n\n  // If there's no selector, return the first sibling\n  if (!selector) return sibling\n\n  // If the sibling matches our selector, use it\n  // If not, jump to the next sibling and continue the loop\n  while (sibling) {\n    if (sibling.matches(selector)) return sibling\n    sibling = sibling.previousElementSibling\n  }\n\n  return\n}\n\nexport const isExternalSearch = (search: Search): boolean => {\n  return (\n    (typeof search === 'string' && search === 'external') ||\n    (typeof search === 'object' && search.external === true)\n  )\n}\n\nexport const isGlobalSearch = (search: Search): boolean => {\n  return (\n    (typeof search === 'string' && search === 'global') ||\n    (typeof search === 'object' && search.global === true)\n  )\n}\n\nexport const selectOptions = (\n  multiple: boolean,\n  options: (Option | OptionsGroup)[],\n  selected: SelectedOption[],\n  deselected?: Option[],\n) => {\n  if (!multiple) {\n    return [options[0]] as SelectedOption[]\n  }\n\n  let _selected = [...selected, ...options]\n\n  if (deselected) {\n    _selected = _selected.filter(\n      (selectedOption) =>\n        !deselected.some((deselectedOption) => deselectedOption.value === selectedOption.value),\n    )\n  }\n\n  const deduplicated: SelectedOption[] = []\n\n  for (const option of _selected) {\n    if (!deduplicated.some((obj) => obj.value === option.value)) {\n      deduplicated.push(option as SelectedOption)\n    }\n  }\n\n  return deduplicated\n}\n"]},"metadata":{},"sourceType":"module"}