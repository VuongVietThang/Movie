{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { CCard } from '../card/CCard.js';\nimport { CCardBody } from '../card/CCardBody.js';\nimport { CCardFooter } from '../card/CCardFooter.js';\nimport '../card/CCardGroup.js';\nimport '../card/CCardHeader.js';\nimport '../card/CCardImage.js';\nimport '../card/CCardImageOverlay.js';\nimport '../card/CCardLink.js';\nimport '../card/CCardSubtitle.js';\nimport '../card/CCardText.js';\nimport '../card/CCardTitle.js';\nimport { colorPropType } from '../../props.js';\nvar CWidgetStatsF = forwardRef(function (_a, ref) {\n  var className = _a.className,\n      color = _a.color,\n      footer = _a.footer,\n      icon = _a.icon,\n      _b = _a.padding,\n      padding = _b === void 0 ? true : _b,\n      title = _a.title,\n      value = _a.value,\n      rest = __rest(_a, [\"className\", \"color\", \"footer\", \"icon\", \"padding\", \"title\", \"value\"]);\n\n  return React.createElement(CCard, __assign({\n    className: className\n  }, rest, {\n    ref: ref\n  }), React.createElement(CCardBody, {\n    className: \"d-flex align-items-center \".concat(padding === false && 'p-0')\n  }, React.createElement(\"div\", {\n    className: \"me-3 text-white bg-\".concat(color, \" \").concat(padding ? 'p-3' : 'p-4')\n  }, icon), React.createElement(\"div\", null, React.createElement(\"div\", {\n    className: \"fs-6 fw-semibold text-\".concat(color)\n  }, value), React.createElement(\"div\", {\n    className: \"text-body-secondary text-uppercase fw-semibold small\"\n  }, title))), footer && React.createElement(CCardFooter, null, footer));\n});\nCWidgetStatsF.propTypes = {\n  className: PropTypes.string,\n  color: colorPropType,\n  footer: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  padding: PropTypes.bool,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.node, PropTypes.number])\n};\nCWidgetStatsF.displayName = 'CWidgetStatsF';\nexport { CWidgetStatsF };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;IAyCaA,aAAa,GAAGC,UAAU,CACrC,UAACC,EAAD,EAA4EC,GAA5E,EAA+E;AAA5E,eAAS,eAAT;AAAA,MAAWC,KAAK,WAAhB;AAAA,MAAkBC,MAAM,YAAxB;AAAA,MAA0BC,IAAI,UAA9B;AAAA,MAAgCC,EAAc,aAA9C;AAAA,MAAgCC,OAAO,mBAAG,IAAH,GAAOD,EAA9C;AAAA,MAAgDE,KAAK,WAArD;AAAA,MAAuDC,KAAK,WAA5D;AAAA,MAAiEC,IAAI,GAAvEC,iFAAE;;AACD,SACEC,oBAACC,KAAD,EAAMC;AAACC,aAAS,EAAEA;AAAZ,KAA2BL,IAA3B,EAA+B;AAAER,OAAG,EAAEA;AAAP,GAA/B,CAAN,EACEU,KAAC,cAAD,CAACI,SAAD,EAAW;AAAAD,aAAS,EAAE,oCAA6BR,OAAO,KAAK,KAAZ,IAAqB,KAAlD;AAAX,GAAX,EACEK;AAAKG,aAAS,EAAE,6BAAsBZ,KAAtB,EAA2B,GAA3B,EAA2Bc,MAA3B,CAA+BV,OAAO,GAAG,KAAH,GAAW,KAAjD;AAAhB,KAA2EF,IAA3E,CADF,EAEEO,iCACEA;AAAKG,aAAS,EAAE,gCAAyBZ,KAAzB;AAAhB,KAAmDM,KAAnD,CADF,EAEEG;AAAKG,aAAS,EAAC;AAAf,KAAuEP,KAAvE,CAFF,CAFF,CADF,EAQGJ,MAAM,IAAIQ,oBAACM,WAAD,EAAY,IAAZ,EAAcd,MAAd,CARb,CADF;AAYD,CAdoC;AAiBvCL,aAAa,CAACoB,SAAd,GAA0B;AACxBJ,WAAS,EAAEK,SAAS,CAACC,MADG;AAExBlB,OAAK,EAAEmB,aAFiB;AAGxBlB,QAAM,EAAEgB,SAAS,CAACG,SAAV,CAAoB,CAACH,SAAS,CAACC,MAAX,EAAmBD,SAAS,CAACI,IAA7B,CAApB,CAHgB;AAIxBnB,MAAI,EAAEe,SAAS,CAACG,SAAV,CAAoB,CAACH,SAAS,CAACC,MAAX,EAAmBD,SAAS,CAACI,IAA7B,CAApB,CAJkB;AAKxBjB,SAAO,EAAEa,SAAS,CAACK,IALK;AAMxBjB,OAAK,EAAEY,SAAS,CAACG,SAAV,CAAoB,CAACH,SAAS,CAACC,MAAX,EAAmBD,SAAS,CAACI,IAA7B,CAApB,CANiB;AAOxBf,OAAK,EAAEW,SAAS,CAACG,SAAV,CAAoB,CAACH,SAAS,CAACC,MAAX,EAAmBD,SAAS,CAACI,IAA7B,EAAmCJ,SAAS,CAACM,MAA7C,CAApB;AAPiB,CAA1B;AAUA3B,aAAa,CAAC4B,WAAd,GAA4B,eAA5B","names":["CWidgetStatsF","forwardRef","_a","ref","color","footer","icon","_b","padding","title","value","rest","__rest","React","CCard","__assign","className","CCardBody","concat","CCardFooter","propTypes","PropTypes","string","colorPropType","oneOfType","node","bool","number","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react\\src\\components\\widgets\\CWidgetStatsF.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CCard, CCardBody, CCardFooter } from '../card'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CWidgetStatsFProps extends Omit<HTMLAttributes<HTMLDivElement>, 'title'> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUIâ€™s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Footer node for your component.\n   */\n  footer?: string | ReactNode\n  /**\n   * Icon node for your component.\n   */\n  icon?: string | ReactNode\n  /**\n   * Set padding of your component.\n   */\n  padding?: boolean\n  /**\n   * Title node for your component.\n   */\n  title?: string | ReactNode\n  /**\n   * Value node for your component.\n   */\n  value?: string | number | ReactNode\n}\n\nexport const CWidgetStatsF = forwardRef<HTMLDivElement, CWidgetStatsFProps>(\n  ({ className, color, footer, icon, padding = true, title, value, ...rest }, ref) => {\n    return (\n      <CCard className={className} {...rest} ref={ref}>\n        <CCardBody className={`d-flex align-items-center ${padding === false && 'p-0'}`}>\n          <div className={`me-3 text-white bg-${color} ${padding ? 'p-3' : 'p-4'}`}>{icon}</div>\n          <div>\n            <div className={`fs-6 fw-semibold text-${color}`}>{value}</div>\n            <div className=\"text-body-secondary text-uppercase fw-semibold small\">{title}</div>\n          </div>\n        </CCardBody>\n        {footer && <CCardFooter>{footer}</CCardFooter>}\n      </CCard>\n    )\n  },\n)\n\nCWidgetStatsF.propTypes = {\n  className: PropTypes.string,\n  color: colorPropType,\n  footer: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  padding: PropTypes.bool,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.node, PropTypes.number]),\n}\n\nCWidgetStatsF.displayName = 'CWidgetStatsF'\n"]},"metadata":{},"sourceType":"module"}