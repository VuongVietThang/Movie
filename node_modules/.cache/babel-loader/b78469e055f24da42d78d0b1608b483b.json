{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { colorPropType } from '../../props.js';\nvar CNavbar = forwardRef(function (_a, ref) {\n  var _b;\n\n  var children = _a.children,\n      _c = _a.as,\n      Component = _c === void 0 ? 'nav' : _c,\n      className = _a.className,\n      color = _a.color,\n      colorScheme = _a.colorScheme,\n      container = _a.container,\n      expand = _a.expand,\n      placement = _a.placement,\n      rest = __rest(_a, [\"children\", \"as\", \"className\", \"color\", \"colorScheme\", \"container\", \"expand\", \"placement\"]);\n\n  return React.createElement(Component, __assign({\n    className: classNames('navbar', (_b = {}, _b[\"bg-\".concat(color)] = color, _b[typeof expand === 'boolean' ? 'navbar-expand' : \"navbar-expand-\".concat(expand)] = expand, _b), placement, className)\n  }, colorScheme && {\n    'data-coreui-theme': colorScheme\n  }, rest, {\n    ref: ref\n  }), container ? React.createElement(\"div\", {\n    className: typeof container === 'string' ? \"container-\".concat(container) : 'container'\n  }, children) : React.createElement(React.Fragment, null, children));\n});\nCNavbar.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  colorScheme: PropTypes.oneOf(['dark', 'light']),\n  container: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['sm', 'md', 'lg', 'xl', 'xxl', 'fluid'])]),\n  expand: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['sm', 'md', 'lg', 'xl', 'xxl'])]),\n  placement: PropTypes.oneOf(['fixed-top', 'fixed-bottom', 'sticky-top'])\n};\nCNavbar.displayName = 'CNavbar';\nexport { CNavbar };","map":{"version":3,"mappings":";;;;;IAyCaA,OAAO,GAA2DC,UAAU,CAIvF,UACEC,EADF,EAYEC,GAZF,EAYK;;;AAVD,cAAQ,cAAR;AAAA,MACAC,UADA;AAAA,MACIC,SAAS,GAAGD,wBAAKA,EADrB;AAAA,MAEAE,SAAS,eAFT;AAAA,MAGAC,KAAK,WAHL;AAAA,MAIAC,WAAW,iBAJX;AAAA,MAKAC,SAAS,eALT;AAAA,MAMAC,MAAM,YANN;AAAA,MAOAC,SAAS,eAPT;AAAA,MAQGC,IAAI,cATT,2FASS,CARP;;AAYF,SACEC,oBAACR,SAAD,EAAUS;AACRR,aAAS,EAAES,UAAU,CACnB,QADmB,GACXC,SAENA,GAAC,MAAMC,MAAN,CAAMV,KAAN,CAAD,IAAiBA,KAFX,EAGNS,GAAC,OAAON,MAAP,KAAkB,SAAlB,GAA8B,eAA9B,GAAgD,wBAAiBA,MAAjB,CAAjD,IAA6EA,MAHvE,IADW,GAMnBC,SANmB,EAOnBL,SAPmB;AADb,KAUHE,WAAW,IAAI;AAAE,yBAAqBA;AAAvB,GAVZ,EAWJI,IAXI,EAWA;AACRT,OAAG,EAAEA;AADG,GAXA,CAAV,EAcGM,SAAS,GACRI;AAAKP,aAAS,EAAE,OAAOG,SAAP,KAAqB,QAArB,GAAgC,aAAaQ,MAAb,CAAaR,SAAb,CAAhC,GAA2D;AAA3E,KACGS,QADH,CADQ,GAKRL,KAAG,cAAH,CAAGA,cAAH,EAAG,IAAH,EAAGK,QAAH,CAnBJ,CADF;AAwBD,CA1CsF;AA6CzFlB,OAAO,CAACmB,SAAR,GAAoB;AAClBC,IAAE,EAAEC,SAAS,CAACC,WADI;AAElBJ,UAAQ,EAAEG,SAAS,CAACE,IAFF;AAGlBjB,WAAS,EAAEe,SAAS,CAACG,MAHH;AAIlBjB,OAAK,EAAEkB,aAJW;AAKlBjB,aAAW,EAAEa,SAAS,CAACK,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,CAAhB,CALK;AAMlBjB,WAAS,EAAEY,SAAS,CAACM,SAAV,CAAoB,CAC7BN,SAAS,CAACO,IADmB,EAE7BP,SAAS,CAACK,KAAV,CAA6D,CAC3D,IAD2D,EAE3D,IAF2D,EAG3D,IAH2D,EAI3D,IAJ2D,EAK3D,KAL2D,EAM3D,OAN2D,CAA7D,CAF6B,CAApB,CANO;AAiBlBhB,QAAM,EAAEW,SAAS,CAACM,SAAV,CAAoB,CAC1BN,SAAS,CAACO,IADgB,EAE1BP,SAAS,CAACK,KAAV,CAAmD,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,KAAzB,CAAnD,CAF0B,CAApB,CAjBU;AAqBlBf,WAAS,EAAEU,SAAS,CAACK,KAAV,CAAgB,CAAC,WAAD,EAAc,cAAd,EAA8B,YAA9B,CAAhB;AArBO,CAApB;AAwBA1B,OAAO,CAAC6B,WAAR,GAAsB,SAAtB","names":["CNavbar","forwardRef","_a","ref","_c","Component","className","color","colorScheme","container","expand","placement","rest","React","__assign","classNames","_b","concat","children","propTypes","as","PropTypes","elementType","node","string","colorPropType","oneOf","oneOfType","bool","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\navbar\\CNavbar.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CNavbarProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUIâ€™s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets if the color of text should be colored for a light or dark background.\n   */\n  colorScheme?: 'dark' | 'light'\n  /**\n   * Defines optional container wrapping children elements.\n   */\n  container?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'fluid'\n  /**\n   * Defines the responsive breakpoint to determine when content collapses.\n   */\n  expand?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n  /**\n   * Place component in non-static positions.\n   */\n  placement?: 'fixed-top' | 'fixed-bottom' | 'sticky-top'\n}\n\nexport const CNavbar: PolymorphicRefForwardingComponent<'nav', CNavbarProps> = forwardRef<\n  HTMLDivElement,\n  CNavbarProps\n>(\n  (\n    {\n      children,\n      as: Component = 'nav',\n      className,\n      color,\n      colorScheme,\n      container,\n      expand,\n      placement,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <Component\n        className={classNames(\n          'navbar',\n          {\n            [`bg-${color}`]: color,\n            [typeof expand === 'boolean' ? 'navbar-expand' : `navbar-expand-${expand}`]: expand,\n          },\n          placement,\n          className,\n        )}\n        {...(colorScheme && { 'data-coreui-theme': colorScheme })}\n        {...rest}\n        ref={ref}\n      >\n        {container ? (\n          <div className={typeof container === 'string' ? `container-${container}` : 'container'}>\n            {children}\n          </div>\n        ) : (\n          <>{children}</>\n        )}\n      </Component>\n    )\n  },\n)\n\nCNavbar.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  colorScheme: PropTypes.oneOf(['dark', 'light']),\n  container: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl' | 'fluid'>([\n      'sm',\n      'md',\n      'lg',\n      'xl',\n      'xxl',\n      'fluid',\n    ]),\n  ]),\n  expand: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n  placement: PropTypes.oneOf(['fixed-top', 'fixed-bottom', 'sticky-top']),\n}\n\nCNavbar.displayName = 'CNavbar'\n"]},"metadata":{},"sourceType":"module"}