{"ast":null,"code":"import React, { forwardRef } from 'react';\nimport classNames from '../../_virtual/index.js';\nimport PropTypes from 'prop-types';\nvar CMultiSelectSelection = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      disabled = _a.disabled,\n      multiple = _a.multiple,\n      placeholder = _a.placeholder,\n      onRemove = _a.onRemove,\n      search = _a.search,\n      _b = _a.selected,\n      selected = _b === void 0 ? [] : _b,\n      selectionType = _a.selectionType,\n      selectionTypeCounterText = _a.selectionTypeCounterText;\n  return React.createElement(\"span\", {\n    className: classNames('form-multi-select-selection', {\n      'form-multi-select-selection-tags': multiple && selectionType === 'tags'\n    }),\n    ref: ref\n  }, multiple && selectionType === 'counter' && !search && selected.length === 0 && placeholder, multiple && selectionType === 'counter' && !search && selected.length > 0 && \"\".concat(selected.length, \" \").concat(selectionTypeCounterText), multiple && selectionType === 'tags' && selected.map(function (option, index) {\n    if (selectionType === 'tags') {\n      return React.createElement(\"span\", {\n        className: \"form-multi-select-tag\",\n        key: index\n      }, option.label, !disabled && !option.disabled && React.createElement(\"button\", {\n        className: \"form-multi-select-tag-delete\",\n        type: \"button\",\n        \"aria-label\": \"Close\",\n        onClick: function () {\n          return onRemove && onRemove(option);\n        }\n      }));\n    }\n\n    return;\n  }), multiple && selectionType === 'text' && selected.map(function (option, index) {\n    return React.createElement(\"span\", {\n      key: index\n    }, option.label, index === selected.length - 1 ? '' : ',', \"\\u00A0\");\n  }), !multiple && !search && selected.map(function (option) {\n    return option.label;\n  })[0], children);\n});\nCMultiSelectSelection.propTypes = {\n  children: PropTypes.node,\n  disabled: PropTypes.bool,\n  multiple: PropTypes.bool,\n  onRemove: PropTypes.func,\n  placeholder: PropTypes.string,\n  search: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['external', 'global']), PropTypes.shape({\n    external: PropTypes.bool.isRequired,\n    global: PropTypes.bool.isRequired\n  })]),\n  selected: PropTypes.array,\n  selectionType: PropTypes.oneOf(['counter', 'tags', 'text']),\n  selectionTypeCounterText: PropTypes.string\n};\nCMultiSelectSelection.displayName = 'CMultiSelectSelection';\nexport { CMultiSelectSelection };","map":{"version":3,"mappings":"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","names":["CMultiSelectSelection","forwardRef","_a","ref","disabled","multiple","placeholder","onRemove","search","_b","selected","selectionType","selectionTypeCounterText","React","className","classNames","length","concat","map","option","index","key","label","type","onClick","children","propTypes","PropTypes","node","bool","func","string","oneOfType","oneOf","shape","external","isRequired","global","array","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\multi-select\\CMultiSelectSelection.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes } from 'react'\n\nimport classNames from 'classnames'\nimport PropTypes from 'prop-types'\n\nimport type { Search, SelectedOption } from './types'\n\nexport interface CMultiSelectSelectionProps extends HTMLAttributes<HTMLSpanElement> {\n  disabled?: boolean\n  multiple?: boolean\n  onRemove?: (option: SelectedOption) => void\n  placeholder?: string\n  search?: Search\n  selected?: SelectedOption[]\n  selectionType?: 'counter' | 'tags' | 'text'\n  selectionTypeCounterText?: string\n}\n\nexport const CMultiSelectSelection = forwardRef<HTMLSpanElement, CMultiSelectSelectionProps>(\n  (\n    {\n      children,\n      disabled,\n      multiple,\n      placeholder,\n      onRemove,\n      search,\n      selected = [],\n      selectionType,\n      selectionTypeCounterText,\n    },\n    ref,\n  ) => {\n    return (\n      <span\n        className={classNames('form-multi-select-selection', {\n          'form-multi-select-selection-tags': multiple && selectionType === 'tags',\n        })}\n        ref={ref}\n      >\n        {multiple && selectionType === 'counter' && !search && selected.length === 0 && placeholder}\n        {multiple &&\n          selectionType === 'counter' &&\n          !search &&\n          selected.length > 0 &&\n          `${selected.length} ${selectionTypeCounterText}`}\n        {multiple &&\n          selectionType === 'tags' &&\n          selected.map((option: SelectedOption, index: number) => {\n            if (selectionType === 'tags') {\n              return (\n                <span className=\"form-multi-select-tag\" key={index}>\n                  {option.label}\n                  {!disabled && !option.disabled && (\n                    <button\n                      className=\"form-multi-select-tag-delete\"\n                      type=\"button\"\n                      aria-label=\"Close\"\n                      onClick={() => onRemove && onRemove(option)}\n                    />\n                  )}\n                </span>\n              )\n            }\n            return\n          })}\n        {multiple &&\n          selectionType === 'text' &&\n          selected.map((option, index) => (\n            <span key={index}>\n              {option.label}\n              {index === selected.length - 1 ? '' : ','}&nbsp;\n            </span>\n          ))}\n        {!multiple && !search && selected.map((option) => option.label)[0]}\n        {children}\n      </span>\n    )\n  },\n)\n\nCMultiSelectSelection.propTypes = {\n  children: PropTypes.node,\n  disabled: PropTypes.bool,\n  multiple: PropTypes.bool,\n  onRemove: PropTypes.func,\n  placeholder: PropTypes.string,\n  search: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'external' | 'global'>(['external', 'global']),\n    PropTypes.shape({\n      external: PropTypes.bool.isRequired,\n      global: PropTypes.bool.isRequired,\n    }),\n  ]),\n  selected: PropTypes.array,\n  selectionType: PropTypes.oneOf(['counter', 'tags', 'text']),\n  selectionTypeCounterText: PropTypes.string,\n}\n\nCMultiSelectSelection.displayName = 'CMultiSelectSelection'\n"]},"metadata":{},"sourceType":"module"}