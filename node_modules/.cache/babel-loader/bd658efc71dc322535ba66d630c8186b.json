{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CToastContext } from './CToastContext.js';\nimport { useForkedRef } from '../../hooks/useForkedRef.js';\nimport '@popperjs/core';\nimport { colorPropType } from '../../props.js';\nimport Transition from '../../node_modules/react-transition-group/esm/Transition.js';\nvar CToast = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      _b = _a.animation,\n      animation = _b === void 0 ? true : _b,\n      _c = _a.autohide,\n      autohide = _c === void 0 ? true : _c,\n      className = _a.className,\n      color = _a.color,\n      _d = _a.delay,\n      delay = _d === void 0 ? 5000 : _d,\n      index = _a.index,\n      innerKey = _a.innerKey,\n      _e = _a.visible,\n      visible = _e === void 0 ? false : _e,\n      onClose = _a.onClose,\n      onShow = _a.onShow,\n      rest = __rest(_a, [\"children\", \"animation\", \"autohide\", \"className\", \"color\", \"delay\", \"index\", \"innerKey\", \"visible\", \"onClose\", \"onShow\"]);\n\n  var toastRef = useRef(null);\n  var forkedRef = useForkedRef(ref, toastRef);\n\n  var _f = useState(false),\n      _visible = _f[0],\n      setVisible = _f[1];\n\n  var timeout = useRef(undefined);\n  useEffect(function () {\n    setVisible(visible);\n  }, [visible]);\n  var contextValues = {\n    visible: _visible,\n    setVisible: setVisible\n  }; // triggered on mount and destroy\n\n  useEffect(function () {\n    return function () {\n      return clearTimeout(timeout.current);\n    };\n  }, []);\n  useEffect(function () {\n    _autohide();\n  }, [_visible]);\n\n  var _autohide = function () {\n    if (autohide) {\n      clearTimeout(timeout.current);\n      timeout.current = window.setTimeout(function () {\n        setVisible(false);\n      }, delay);\n    }\n  };\n\n  return React.createElement(Transition, {\n    in: _visible,\n    nodeRef: toastRef,\n    onEnter: function () {\n      return onShow && onShow(index !== null && index !== void 0 ? index : null);\n    },\n    onExited: function () {\n      return onClose && onClose(index !== null && index !== void 0 ? index : null);\n    },\n    timeout: 250,\n    unmountOnExit: true\n  }, function (state) {\n    var _a;\n\n    return React.createElement(CToastContext.Provider, {\n      value: contextValues\n    }, React.createElement(\"div\", __assign({\n      className: classNames('toast', (_a = {\n        fade: animation\n      }, _a[\"bg-\".concat(color)] = color, _a['border-0'] = color, _a['show showing'] = state === 'entering' || state === 'exiting', _a.show = state === 'entered', _a), className),\n      \"aria-live\": \"assertive\",\n      \"aria-atomic\": \"true\",\n      role: \"alert\",\n      onMouseEnter: function () {\n        return clearTimeout(timeout.current);\n      },\n      onMouseLeave: function () {\n        return _autohide();\n      }\n    }, rest, {\n      key: innerKey,\n      ref: forkedRef\n    }), children));\n  });\n});\nCToast.propTypes = {\n  animation: PropTypes.bool,\n  autohide: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  delay: PropTypes.number,\n  index: PropTypes.number,\n  innerKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  onClose: PropTypes.func,\n  onShow: PropTypes.func,\n  visible: PropTypes.bool\n};\nCToast.displayName = 'CToast';\nexport { CToast };","map":{"version":3,"mappings":";;;;;;;;;IAwDaA,MAAM,GAAGC,UAAU,CAC9B,UACEC,EADF,EAeEC,GAfF,EAeK;AAbD,cAAQ,cAAR;AAAA,MACAC,EAAgB,eADhB;AAAA,MACAC,SAAS,GAAGD,uBAAIA,EADhB;AAAA,MAEAE,EAAe,cAFf;AAAA,MAEAC,QAAQ,GAAGD,uBAAIA,EAFf;AAAA,MAGAE,SAAS,eAHT;AAAA,MAIAC,KAAK,WAJL;AAAA,MAKAC,aALA;AAAA,MAKAC,KAAK,mBAAG,IAAH,GAAOD,EALZ;AAAA,MAMAE,KAAK,WANL;AAAA,MAOAC,QAAQ,cAPR;AAAA,MAQAC,EAAe,aARf;AAAA,MAQAC,OAAO,mBAAG,KAAH,GAAQD,EARf;AAAA,MASAE,OAAO,aATP;AAAA,MAUAC,MAAM,YAVN;AAAA,MAWGC,IAAI,GAZTC,qIACE;;AAeF,MAAMC,QAAQ,GAAGC,MAAM,CAAC,IAAD,CAAvB;AACA,MAAMC,SAAS,GAAGC,YAAY,CAACpB,GAAD,EAAMiB,QAAN,CAA9B;;AACM,WAAyBI,QAAQ,CAAC,KAAD,CAAjC;AAAA,MAACC,QAAQ,QAAT;AAAA,MAAWC,UAAU,QAArB;;AACN,MAAMC,OAAO,GAAGN,MAAM,CAASO,SAAT,CAAtB;AAEAC,WAAS,CAAC;AACRH,cAAU,CAACX,OAAD,CAAV;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAIA,MAAMe,aAAa,GAAG;AACpBf,WAAO,EAAEU,QADW;AAEpBC,cAAU;AAFU,GAAtB,CAXG;;AAiBHG,WAAS,CAAC,YAAM;AAAA;AAAM,yBAAY,CAACF,OAAO,CAACI,OAAT,CAAZ;AAA6B,KAAnC;AAAmC,GAA1C,EAA4C,EAA5C,CAAT;AAEAF,WAAS,CAAC;AACRG,aAAS;AACV,GAFQ,EAEN,CAACP,QAAD,CAFM,CAAT;;AAIA,MAAMO,SAAS,GAAG;AAChB,QAAIzB,QAAJ,EAAc;AACZ0B,kBAAY,CAACN,OAAO,CAACI,OAAT,CAAZ;AACAJ,aAAO,CAACI,OAAR,GAAkBG,MAAM,CAACC,UAAP,CAAkB;AAClCT,kBAAU,CAAC,KAAD,CAAV;AACD,OAFiB,EAEff,KAFe,CAAlB;;AAIH,GAPD;;AASA,SACEyB,KAAC,cAAD,CAACC,UAAD,EACE;AAAAC,MAAE,EAAEb,QAAJ;AACAc,WAAO,EAAEnB,QADT;AAEAoB,WAAO,EAAE,YAAM;AAAA,mBAAM,IAAIvB,MAAM,CAACL,KAAK,SAAL,SAAK,WAAL,WAAS,IAAV,CAAhB;AAA+B,KAF9C;AAGA6B,YAAQ,EAAE,YAAM;AAAA,oBAAO,IAAIzB,OAAO,CAACJ,KAAK,SAAL,SAAK,WAAL,WAAS,IAAV,CAAlB;AAAiC,KAHjD;AAIAe,WAAO,EAAE,GAJT;AAKAe,iBAAa,EAEZ;AAPD,GADF,EAQG,UAACC,KAAD,EAAM;;;AAAK,WACVP,oBAACQ,aAAa,CAACC,QAAf,EAAwB;AAAAC,WAAK,EAAEhB;AAAP,KAAxB,EACEM;AACE5B,eAAS,EAAEuC,UAAU,CACnB,OADmB,GACZ7C;AAEL8C,YAAI,EAAE3C;AAFD,SAGLH,GAAC,MAAM+C,MAAN,CAAMxC,KAAN,CAAD,IAAiBA,KAHZ,EAILP,iBAAYO,KAJP,EAKLP,qBAAgByC,KAAK,KAAK,UAAV,IAAwBA,KAAK,KAAK,SAL7C,EAMLzC,EAAI,KAAJ,GAAMyC,KAAK,KAAK,SANX,IADY,GASnBnC,SATmB,CADvB;AAWG,mBACS,WAZZ;AAYuB,qBACT,MAbd;AAcE0C,UAAI,EAAC,OAdP;AAeEC,kBAAY,EAAE;AAAM,2BAAY,CAACxB,OAAO,CAACI,OAAT,CAAZ;AAA6B,OAfnD;AAgBEqB,kBAAY,EAAE;AAAM,wBAAS,EAAT;AAAW;AAhBjC,OAiBMlC,IAjBN,EAiBU;AACRmC,SAAG,EAAExC,QADG;AAERV,SAAG,EAAEmB;AAFG,KAjBV,GAqBGgC,QArBH,CADF,CADU;AA0BX,GAlCH,CADF;AAsCD,CAtF6B;AAyFhCtD,MAAM,CAACuD,SAAP,GAAmB;AACjBlD,WAAS,EAAEmD,SAAS,CAACC,IADJ;AAEjBlD,UAAQ,EAAEiD,SAAS,CAACC,IAFH;AAGjBH,UAAQ,EAAEE,SAAS,CAACE,IAHH;AAIjBlD,WAAS,EAAEgD,SAAS,CAACG,MAJJ;AAKjBlD,OAAK,EAAEmD,aALU;AAMjBjD,OAAK,EAAE6C,SAAS,CAACK,MANA;AAOjBjD,OAAK,EAAE4C,SAAS,CAACK,MAPA;AAQjBhD,UAAQ,EAAE2C,SAAS,CAACM,SAAV,CAAoB,CAACN,SAAS,CAACK,MAAX,EAAmBL,SAAS,CAACG,MAA7B,CAApB,CARO;AASjB3C,SAAO,EAAEwC,SAAS,CAACO,IATF;AAUjB9C,QAAM,EAAEuC,SAAS,CAACO,IAVD;AAWjBhD,SAAO,EAAEyC,SAAS,CAACC;AAXF,CAAnB;AAcAzD,MAAM,CAACgE,WAAP,GAAqB,QAArB","names":["CToast","forwardRef","_a","ref","_b","animation","_c","autohide","className","color","_d","delay","index","innerKey","_e","visible","onClose","onShow","rest","__rest","toastRef","useRef","forkedRef","useForkedRef","useState","_visible","setVisible","timeout","undefined","useEffect","contextValues","current","_autohide","clearTimeout","window","setTimeout","React","Transition","in","nodeRef","onEnter","onExited","unmountOnExit","state","CToastContext","Provider","value","classNames","fade","concat","role","onMouseEnter","onMouseLeave","key","children","propTypes","PropTypes","bool","node","string","colorPropType","number","oneOfType","func","displayName"],"sources":["C:\\wamp64\\www\\Movie\\node_modules\\@coreui\\react\\src\\components\\toast\\CToast.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes, useEffect, useRef, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { Transition } from 'react-transition-group'\n\nimport { CToastContext } from './CToastContext'\n\nimport { useForkedRef } from '../../hooks'\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CToastProps extends Omit<HTMLAttributes<HTMLDivElement>, 'title'> {\n  /**\n   * Apply a CSS fade transition to the toast.\n   */\n  animation?: boolean\n  /**\n   * Auto hide the toast.\n   */\n  autohide?: boolean\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUIâ€™s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Delay hiding the toast (ms).\n   */\n  delay?: number\n  /**\n   * @ignore\n   */\n  index?: number\n  /**\n   * @ignore\n   */\n  innerKey?: number | string\n  /**\n   * Callback fired when the component requests to be closed.\n   */\n  onClose?: (index: number | null) => void\n  /**\n   * Callback fired when the component requests to be shown.\n   */\n  onShow?: (index: number | null) => void\n  /**\n   * Toggle the visibility of component.\n   */\n  visible?: boolean\n}\n\nexport const CToast = forwardRef<HTMLDivElement, CToastProps>(\n  (\n    {\n      children,\n      animation = true,\n      autohide = true,\n      className,\n      color,\n      delay = 5000,\n      index,\n      innerKey,\n      visible = false,\n      onClose,\n      onShow,\n      ...rest\n    },\n    ref\n  ) => {\n    const toastRef = useRef(null)\n    const forkedRef = useForkedRef(ref, toastRef)\n    const [_visible, setVisible] = useState(false)\n    const timeout = useRef<number>(undefined)\n\n    useEffect(() => {\n      setVisible(visible)\n    }, [visible])\n\n    const contextValues = {\n      visible: _visible,\n      setVisible,\n    }\n\n    // triggered on mount and destroy\n    useEffect(() => () => clearTimeout(timeout.current), [])\n\n    useEffect(() => {\n      _autohide()\n    }, [_visible])\n\n    const _autohide = () => {\n      if (autohide) {\n        clearTimeout(timeout.current)\n        timeout.current = window.setTimeout(() => {\n          setVisible(false)\n        }, delay)\n      }\n    }\n\n    return (\n      <Transition\n        in={_visible}\n        nodeRef={toastRef}\n        onEnter={() => onShow && onShow(index ?? null)}\n        onExited={() => onClose && onClose(index ?? null)}\n        timeout={250}\n        unmountOnExit\n      >\n        {(state) => (\n          <CToastContext.Provider value={contextValues}>\n            <div\n              className={classNames(\n                'toast',\n                {\n                  fade: animation,\n                  [`bg-${color}`]: color,\n                  'border-0': color,\n                  'show showing': state === 'entering' || state === 'exiting',\n                  show: state === 'entered',\n                },\n                className\n              )}\n              aria-live=\"assertive\"\n              aria-atomic=\"true\"\n              role=\"alert\"\n              onMouseEnter={() => clearTimeout(timeout.current)}\n              onMouseLeave={() => _autohide()}\n              {...rest}\n              key={innerKey}\n              ref={forkedRef}\n            >\n              {children}\n            </div>\n          </CToastContext.Provider>\n        )}\n      </Transition>\n    )\n  }\n)\n\nCToast.propTypes = {\n  animation: PropTypes.bool,\n  autohide: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  delay: PropTypes.number,\n  index: PropTypes.number,\n  innerKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  onClose: PropTypes.func,\n  onShow: PropTypes.func,\n  visible: PropTypes.bool,\n}\n\nCToast.displayName = 'CToast'\n"]},"metadata":{},"sourceType":"module"}