{"ast":null,"code":"import { __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CElementCover } from '../element-cover/CElementCover.js';\nimport { CVirtualScroller } from '../virtual-scroller/CVirtualScroller.js';\nimport { getNextSibling, getPreviousSibling } from './utils.js';\nvar CMultiSelectOptions = forwardRef(function (_a, ref) {\n  var loading = _a.loading,\n      onKeyDown = _a.onKeyDown,\n      onOptionOnClick = _a.onOptionOnClick,\n      options = _a.options,\n      optionsMaxHeight = _a.optionsMaxHeight,\n      optionsStyle = _a.optionsStyle,\n      optionsTemplate = _a.optionsTemplate,\n      optionsGroupsTemplate = _a.optionsGroupsTemplate,\n      searchNoResultsLabel = _a.searchNoResultsLabel,\n      selected = _a.selected,\n      virtualScroller = _a.virtualScroller,\n      _b = _a.visibleItems,\n      visibleItems = _b === void 0 ? 10 : _b;\n\n  var handleKeyDown = function (event, option) {\n    if (event.code === 'Space' || event.key === 'Enter') {\n      event.preventDefault();\n      onOptionOnClick && onOptionOnClick(option);\n    }\n\n    if (event.key === 'Down' || event.key === 'ArrowDown') {\n      event.preventDefault();\n      var target = event.target;\n      var next = getNextSibling(target, '.form-multi-select-option');\n      next && next.focus();\n    }\n\n    if (event.key === 'Up' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      var target = event.target;\n      var prev = getPreviousSibling(target, '.form-multi-select-option');\n      prev && prev.focus();\n    }\n  };\n\n  var createOptions = function (options) {\n    return options.length > 0 ? options.map(function (option, index) {\n      return 'value' in option ? React.createElement(\"div\", {\n        className: classNames('form-multi-select-option', {\n          'form-multi-select-option-with-checkbox': optionsStyle === 'checkbox',\n          'form-multi-selected': selected.some(function (_option) {\n            return _option.value === option.value;\n          }),\n          disabled: option.disabled\n        }),\n        key: index,\n        onClick: function () {\n          return onOptionOnClick && onOptionOnClick(option);\n        },\n        onKeyDown: function (event) {\n          return handleKeyDown(event, option);\n        },\n        tabIndex: 0\n      }, optionsTemplate ? optionsTemplate(option) : option.label) : React.createElement(\"div\", {\n        className: \"form-multi-select-optgroup-label\",\n        key: index\n      }, optionsGroupsTemplate ? optionsGroupsTemplate(option) : option.label);\n    }) : React.createElement(\"div\", {\n      className: \"form-multi-select-options-empty\"\n    }, searchNoResultsLabel);\n  };\n\n  return React.createElement(React.Fragment, null, virtualScroller ? React.createElement(CVirtualScroller, {\n    className: \"form-multi-select-options\",\n    onKeyDown: onKeyDown,\n    visibleItems: visibleItems,\n    ref: ref\n  }, createOptions(options)) : React.createElement(\"div\", __assign({\n    className: \"form-multi-select-options\",\n    onKeyDown: onKeyDown\n  }, optionsMaxHeight !== 'auto' && {\n    style: {\n      maxHeight: optionsMaxHeight,\n      overflow: 'scroll'\n    }\n  }, {\n    ref: ref\n  }), createOptions(options)), loading && React.createElement(CElementCover, null));\n});\nCMultiSelectOptions.propTypes = {\n  loading: PropTypes.bool,\n  onOptionOnClick: PropTypes.func,\n  options: PropTypes.array.isRequired,\n  optionsMaxHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  optionsStyle: PropTypes.oneOf(['checkbox', 'text']),\n  optionsTemplate: PropTypes.func,\n  optionsGroupsTemplate: PropTypes.func,\n  searchNoResultsLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  virtualScroller: PropTypes.bool,\n  visibleItems: PropTypes.number\n};\nCMultiSelectOptions.displayName = 'CMultiSelectOptions';\nexport { CMultiSelectOptions };","map":{"version":3,"mappings":"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","names":["CMultiSelectOptions","forwardRef","_a","ref","onKeyDown","onOptionOnClick","options","optionsMaxHeight","optionsStyle","optionsTemplate","optionsGroupsTemplate","searchNoResultsLabel","selected","virtualScroller","_b","visibleItems","handleKeyDown","event","option","code","key","preventDefault","target","next","getNextSibling","focus","prev","getPreviousSibling","createOptions","length","map","index","React","className","classNames","some","_option","value","disabled","onClick","tabIndex","label","CVirtualScroller","__assign","style","maxHeight","overflow","loading","CElementCover","propTypes","PropTypes","bool","func","array","isRequired","oneOfType","number","string","oneOf","node","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\multi-select\\CMultiSelectOptions.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CElementCover } from '../element-cover'\nimport { CVirtualScroller } from '../virtual-scroller'\n\nimport { getNextSibling, getPreviousSibling } from './utils'\nimport type { Option, OptionsGroup } from './types'\n\nexport interface CMultiSelectOptionsProps extends HTMLAttributes<HTMLDivElement> {\n  loading?: boolean\n  onOptionOnClick?: (option: Option) => void\n  options: (Option | OptionsGroup)[]\n  optionsMaxHeight?: number | string\n  optionsStyle?: 'checkbox' | 'text'\n  optionsTemplate?: (option: Option) => ReactNode\n  optionsGroupsTemplate?: (option: OptionsGroup) => ReactNode\n  searchNoResultsLabel?: string | ReactNode\n  selected: Option[]\n  virtualScroller?: boolean\n  visibleItems?: number\n}\n\nexport const CMultiSelectOptions = forwardRef<HTMLDivElement, CMultiSelectOptionsProps>(\n  (\n    {\n      loading,\n      onKeyDown,\n      onOptionOnClick,\n      options,\n      optionsMaxHeight,\n      optionsStyle,\n      optionsTemplate,\n      optionsGroupsTemplate,\n      searchNoResultsLabel,\n      selected,\n      virtualScroller,\n      visibleItems = 10,\n    },\n    ref,\n  ) => {\n    const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>, option: Option) => {\n      if (event.code === 'Space' || event.key === 'Enter') {\n        event.preventDefault()\n        onOptionOnClick && onOptionOnClick(option)\n      }\n\n      if (event.key === 'Down' || event.key === 'ArrowDown') {\n        event.preventDefault()\n        const target = event.target as HTMLElement\n        const next = getNextSibling(target, '.form-multi-select-option')\n\n        next && (next as HTMLElement).focus()\n      }\n\n      if (event.key === 'Up' || event.key === 'ArrowUp') {\n        event.preventDefault()\n        const target = event.target as HTMLElement\n        const prev = getPreviousSibling(target, '.form-multi-select-option')\n\n        prev && (prev as HTMLElement).focus()\n      }\n    }\n\n    const createOptions = (options: (Option | OptionsGroup)[]): JSX.Element | JSX.Element[] =>\n      options.length > 0 ? (\n        options.map((option: Option | OptionsGroup, index: number) =>\n          'value' in option ? (\n            <div\n              className={classNames('form-multi-select-option', {\n                'form-multi-select-option-with-checkbox': optionsStyle === 'checkbox',\n                'form-multi-selected': selected.some((_option) => _option.value === option.value),\n                disabled: option.disabled,\n              })}\n              key={index}\n              onClick={() => onOptionOnClick && onOptionOnClick(option as Option)}\n              onKeyDown={(event) => handleKeyDown(event, option as Option)}\n              tabIndex={0}\n            >\n              {optionsTemplate ? optionsTemplate(option as Option) : option.label}\n            </div>\n          ) : (\n            <div className=\"form-multi-select-optgroup-label\" key={index}>\n              {optionsGroupsTemplate ? optionsGroupsTemplate(option as OptionsGroup) : option.label}\n            </div>\n          ),\n        )\n      ) : (\n        <div className=\"form-multi-select-options-empty\">{searchNoResultsLabel}</div>\n      )\n\n    return (\n      <>\n        {virtualScroller ? (\n          <CVirtualScroller\n            className=\"form-multi-select-options\"\n            onKeyDown={onKeyDown}\n            visibleItems={visibleItems}\n            ref={ref}\n          >\n            {createOptions(options)}\n          </CVirtualScroller>\n        ) : (\n          <div\n            className=\"form-multi-select-options\"\n            onKeyDown={onKeyDown}\n            {...(optionsMaxHeight !== 'auto' && {\n              style: { maxHeight: optionsMaxHeight, overflow: 'scroll' },\n            })}\n            ref={ref}\n          >\n            {createOptions(options)}\n          </div>\n        )}\n        {loading && <CElementCover />}\n      </>\n    )\n  },\n)\n\nCMultiSelectOptions.propTypes = {\n  loading: PropTypes.bool,\n  onOptionOnClick: PropTypes.func,\n  options: PropTypes.array.isRequired,\n  optionsMaxHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  optionsStyle: PropTypes.oneOf(['checkbox', 'text']),\n  optionsTemplate: PropTypes.func,\n  optionsGroupsTemplate: PropTypes.func,\n  searchNoResultsLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  virtualScroller: PropTypes.bool,\n  visibleItems: PropTypes.number,\n}\n\nCMultiSelectOptions.displayName = 'CMultiSelectOptions'\n"]},"metadata":{},"sourceType":"module"}