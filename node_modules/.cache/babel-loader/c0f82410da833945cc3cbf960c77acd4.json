{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CButton } from '../button/CButton.js';\nimport { CDropdownContext } from './CDropdownContext.js';\nimport { triggerPropType } from '../../props.js';\n\nvar CDropdownToggle = function (_a) {\n  var children = _a.children,\n      _b = _a.caret,\n      caret = _b === void 0 ? true : _b,\n      custom = _a.custom,\n      className = _a.className,\n      _c = _a.navLink,\n      navLink = _c === void 0 ? true : _c,\n      split = _a.split,\n      _d = _a.trigger,\n      trigger = _d === void 0 ? 'click' : _d,\n      rest = __rest(_a, [\"children\", \"caret\", \"custom\", \"className\", \"navLink\", \"split\", \"trigger\"]);\n\n  var _e = useContext(CDropdownContext),\n      dropdownToggleRef = _e.dropdownToggleRef,\n      variant = _e.variant,\n      visible = _e.visible,\n      setVisible = _e.setVisible;\n\n  var triggers = __assign(__assign({}, (trigger === 'click' || trigger.includes('click')) && {\n    onClick: function (event) {\n      event.preventDefault();\n      setVisible(!visible);\n    }\n  }), (trigger === 'focus' || trigger.includes('focus')) && {\n    onFocus: function () {\n      return setVisible(true);\n    },\n    onBlur: function () {\n      return setVisible(false);\n    }\n  });\n\n  var togglerProps = __assign({\n    className: classNames({\n      'nav-link': variant === 'nav-item' && navLink,\n      'dropdown-toggle': caret,\n      'dropdown-toggle-split': split,\n      show: visible\n    }, className),\n    'aria-expanded': visible\n  }, !rest.disabled && __assign({}, triggers));\n\n  var Toggler = function () {\n    if (custom && React.isValidElement(children)) {\n      return React.createElement(React.Fragment, null, React.cloneElement(children, __assign(__assign({\n        'aria-expanded': visible\n      }, !rest.disabled && __assign({}, triggers)), {\n        ref: dropdownToggleRef\n      })));\n    }\n\n    if (variant === 'nav-item' && navLink) {\n      return React.createElement(\"a\", __assign({\n        href: \"#\"\n      }, togglerProps, {\n        role: \"button\"\n      }, rest, {\n        ref: dropdownToggleRef\n      }), children);\n    }\n\n    return React.createElement(CButton, __assign({}, togglerProps, {\n      tabIndex: 0\n    }, rest, {\n      ref: dropdownToggleRef\n    }), children, split && React.createElement(\"span\", {\n      className: \"visually-hidden\"\n    }, \"Toggle Dropdown\"));\n  };\n\n  return React.createElement(Toggler, null);\n};\n\nCDropdownToggle.propTypes = {\n  caret: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  custom: PropTypes.bool,\n  split: PropTypes.bool,\n  trigger: triggerPropType\n};\nCDropdownToggle.displayName = 'CDropdownToggle';\nexport { CDropdownToggle };","map":{"version":3,"mappings":"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","names":["CDropdownToggle","_a","_b","caret","custom","className","_c","navLink","split","_d","trigger","rest","useContext","CDropdownContext","dropdownToggleRef","variant","visible","setVisible","triggers","includes","onClick","event","preventDefault","onFocus","onBlur","togglerProps","classNames","show","disabled","__assign","Toggler","React","isValidElement","children","cloneElement","ref","href","role","CButton","tabIndex","propTypes","PropTypes","bool","node","string","triggerPropType","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react\\src\\components\\dropdown\\CDropdownToggle.tsx"],"sourcesContent":["import React, { FC, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CButton, CButtonProps } from '../button/CButton'\nimport { CDropdownContext } from './CDropdownContext'\n\nimport { triggerPropType } from '../../props'\nimport type { Triggers } from '../../types'\n\nexport interface CDropdownToggleProps extends Omit<CButtonProps, 'type'> {\n  /**\n   * Enables pseudo element caret on toggler.\n   */\n  caret?: boolean\n  /**\n   * Create a custom toggler which accepts any content.\n   */\n  custom?: boolean\n  /**\n   * If a dropdown `variant` is set to `nav-item` then render the toggler as a link instead of a button.\n   *\n   * @since 5.0.0\n   */\n  navLink?: boolean\n  /**\n   * Similarly, create split button dropdowns with virtually the same markup as single button dropdowns, but with the addition of `.dropdown-toggle-split` className for proper spacing around the dropdown caret.\n   */\n  split?: boolean\n  /**\n   * Sets which event handlers youâ€™d like provided to your toggle prop. You can specify one trigger or an array of them.\n   *\n   * @type 'hover' | 'focus' | 'click'\n   */\n  trigger?: Triggers | Triggers[]\n}\n\nexport const CDropdownToggle: FC<CDropdownToggleProps> = ({\n  children,\n  caret = true,\n  custom,\n  className,\n  navLink = true,\n  split,\n  trigger = 'click',\n  ...rest\n}) => {\n  const { dropdownToggleRef, variant, visible, setVisible } = useContext(CDropdownContext)\n\n  const triggers = {\n    ...((trigger === 'click' || trigger.includes('click')) && {\n      onClick: (event: React.MouseEvent<HTMLElement>) => {\n        event.preventDefault()\n        setVisible(!visible)\n      },\n    }),\n    ...((trigger === 'focus' || trigger.includes('focus')) && {\n      onFocus: () => setVisible(true),\n      onBlur: () => setVisible(false),\n    }),\n  }\n\n  const togglerProps = {\n    className: classNames(\n      {\n        'nav-link': variant === 'nav-item' && navLink,\n        'dropdown-toggle': caret,\n        'dropdown-toggle-split': split,\n        show: visible,\n      },\n      className\n    ),\n    'aria-expanded': visible,\n    ...(!rest.disabled && { ...triggers }),\n  }\n\n  const Toggler = () => {\n    if (custom && React.isValidElement(children)) {\n      return (\n        <>\n          {React.cloneElement(children as React.ReactElement<any>, {\n            'aria-expanded': visible,\n            ...(!rest.disabled && { ...triggers }),\n            ref: dropdownToggleRef,\n          })}\n        </>\n      )\n    }\n\n    if (variant === 'nav-item' && navLink) {\n      return (\n        <a href=\"#\" {...togglerProps} role=\"button\" {...rest} ref={dropdownToggleRef}>\n          {children}\n        </a>\n      )\n    }\n\n    return (\n      <CButton {...togglerProps} tabIndex={0} {...rest} ref={dropdownToggleRef}>\n        {children}\n        {split && <span className=\"visually-hidden\">Toggle Dropdown</span>}\n      </CButton>\n    )\n  }\n\n  return <Toggler />\n}\n\nCDropdownToggle.propTypes = {\n  caret: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  custom: PropTypes.bool,\n  split: PropTypes.bool,\n  trigger: triggerPropType,\n}\n\nCDropdownToggle.displayName = 'CDropdownToggle'\n"]},"metadata":{},"sourceType":"module"}