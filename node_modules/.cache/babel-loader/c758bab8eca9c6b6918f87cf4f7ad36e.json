{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { useForkedRef } from '../../hooks/useForkedRef.js';\nimport '@popperjs/core';\nimport CSSTransition from '../../node_modules/react-transition-group/esm/CSSTransition.js';\nvar CCollapse = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      className = _a.className,\n      horizontal = _a.horizontal,\n      onHide = _a.onHide,\n      onShow = _a.onShow,\n      visible = _a.visible,\n      rest = __rest(_a, [\"children\", \"className\", \"horizontal\", \"onHide\", \"onShow\", \"visible\"]);\n\n  var collapseRef = useRef(null);\n  var forkedRef = useForkedRef(ref, collapseRef);\n\n  var _b = useState(),\n      height = _b[0],\n      setHeight = _b[1];\n\n  var _c = useState(),\n      width = _c[0],\n      setWidth = _c[1];\n\n  var onEntering = function () {\n    onShow && onShow();\n\n    if (horizontal) {\n      collapseRef.current && setWidth(collapseRef.current.scrollWidth);\n      return;\n    }\n\n    collapseRef.current && setHeight(collapseRef.current.scrollHeight);\n  };\n\n  var onEntered = function () {\n    if (horizontal) {\n      setWidth(0);\n      return;\n    }\n\n    setHeight(0);\n  };\n\n  var onExit = function () {\n    if (horizontal) {\n      collapseRef.current && setWidth(collapseRef.current.scrollWidth);\n      return;\n    }\n\n    collapseRef.current && setHeight(collapseRef.current.scrollHeight);\n  };\n\n  var onExiting = function () {\n    onHide && onHide();\n\n    if (horizontal) {\n      setWidth(0);\n      return;\n    }\n\n    setHeight(0);\n  };\n\n  var onExited = function () {\n    if (horizontal) {\n      setWidth(0);\n      return;\n    }\n\n    setHeight(0);\n  };\n\n  return React.createElement(CSSTransition, {\n    in: visible,\n    nodeRef: collapseRef,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited,\n    timeout: 350\n  }, function (state) {\n    var currentHeight = height === 0 ? null : {\n      height: height\n    };\n    var currentWidth = width === 0 ? null : {\n      width: width\n    };\n    return React.createElement(\"div\", __assign({\n      className: classNames(className, {\n        'collapse-horizontal': horizontal,\n        collapsing: state === 'entering' || state === 'exiting',\n        'collapse show': state === 'entered',\n        collapse: state === 'exited'\n      }),\n      style: __assign(__assign({}, currentHeight), currentWidth)\n    }, rest, {\n      ref: forkedRef\n    }), children);\n  });\n});\nCCollapse.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  horizontal: PropTypes.bool,\n  onHide: PropTypes.func,\n  onShow: PropTypes.func,\n  visible: PropTypes.bool\n};\nCCollapse.displayName = 'CCollapse';\nexport { CCollapse };","map":{"version":3,"mappings":"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","names":["CCollapse","forwardRef","_a","ref","className","horizontal","onHide","onShow","visible","rest","__rest","collapseRef","useRef","forkedRef","useForkedRef","useState","height","setHeight","width","setWidth","onEntering","current","scrollWidth","scrollHeight","onEntered","onExit","onExiting","onExited","React","CSSTransition","in","nodeRef","timeout","state","currentHeight","currentWidth","__assign","classNames","collapsing","collapse","style","children","propTypes","PropTypes","node","string","bool","func","displayName"],"sources":["C:\\wamp64\\www\\Movie\\node_modules\\@coreui\\react\\src\\components\\collapse\\CCollapse.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes, useRef, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { CSSTransition } from 'react-transition-group'\n\nimport { useForkedRef } from '../../hooks'\n\nexport interface CCollapseProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Set horizontal collapsing to transition the width instead of height.\n   */\n  horizontal?: boolean\n  /**\n   * Callback fired when the component requests to be hidden.\n   */\n  onHide?: () => void\n  /**\n   * Callback fired when the component requests to be shown.\n   */\n  onShow?: () => void\n  /**\n   * Toggle the visibility of component.\n   */\n  visible?: boolean\n}\n\nexport const CCollapse = forwardRef<HTMLDivElement, CCollapseProps>(\n  ({ children, className, horizontal, onHide, onShow, visible, ...rest }, ref) => {\n    const collapseRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, collapseRef)\n\n    const [height, setHeight] = useState<number>()\n    const [width, setWidth] = useState<number>()\n\n    const onEntering = () => {\n      onShow && onShow()\n\n      if (horizontal) {\n        collapseRef.current && setWidth(collapseRef.current.scrollWidth)\n        return\n      }\n      collapseRef.current && setHeight(collapseRef.current.scrollHeight)\n    }\n\n    const onEntered = () => {\n      if (horizontal) {\n        setWidth(0)\n        return\n      }\n      setHeight(0)\n    }\n\n    const onExit = () => {\n      if (horizontal) {\n        collapseRef.current && setWidth(collapseRef.current.scrollWidth)\n        return\n      }\n      collapseRef.current && setHeight(collapseRef.current.scrollHeight)\n    }\n\n    const onExiting = () => {\n      onHide && onHide()\n      if (horizontal) {\n        setWidth(0)\n        return\n      }\n      setHeight(0)\n    }\n\n    const onExited = () => {\n      if (horizontal) {\n        setWidth(0)\n        return\n      }\n      setHeight(0)\n    }\n\n    return (\n      <CSSTransition\n        in={visible}\n        nodeRef={collapseRef}\n        onEntering={onEntering}\n        onEntered={onEntered}\n        onExit={onExit}\n        onExiting={onExiting}\n        onExited={onExited}\n        timeout={350}\n      >\n        {(state) => {\n          const currentHeight = height === 0 ? null : { height }\n          const currentWidth = width === 0 ? null : { width }\n          return (\n            <div\n              className={classNames(className, {\n                'collapse-horizontal': horizontal,\n                collapsing: state === 'entering' || state === 'exiting',\n                'collapse show': state === 'entered',\n                collapse: state === 'exited',\n              })}\n              style={{ ...currentHeight, ...currentWidth }}\n              {...rest}\n              ref={forkedRef}\n            >\n              {children}\n            </div>\n          )\n        }}\n      </CSSTransition>\n    )\n  },\n)\n\nCCollapse.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  horizontal: PropTypes.bool,\n  onHide: PropTypes.func,\n  onShow: PropTypes.func,\n  visible: PropTypes.bool,\n}\n\nCCollapse.displayName = 'CCollapse'\n"]},"metadata":{},"sourceType":"module"}