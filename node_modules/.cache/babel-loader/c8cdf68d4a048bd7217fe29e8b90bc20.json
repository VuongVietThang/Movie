{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useState, useRef, useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CSidebarNavContext } from '../sidebar/CSidebarNavContext.js';\nimport Transition from '../../node_modules/react-transition-group/esm/Transition.js';\n\nvar isInVisibleGroup = function (el1, el2) {\n  var array1 = el1.toString().split('.');\n  var array2 = el2.toString().split('.');\n  return array2.every(function (item, index) {\n    return item === array1[index];\n  });\n};\n\nvar CNavGroup = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      _b = _a.as,\n      Component = _b === void 0 ? 'li' : _b,\n      className = _a.className,\n      compact = _a.compact,\n      idx = _a.idx,\n      toggler = _a.toggler,\n      visible = _a.visible,\n      rest = __rest(_a, [\"children\", \"as\", \"className\", \"compact\", \"idx\", \"toggler\", \"visible\"]);\n\n  var _c = useState(0),\n      height = _c[0],\n      setHeight = _c[1]; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  var navItemsRef = useRef(null);\n\n  var _d = useContext(CSidebarNavContext),\n      visibleGroup = _d.visibleGroup,\n      setVisibleGroup = _d.setVisibleGroup;\n\n  var _e = useState(Boolean(visible || idx && visibleGroup && isInVisibleGroup(visibleGroup, idx))),\n      _visible = _e[0],\n      setVisible = _e[1];\n\n  useEffect(function () {\n    setVisible(Boolean(idx && visibleGroup && isInVisibleGroup(visibleGroup, idx)));\n  }, [visibleGroup]);\n\n  var handleTogglerOnCLick = function (event) {\n    event.preventDefault();\n    setVisibleGroup(_visible ? (idx === null || idx === void 0 ? void 0 : idx.toString().includes('.')) ? idx.slice(0, idx.lastIndexOf('.')) : '' : idx);\n    setVisible(!_visible);\n  };\n\n  var style = {\n    height: 0\n  };\n\n  var onEntering = function () {\n    navItemsRef.current && setHeight(navItemsRef.current.scrollHeight);\n  };\n\n  var onEntered = function () {\n    setHeight('auto');\n  };\n\n  var onExit = function () {\n    navItemsRef.current && setHeight(navItemsRef.current.scrollHeight);\n  };\n\n  var onExiting = function () {\n    var _a; // @ts-expect-error reflow is necessary to get correct height of the element\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n    (_a = navItemsRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight;\n    setHeight(0);\n  };\n\n  var onExited = function () {\n    setHeight(0);\n  };\n\n  var transitionStyles = {\n    entering: {\n      display: 'block',\n      height: height\n    },\n    entered: {\n      display: 'block',\n      height: height\n    },\n    exiting: {\n      display: 'block',\n      height: height\n    },\n    exited: {\n      height: height\n    },\n    unmounted: {}\n  };\n  var NavGroupItemsComponent = Component === 'li' ? 'ul' : 'div';\n  return React.createElement(Component, __assign({\n    className: classNames('nav-group', {\n      show: _visible\n    }, className)\n  }, rest, {\n    ref: ref\n  }), toggler && React.createElement(\"a\", {\n    className: \"nav-link nav-group-toggle\",\n    href: \"#\",\n    onClick: function (event) {\n      return handleTogglerOnCLick(event);\n    }\n  }, toggler), React.createElement(Transition, {\n    in: _visible,\n    nodeRef: navItemsRef,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited,\n    timeout: 300\n  }, function (state) {\n    return React.createElement(NavGroupItemsComponent, {\n      className: classNames('nav-group-items', {\n        compact: compact\n      }),\n      style: __assign(__assign({}, style), transitionStyles[state]),\n      ref: navItemsRef\n    }, children);\n  }));\n});\nCNavGroup.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  compact: PropTypes.bool,\n  idx: PropTypes.string,\n  toggler: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  visible: PropTypes.bool\n};\nCNavGroup.displayName = 'CNavGroup';\nexport { CNavGroup };","map":{"version":3,"mappings":"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","names":["isInVisibleGroup","el1","el2","array1","toString","split","array2","every","item","index","CNavGroup","forwardRef","_a","ref","_b","Component","className","compact","idx","toggler","visible","rest","__rest","useState","height","setHeight","navItemsRef","useRef","useContext","CSidebarNavContext","visibleGroup","setVisibleGroup","Boolean","_visible","setVisible","useEffect","handleTogglerOnCLick","event","preventDefault","includes","slice","lastIndexOf","style","onEntering","current","scrollHeight","onEntered","onExit","onExiting","offsetHeight","onExited","transitionStyles","entering","display","entered","exiting","exited","unmounted","NavGroupItemsComponent","React","__assign","classNames","show","href","onClick","Transition","in","nodeRef","timeout","state","children","propTypes","as","PropTypes","elementType","node","string","bool","oneOfType","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react\\src\\components\\nav\\CNavGroup.tsx"],"sourcesContent":["import React, {\n  CSSProperties,\n  ElementType,\n  forwardRef,\n  HTMLAttributes,\n  ReactNode,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { Transition } from 'react-transition-group'\nimport type { TransitionStatus } from 'react-transition-group'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nimport { CSidebarNavContext } from '../sidebar/CSidebarNavContext'\n\nexport interface CNavGroupProps extends HTMLAttributes<HTMLDivElement | HTMLLIElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   *\n   * @since 5.0.0\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Make nav group more compact by cutting all `padding` in half.\n   */\n  compact?: boolean\n  /**\n   * Set group toggler label.\n   */\n  toggler?: string | ReactNode\n  /**\n   * Show nav group items.\n   */\n  visible?: boolean\n  /**\n   * @ignore\n   */\n  idx?: string\n}\n\nconst isInVisibleGroup = (el1: string, el2: string) => {\n  const array1 = el1.toString().split('.')\n  const array2 = el2.toString().split('.')\n\n  return array2.every((item, index) => item === array1[index])\n}\n\nexport const CNavGroup: PolymorphicRefForwardingComponent<'li', CNavGroupProps> = forwardRef<\n  HTMLDivElement | HTMLLIElement,\n  CNavGroupProps\n>(({ children, as: Component = 'li', className, compact, idx, toggler, visible, ...rest }, ref) => {\n  const [height, setHeight] = useState<number | string>(0)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const navItemsRef = useRef<any>(null)\n\n  const { visibleGroup, setVisibleGroup } = useContext(CSidebarNavContext)\n\n  const [_visible, setVisible] = useState(\n    Boolean(visible || (idx && visibleGroup && isInVisibleGroup(visibleGroup, idx))),\n  )\n\n  useEffect(() => {\n    setVisible(Boolean(idx && visibleGroup && isInVisibleGroup(visibleGroup, idx)))\n  }, [visibleGroup])\n\n  const handleTogglerOnCLick = (event: React.MouseEvent<HTMLElement>) => {\n    event.preventDefault()\n    setVisibleGroup(\n      _visible ? (idx?.toString().includes('.') ? idx.slice(0, idx.lastIndexOf('.')) : '') : idx,\n    )\n    setVisible(!_visible)\n  }\n\n  const style: CSSProperties = {\n    height: 0,\n  }\n\n  const onEntering = () => {\n    navItemsRef.current && setHeight(navItemsRef.current.scrollHeight)\n  }\n\n  const onEntered = () => {\n    setHeight('auto')\n  }\n\n  const onExit = () => {\n    navItemsRef.current && setHeight(navItemsRef.current.scrollHeight)\n  }\n\n  const onExiting = () => {\n    // @ts-expect-error reflow is necessary to get correct height of the element\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const reflow = navItemsRef.current?.offsetHeight\n    setHeight(0)\n  }\n\n  const onExited = () => {\n    setHeight(0)\n  }\n\n  const transitionStyles = {\n    entering: { display: 'block', height: height },\n    entered: { display: 'block', height: height },\n    exiting: { display: 'block', height: height },\n    exited: { height: height },\n    unmounted: {},\n  }\n\n  const NavGroupItemsComponent = Component === 'li' ? 'ul' : 'div'\n\n  return (\n    <Component\n      className={classNames('nav-group', { show: _visible }, className)}\n      {...rest}\n      ref={ref}\n    >\n      {toggler && (\n        <a\n          className=\"nav-link nav-group-toggle\"\n          href=\"#\"\n          onClick={(event) => handleTogglerOnCLick(event)}\n        >\n          {toggler}\n        </a>\n      )}\n      <Transition\n        in={_visible}\n        nodeRef={navItemsRef}\n        onEntering={onEntering}\n        onEntered={onEntered}\n        onExit={onExit}\n        onExiting={onExiting}\n        onExited={onExited}\n        timeout={300}\n      >\n        {(state) => (\n          <NavGroupItemsComponent\n            className={classNames('nav-group-items', {\n              compact: compact,\n            })}\n            style={{\n              ...style,\n              ...transitionStyles[state as TransitionStatus],\n            }}\n            ref={navItemsRef}\n          >\n            {children}\n          </NavGroupItemsComponent>\n        )}\n      </Transition>\n    </Component>\n  )\n})\n\nCNavGroup.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  compact: PropTypes.bool,\n  idx: PropTypes.string,\n  toggler: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  visible: PropTypes.bool,\n}\n\nCNavGroup.displayName = 'CNavGroup'\n"]},"metadata":{},"sourceType":"module"}