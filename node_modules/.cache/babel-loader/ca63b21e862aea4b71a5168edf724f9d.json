{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport '@popperjs/core';\nimport { useForkedRef } from '../../hooks/useForkedRef.js';\nvar CVirtualScroller = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      className = _a.className,\n      visibleItems = _a.visibleItems,\n      onScroll = _a.onScroll,\n      rest = __rest(_a, [\"children\", \"className\", \"visibleItems\", \"onScroll\"]);\n\n  var virtualScrollRef = useRef(null);\n  var virtualScrollContentRef = useRef(null);\n  var forkedRef = useForkedRef(ref, virtualScrollRef);\n\n  var _b = useState(Math.floor(visibleItems / 2)),\n      buffer = _b[0],\n      setBuffer = _b[1];\n\n  var _c = useState(1),\n      currentItemIndex = _c[0],\n      setCurrentItemIndex = _c[1];\n\n  var _d = useState(0),\n      itemHeight = _d[0],\n      setItemHeight = _d[1];\n\n  var _e = useState(React.Children.count(children)),\n      itemsNumber = _e[0],\n      setItemsNumber = _e[1];\n\n  var _f = useState(0),\n      viewportPadding = _f[0],\n      setViewportPadding = _f[1];\n\n  var _g = useState(visibleItems * itemHeight + 2 * viewportPadding),\n      viewportHeight = _g[0],\n      setViewportHeight = _g[1];\n\n  var _h = useState(itemsNumber * itemHeight + 2 * viewportPadding),\n      maxHeight = _h[0],\n      setMaxHeight = _h[1];\n\n  useEffect(function () {\n    virtualScrollRef.current && virtualScrollRef.current.scrollTop;\n    virtualScrollRef.current && setViewportPadding(Number.parseFloat(getComputedStyle(virtualScrollRef.current).paddingTop));\n  });\n  useEffect(function () {\n    setItemsNumber(React.Children.count(children));\n  }, [children]);\n  useEffect(function () {\n    setViewportHeight(Math.min(visibleItems, itemsNumber) * itemHeight + 2 * viewportPadding);\n  }, [itemHeight, itemsNumber, viewportPadding, visibleItems]);\n  useEffect(function () {\n    setMaxHeight(itemsNumber * itemHeight);\n    virtualScrollRef.current && virtualScrollRef.current.scrollTop;\n  }, [itemHeight, itemsNumber]);\n  useEffect(function () {\n    setBuffer(Math.floor(visibleItems / 2));\n  }, [visibleItems]);\n\n  var handleScroll = function (scrollTop) {\n    var _currentItemIndex = itemHeight && Math.max(Math.ceil(scrollTop / itemHeight), 1);\n\n    setCurrentItemIndex(_currentItemIndex);\n    onScroll && onScroll(_currentItemIndex);\n  };\n\n  return React.createElement(\"div\", __assign({\n    className: classNames('virtual-scroller', className),\n    onScroll: function (event) {\n      return handleScroll(event.target.scrollTop);\n    },\n    style: {\n      height: viewportHeight,\n      overflowY: 'auto'\n    },\n    ref: forkedRef\n  }, rest), React.createElement(\"div\", {\n    className: \"virtual-scroller-content\",\n    style: {\n      height: maxHeight\n    },\n    ref: virtualScrollContentRef\n  }, React.Children.map(children, function (child, index) {\n    if (React.isValidElement(child) && index + 1 > Math.max(currentItemIndex - buffer, 0) && index + 1 <= currentItemIndex + visibleItems + buffer) {\n      return React.cloneElement(child, {\n        className: classNames(child.props.className, {\n          'virtual-scroller-item-preload': index + 1 > currentItemIndex + visibleItems || index + 1 < currentItemIndex\n        }),\n        key: index,\n        style: __assign({}, currentItemIndex > buffer && {\n          transform: \"translateY(\".concat((currentItemIndex - buffer) * itemHeight, \"px)\")\n        }),\n        ref: function (node) {\n          return node && node.offsetHeight && setItemHeight(node.offsetHeight + Number.parseFloat(getComputedStyle(node).marginTop) + Number.parseFloat(getComputedStyle(node).marginBottom));\n        }\n      });\n    }\n\n    return;\n  })));\n});\nCVirtualScroller.propTypes = {\n  onScroll: PropTypes.func,\n  visibleItems: PropTypes.number.isRequired\n};\nCVirtualScroller.displayName = 'CVirtualScroller';\nexport { CVirtualScroller };","map":{"version":3,"mappings":"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","names":["CVirtualScroller","forwardRef","_a","ref","className","visibleItems","onScroll","rest","virtualScrollRef","useRef","virtualScrollContentRef","forkedRef","useForkedRef","useState","Math","floor","buffer","setBuffer","currentItemIndex","setCurrentItemIndex","itemHeight","setItemHeight","React","Children","count","children","itemsNumber","setItemsNumber","viewportPadding","setViewportPadding","viewportHeight","setViewportHeight","maxHeight","setMaxHeight","useEffect","current","scrollTop","Number","parseFloat","getComputedStyle","paddingTop","min","handleScroll","_currentItemIndex","max","ceil","classNames","event","target","style","height","overflowY","map","child","index","isValidElement","cloneElement","props","key","__assign","transform","node","offsetHeight","marginTop","marginBottom","propTypes","PropTypes","func","number","isRequired","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\virtual-scroller\\CVirtualScroller.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes, UIEvent, useEffect, useRef, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { useForkedRef } from '../../hooks'\n\nexport interface CVirtualScrollerProps extends Omit<HTMLAttributes<HTMLDivElement>, 'onScroll'> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Event fires when the component has been scrolled.\n   */\n  onScroll?: (currentItemIndex: number) => void\n  /**\n   * Amount of visible items\n   */\n  visibleItems: number\n}\n\nexport const CVirtualScroller = forwardRef<HTMLDivElement, CVirtualScrollerProps>(\n  ({ children, className, visibleItems, onScroll, ...rest }, ref) => {\n    const virtualScrollRef = useRef<HTMLDivElement>(null)\n    const virtualScrollContentRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, virtualScrollRef)\n\n    const [buffer, setBuffer] = useState(Math.floor(visibleItems / 2))\n    const [currentItemIndex, setCurrentItemIndex] = useState(1)\n    const [itemHeight, setItemHeight] = useState(0)\n    const [itemsNumber, setItemsNumber] = useState(React.Children.count(children))\n    const [viewportPadding, setViewportPadding] = useState(0)\n    const [viewportHeight, setViewportHeight] = useState(\n      visibleItems * itemHeight + 2 * viewportPadding,\n    )\n    const [maxHeight, setMaxHeight] = useState(itemsNumber * itemHeight + 2 * viewportPadding)\n\n    useEffect(() => {\n      virtualScrollRef.current && virtualScrollRef.current.scrollTop\n\n      virtualScrollRef.current &&\n        setViewportPadding(Number.parseFloat(getComputedStyle(virtualScrollRef.current).paddingTop))\n    })\n\n    useEffect(() => {\n      setItemsNumber(React.Children.count(children))\n    }, [children])\n\n    useEffect(() => {\n      setViewportHeight(Math.min(visibleItems, itemsNumber) * itemHeight + 2 * viewportPadding)\n    }, [itemHeight, itemsNumber, viewportPadding, visibleItems])\n\n    useEffect(() => {\n      setMaxHeight(itemsNumber * itemHeight)\n      virtualScrollRef.current && virtualScrollRef.current.scrollTop\n    }, [itemHeight, itemsNumber])\n\n    useEffect(() => {\n      setBuffer(Math.floor(visibleItems / 2))\n    }, [visibleItems])\n\n    const handleScroll = (scrollTop: number) => {\n      const _currentItemIndex = itemHeight && Math.max(Math.ceil(scrollTop / itemHeight), 1)\n      setCurrentItemIndex(_currentItemIndex)\n      onScroll && onScroll(_currentItemIndex)\n    }\n\n    return (\n      <div\n        className={classNames('virtual-scroller', className)}\n        onScroll={(event: UIEvent<HTMLDivElement>) =>\n          handleScroll((event.target as HTMLDivElement).scrollTop)\n        }\n        style={{\n          height: viewportHeight,\n          overflowY: 'auto',\n        }}\n        ref={forkedRef}\n        {...rest}\n      >\n        <div\n          className=\"virtual-scroller-content\"\n          style={{\n            height: maxHeight,\n          }}\n          ref={virtualScrollContentRef}\n        >\n          {React.Children.map(children, (child, index) => {\n            if (\n              React.isValidElement(child) &&\n              index + 1 > Math.max(currentItemIndex - buffer, 0) &&\n              index + 1 <= currentItemIndex + visibleItems + buffer\n            ) {\n              return React.cloneElement(child as React.ReactElement<any>, {\n                className: classNames(child.props.className, {\n                  'virtual-scroller-item-preload':\n                    index + 1 > currentItemIndex + visibleItems || index + 1 < currentItemIndex,\n                }),\n                key: index,\n                style: {\n                  ...(currentItemIndex > buffer && {\n                    transform: `translateY(${(currentItemIndex - buffer) * itemHeight}px)`,\n                  }),\n                },\n                ref: (node: HTMLElement) =>\n                  node &&\n                  node.offsetHeight &&\n                  setItemHeight(\n                    node.offsetHeight +\n                      Number.parseFloat(getComputedStyle(node).marginTop) +\n                      Number.parseFloat(getComputedStyle(node).marginBottom),\n                  ),\n              })\n            }\n            return\n          })}\n        </div>\n      </div>\n    )\n  },\n)\n\nCVirtualScroller.propTypes = {\n  onScroll: PropTypes.func,\n  visibleItems: PropTypes.number.isRequired,\n}\n\nCVirtualScroller.displayName = 'CVirtualScroller'\n"]},"metadata":{},"sourceType":"module"}