{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nvar CHeaderBrand = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      _b = _a.as,\n      Component = _b === void 0 ? 'a' : _b,\n      className = _a.className,\n      rest = __rest(_a, [\"children\", \"as\", \"className\"]);\n\n  return React.createElement(Component, __assign({\n    className: classNames('header-brand', className)\n  }, rest, {\n    ref: ref\n  }), children);\n});\nCHeaderBrand.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string\n};\nCHeaderBrand.displayName = 'CHeaderBrand';\nexport { CHeaderBrand };","map":{"version":3,"mappings":";;;;IAkBaA,YAAY,GAA8DC,UAAU,CAG/F,UAACC,EAAD,EAAwDC,GAAxD,EAA2D;AAAxD,cAAQ,cAAR;AAAA,MAAUC,EAAmB,QAA7B;AAAA,MAAcC,SAAS,GAAGD,sBAAGA,EAA7B;AAAA,MAA+BE,SAAS,eAAxC;AAAA,MAA6CC,IAAI,cAAnD,+BAAmD,CAAjD;;AACH,SACEC,oBAACH,SAAD,EAAUI;AAACH,aAAS,EAAEI,UAAU,CAAC,cAAD,EAAiBJ,SAAjB;AAAtB,KAAuDC,IAAvD,EAA2D;AAAEJ,OAAG,EAAEA;AAAP,GAA3D,CAAV,EACGQ,QADH,CADF;AAKD,CATgG;AAWjGX,YAAY,CAACY,SAAb,GAAyB;AACvBC,IAAE,EAAEC,SAAS,CAACC,WADS;AAEvBJ,UAAQ,EAAEG,SAAS,CAACE,IAFG;AAGvBV,WAAS,EAAEQ,SAAS,CAACG;AAHE,CAAzB;AAMAjB,YAAY,CAACkB,WAAb,GAA2B,cAA3B","names":["CHeaderBrand","forwardRef","_a","ref","_b","Component","className","rest","React","__assign","classNames","children","propTypes","as","PropTypes","elementType","node","string","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\header\\CHeaderBrand.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, AnchorHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CHeaderBrandProps\n  extends AnchorHTMLAttributes<HTMLAnchorElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CHeaderBrand: PolymorphicRefForwardingComponent<'a', CHeaderBrandProps> = forwardRef<\n  HTMLAnchorElement | HTMLSpanElement,\n  CHeaderBrandProps\n>(({ children, as: Component = 'a', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('header-brand', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCHeaderBrand.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCHeaderBrand.displayName = 'CHeaderBrand'\n"]},"metadata":{},"sourceType":"module"}