{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CFormControlValidation } from './CFormControlValidation.js';\nimport { CFormLabel } from './CFormLabel.js';\nimport { useForkedRef } from '../../hooks/useForkedRef.js';\nimport '@popperjs/core';\nvar CFormCheck = forwardRef(function (_a, ref) {\n  var className = _a.className,\n      button = _a.button,\n      feedback = _a.feedback,\n      feedbackInvalid = _a.feedbackInvalid,\n      feedbackValid = _a.feedbackValid,\n      floatingLabel = _a.floatingLabel,\n      tooltipFeedback = _a.tooltipFeedback,\n      hitArea = _a.hitArea,\n      id = _a.id,\n      indeterminate = _a.indeterminate,\n      inline = _a.inline,\n      invalid = _a.invalid,\n      label = _a.label,\n      reverse = _a.reverse,\n      _b = _a.type,\n      type = _b === void 0 ? 'checkbox' : _b,\n      valid = _a.valid,\n      rest = __rest(_a, [\"className\", \"button\", \"feedback\", \"feedbackInvalid\", \"feedbackValid\", \"floatingLabel\", \"tooltipFeedback\", \"hitArea\", \"id\", \"indeterminate\", \"inline\", \"invalid\", \"label\", \"reverse\", \"type\", \"valid\"]);\n\n  var inputRef = useRef(null);\n  var forkedRef = useForkedRef(ref, inputRef);\n  useEffect(function () {\n    if (inputRef.current && indeterminate) {\n      inputRef.current.indeterminate = indeterminate;\n    }\n  }, [indeterminate, inputRef.current]);\n\n  var FormControl = function () {\n    return React.createElement(\"input\", __assign({\n      type: type,\n      className: classNames(button ? 'btn-check' : 'form-check-input', {\n        'is-invalid': invalid,\n        'is-valid': valid,\n        'me-2': hitArea\n      }),\n      id: id\n    }, rest, {\n      ref: forkedRef\n    }));\n  };\n\n  var FormValidation = function () {\n    return React.createElement(CFormControlValidation, {\n      describedby: rest['aria-describedby'],\n      feedback: feedback,\n      feedbackInvalid: feedbackInvalid,\n      feedbackValid: feedbackValid,\n      floatingLabel: floatingLabel,\n      invalid: invalid,\n      tooltipFeedback: tooltipFeedback,\n      valid: valid\n    });\n  };\n\n  var FormLabel = function () {\n    var _a;\n\n    return React.createElement(CFormLabel, __assign({\n      customClassName: classNames(button ? classNames('btn', button.variant ? \"btn-\".concat(button.variant, \"-\").concat(button.color) : \"btn-\".concat(button.color), (_a = {}, _a[\"btn-\".concat(button.size)] = button.size, _a), \"\".concat(button.shape)) : 'form-check-label')\n    }, id && {\n      htmlFor: id\n    }), label);\n  };\n\n  var FormCheck = function () {\n    if (button) {\n      return React.createElement(React.Fragment, null, React.createElement(FormControl, null), label && React.createElement(FormLabel, null), React.createElement(FormValidation, null));\n    }\n\n    if (label) {\n      return hitArea ? React.createElement(React.Fragment, null, React.createElement(FormControl, null), React.createElement(CFormLabel, __assign({\n        customClassName: classNames('form-check-label stretched-link', className)\n      }, id && {\n        htmlFor: id\n      }), label), React.createElement(FormValidation, null)) : React.createElement(\"div\", {\n        className: classNames('form-check', {\n          'form-check-inline': inline,\n          'form-check-reverse': reverse,\n          'is-invalid': invalid,\n          'is-valid': valid\n        }, className)\n      }, React.createElement(FormControl, null), React.createElement(FormLabel, null), React.createElement(FormValidation, null));\n    }\n\n    return React.createElement(FormControl, null);\n  };\n\n  return React.createElement(FormCheck, null);\n});\nCFormCheck.propTypes = __assign({\n  button: PropTypes.object,\n  className: PropTypes.string,\n  hitArea: PropTypes.oneOf(['full']),\n  id: PropTypes.string,\n  indeterminate: PropTypes.bool,\n  inline: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  reverse: PropTypes.bool,\n  type: PropTypes.oneOf(['checkbox', 'radio'])\n}, CFormControlValidation.propTypes);\nCFormCheck.displayName = 'CFormCheck';\nexport { CFormCheck };","map":{"version":3,"mappings":"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","names":["CFormCheck","forwardRef","_a","ref","button","feedback","feedbackInvalid","feedbackValid","floatingLabel","tooltipFeedback","hitArea","id","indeterminate","inline","invalid","label","reverse","_b","type","valid","rest","__rest","inputRef","useRef","forkedRef","useForkedRef","useEffect","current","FormControl","React","__assign","className","classNames","FormValidation","CFormControlValidation","describedby","FormLabel","CFormLabel","customClassName","variant","concat","color","size","shape","htmlFor","FormCheck","propTypes","PropTypes","object","string","oneOf","bool","oneOfType","node","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react\\src\\components\\form\\CFormCheck.tsx"],"sourcesContent":["import React, { forwardRef, InputHTMLAttributes, ReactNode, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CFormControlValidation, CFormControlValidationProps } from './CFormControlValidation'\nimport { CFormLabel } from './CFormLabel'\n\nimport { useForkedRef } from '../../hooks'\nimport type { Colors, Shapes } from '../../types'\n\nexport type ButtonObject = {\n  /**\n   * Sets the color context of the component to one of CoreUIâ€™s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Select the shape of the component.\n   *\n   * @type 'rounded' | 'rounded-top' | 'rounded-end' | 'rounded-bottom' | 'rounded-start' | 'rounded-circle' | 'rounded-pill' | 'rounded-0' | 'rounded-1' | 'rounded-2' | 'rounded-3' | string\n   */\n  shape?: Shapes\n  /**\n   * Size the component small or large.\n   */\n  size?: 'sm' | 'lg'\n  /**\n   * Set the button variant to an outlined button or a ghost button.\n   */\n  variant?: 'outline' | 'ghost'\n}\n\nexport interface CFormCheckProps\n  extends CFormControlValidationProps,\n    InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * Create button-like checkboxes and radio buttons.\n   */\n  button?: ButtonObject\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets hit area to the full area of the component.\n   */\n  hitArea?: 'full'\n  /**\n   * The id global attribute defines an identifier (ID) that must be unique in the whole document.\n   */\n  id?: string\n  /**\n   * Input Checkbox indeterminate Property.\n   */\n  indeterminate?: boolean\n  /**\n   * Group checkboxes or radios on the same horizontal row.\n   */\n  inline?: boolean\n  /**\n   * Set component validation state to invalid.\n   */\n  invalid?: boolean\n  /**\n   * The element represents a caption for a component.\n   */\n  label?: string | ReactNode\n  /**\n   * Put checkboxes or radios on the opposite side.\n   *\n   * @sinve 4.7.0\n   */\n  reverse?: boolean\n  /**\n   * Specifies the type of component.\n   */\n  type?: 'checkbox' | 'radio'\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormCheck = forwardRef<HTMLInputElement, CFormCheckProps>(\n  (\n    {\n      className,\n      button,\n      feedback,\n      feedbackInvalid,\n      feedbackValid,\n      floatingLabel,\n      tooltipFeedback,\n      hitArea,\n      id,\n      indeterminate,\n      inline,\n      invalid,\n      label,\n      reverse,\n      type = 'checkbox',\n      valid,\n      ...rest\n    },\n    ref,\n  ) => {\n    const inputRef = useRef<HTMLInputElement>(null)\n    const forkedRef = useForkedRef(ref, inputRef)\n\n    useEffect(() => {\n      if (inputRef.current && indeterminate) {\n        inputRef.current.indeterminate = indeterminate\n      }\n    }, [indeterminate, inputRef.current])\n\n    const FormControl = () => (\n      <input\n        type={type}\n        className={classNames(button ? 'btn-check' : 'form-check-input', {\n          'is-invalid': invalid,\n          'is-valid': valid,\n          'me-2': hitArea,\n        })}\n        id={id}\n        {...rest}\n        ref={forkedRef}\n      />\n    )\n\n    const FormValidation = () => (\n      <CFormControlValidation\n        describedby={rest['aria-describedby']}\n        feedback={feedback}\n        feedbackInvalid={feedbackInvalid}\n        feedbackValid={feedbackValid}\n        floatingLabel={floatingLabel}\n        invalid={invalid}\n        tooltipFeedback={tooltipFeedback}\n        valid={valid}\n      />\n    )\n\n    const FormLabel = () => (\n      <CFormLabel\n        customClassName={classNames(\n          button\n            ? classNames(\n                'btn',\n                button.variant ? `btn-${button.variant}-${button.color}` : `btn-${button.color}`,\n                {\n                  [`btn-${button.size}`]: button.size,\n                },\n                `${button.shape}`,\n              )\n            : 'form-check-label',\n        )}\n        {...(id && { htmlFor: id })}\n      >\n        {label}\n      </CFormLabel>\n    )\n\n    const FormCheck = () => {\n      if (button) {\n        return (\n          <>\n            <FormControl />\n            {label && <FormLabel />}\n            <FormValidation />\n          </>\n        )\n      }\n\n      if (label) {\n        return hitArea ? (\n          <>\n            <FormControl />\n            <CFormLabel\n              customClassName={classNames('form-check-label stretched-link', className)}\n              {...(id && { htmlFor: id })}\n            >\n              {label}\n            </CFormLabel>\n            <FormValidation />\n          </>\n        ) : (\n          <div\n            className={classNames(\n              'form-check',\n              {\n                'form-check-inline': inline,\n                'form-check-reverse': reverse,\n                'is-invalid': invalid,\n                'is-valid': valid,\n              },\n              className,\n            )}\n          >\n            <FormControl />\n            <FormLabel />\n            <FormValidation />\n          </div>\n        )\n      }\n\n      return <FormControl />\n    }\n\n    return <FormCheck />\n  },\n)\n\nCFormCheck.propTypes = {\n  button: PropTypes.object,\n  className: PropTypes.string,\n  hitArea: PropTypes.oneOf(['full']),\n  id: PropTypes.string,\n  indeterminate: PropTypes.bool,\n  inline: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  reverse: PropTypes.bool,\n  type: PropTypes.oneOf(['checkbox', 'radio']),\n  ...CFormControlValidation.propTypes,\n}\n\nCFormCheck.displayName = 'CFormCheck'\n"]},"metadata":{},"sourceType":"module"}