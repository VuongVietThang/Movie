{"ast":null,"code":"import { __module as classnames } from '../../_virtual/index2.js';\n/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n\nvar hasRequiredClassnames;\n\nfunction requireClassnames() {\n  if (hasRequiredClassnames) return classnames.exports;\n  hasRequiredClassnames = 1;\n\n  (function (module) {\n    /* global define */\n    (function () {\n      var hasOwn = {}.hasOwnProperty;\n\n      function classNames() {\n        var classes = '';\n\n        for (var i = 0; i < arguments.length; i++) {\n          var arg = arguments[i];\n\n          if (arg) {\n            classes = appendClass(classes, parseValue(arg));\n          }\n        }\n\n        return classes;\n      }\n\n      function parseValue(arg) {\n        if (typeof arg === 'string' || typeof arg === 'number') {\n          return arg;\n        }\n\n        if (typeof arg !== 'object') {\n          return '';\n        }\n\n        if (Array.isArray(arg)) {\n          return classNames.apply(null, arg);\n        }\n\n        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n          return arg.toString();\n        }\n\n        var classes = '';\n\n        for (var key in arg) {\n          if (hasOwn.call(arg, key) && arg[key]) {\n            classes = appendClass(classes, key);\n          }\n        }\n\n        return classes;\n      }\n\n      function appendClass(value, newClass) {\n        if (!newClass) {\n          return value;\n        }\n\n        if (value) {\n          return value + ' ' + newClass;\n        }\n\n        return value + newClass;\n      }\n\n      if (module.exports) {\n        classNames.default = classNames;\n        module.exports = classNames;\n      } else {\n        window.classNames = classNames;\n      }\n    })();\n  })(classnames);\n\n  return classnames.exports;\n}\n\nexport { requireClassnames as __require };","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAKA;AAEC,iBAAY;AAGZ,UAAIA,MAAM,GAAG,GAAGC,cAAhB;;AAEA,eAASC,UAAT,GAAuB;AACtB,YAAIC,OAAO,GAAG,EAAd;;AAEA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAC1C,cAAIG,GAAG,GAAGF,SAAS,CAACD,CAAD,CAAnB;;AACA,cAAIG,GAAJ,EAAS;AACRJ,mBAAO,GAAGK,WAAW,CAACL,OAAD,EAAUM,UAAU,CAACF,GAAD,CAApB,CAArB;AACJ;AACA;;AAEE,eAAOJ,OAAP;AACF;;AAEC,eAASM,UAAT,CAAqBF,GAArB,EAA0B;AACzB,YAAI,OAAOA,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,QAA9C,EAAwD;AACvD,iBAAOA,GAAP;AACH;;AAEE,YAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC5B,iBAAO,EAAP;AACH;;AAEE,YAAIG,KAAK,CAACC,OAAN,CAAcJ,GAAd,CAAJ,EAAwB;AACvB,iBAAOL,UAAU,CAACU,KAAX,CAAiB,IAAjB,EAAuBL,GAAvB,CAAP;AACH;;AAEE,YAAIA,GAAG,CAACM,QAAJ,KAAiBC,MAAM,CAACC,SAAP,CAAiBF,QAAlC,IAA8C,CAACN,GAAG,CAACM,QAAJ,CAAaA,QAAb,GAAwBG,QAAxB,CAAiC,eAAjC,CAAnD,EAAsG;AACrG,iBAAOT,GAAG,CAACM,QAAJ,EAAP;AACH;;AAEE,YAAIV,OAAO,GAAG,EAAd;;AAEA,aAAK,IAAIc,GAAT,IAAgBV,GAAhB,EAAqB;AACpB,cAAIP,MAAM,CAACkB,IAAP,CAAYX,GAAZ,EAAiBU,GAAjB,KAAyBV,GAAG,CAACU,GAAD,CAAhC,EAAuC;AACtCd,mBAAO,GAAGK,WAAW,CAACL,OAAD,EAAUc,GAAV,CAArB;AACJ;AACA;;AAEE,eAAOd,OAAP;AACF;;AAEC,eAASK,WAAT,CAAsBW,KAAtB,EAA6BC,QAA7B,EAAuC;AACtC,YAAI,CAACA,QAAL,EAAe;AACd,iBAAOD,KAAP;AACH;;AAEE,YAAIA,KAAJ,EAAW;AACV,iBAAOA,KAAK,GAAG,GAAR,GAAcC,QAArB;AACH;;AAEE,eAAOD,KAAK,GAAGC,QAAf;AACF;;AAEC,UAAqCC,MAAM,CAACC,OAA5C,EAAqD;AACpDpB,kBAAU,CAACqB,OAAX,GAAqBrB,UAArB;AACAmB,yBAAiBnB,UAAjB;AACA,OAHD,MAQO;AACNsB,cAAM,CAACtB,UAAP,GAAoBA,UAApB;AACF;AACC,KArEA,GAAD","names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","appendClass","parseValue","Array","isArray","apply","toString","Object","prototype","includes","key","call","value","newClass","module","exports","default","window"],"sources":["C:\\wamp64\\www\\Movie\\node_modules\\@coreui\\classnames\\index.js"],"sourcesContent":["/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = '';\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (arg) {\n\t\t\t\tclasses = appendClass(classes, parseValue(arg));\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}\n\n\tfunction parseValue (arg) {\n\t\tif (typeof arg === 'string' || typeof arg === 'number') {\n\t\t\treturn arg;\n\t\t}\n\n\t\tif (typeof arg !== 'object') {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (Array.isArray(arg)) {\n\t\t\treturn classNames.apply(null, arg);\n\t\t}\n\n\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\treturn arg.toString();\n\t\t}\n\n\t\tvar classes = '';\n\n\t\tfor (var key in arg) {\n\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\tclasses = appendClass(classes, key);\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}\n\n\tfunction appendClass (value, newClass) {\n\t\tif (!newClass) {\n\t\t\treturn value;\n\t\t}\n\t\n\t\tif (value) {\n\t\t\treturn value + ' ' + newClass;\n\t\t}\n\t\n\t\treturn value + newClass;\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n"]},"metadata":{},"sourceType":"module"}