{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CLink } from '../link/CLink.js';\nimport { colorPropType } from '../../props.js';\nvar CListGroupItem = forwardRef(function (_a, ref) {\n  var _b;\n\n  var children = _a.children,\n      active = _a.active,\n      _c = _a.as,\n      as = _c === void 0 ? 'li' : _c,\n      className = _a.className,\n      disabled = _a.disabled,\n      color = _a.color,\n      rest = __rest(_a, [\"children\", \"active\", \"as\", \"className\", \"disabled\", \"color\"]);\n\n  var Component = as === 'a' || as === 'button' ? CLink : as;\n  rest = __assign(__assign(__assign(__assign({}, (as === 'a' || as === 'button') && {\n    active: active,\n    disabled: disabled,\n    as: as,\n    ref: ref\n  }), active && {\n    'aria-current': true\n  }), disabled && {\n    'aria-disabled': true\n  }), rest);\n  return React.createElement(Component, __assign({\n    className: classNames('list-group-item', (_b = {}, _b[\"list-group-item-\".concat(color)] = color, _b['list-group-item-action'] = as === 'a' || as === 'button', _b.active = active, _b.disabled = disabled, _b), className)\n  }, rest), children);\n});\nCListGroupItem.propTypes = {\n  active: PropTypes.bool,\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  disabled: PropTypes.bool\n};\nCListGroupItem.displayName = 'CListGroupItem';\nexport { CListGroupItem };","map":{"version":3,"mappings":";;;;;;IAoCaA,cAAc,GACzBC,UAAU,CACR,UAACC,EAAD,EAAuEC,GAAvE,EAA0E;;;AAAvE,cAAQ,cAAR;AAAA,MAAUC,MAAM,YAAhB;AAAA,MAAkBC,EAAS,QAA3B;AAAA,MAAkBC,EAAE,mBAAG,IAAH,GAAOD,EAA3B;AAAA,MAA6BE,SAAS,eAAtC;AAAA,MAAwCC,QAAQ,cAAhD;AAAA,MAAkDC,KAAK,WAAvD;AAAA,MAA4DC,IAAI,GAAlEC,0EAAE;;AACD,MAAMC,SAAS,GAAGN,EAAE,KAAK,GAAP,IAAcA,EAAE,KAAK,QAArB,GAAgCO,KAAhC,GAAwCP,EAA1D;AAEAI,MAAI,2CACE,CAACJ,EAAE,KAAK,GAAP,IAAcA,EAAE,KAAK,QAAtB,KAAmC;AACrCF,UAAM,QAD+B;AAErCI,YAAQ,UAF6B;AAGrCF,MAAE,IAHmC;AAIrCH,OAAG,EAAEA;AAJgC,GADrC,GAOEC,MAAM,IAAI;AAAE,oBAAgB;AAAlB,GAPZ,GAQEI,QAAQ,IAAI;AAAE,qBAAiB;AAAnB,GARd,GASCE,IATD,CAAJ;AAYA,SACEI,oBAACF,SAAD,EAAUG;AACRR,aAAS,EAAES,UAAU,CACnB,iBADmB,GACFC,SAEfA,GAAC,mBAAmBC,MAAnB,CAAmBT,KAAnB,CAAD,IAA8BA,KAFf,EAGfQ,+BAA0BX,EAAE,KAAK,GAAP,IAAcA,EAAE,KAAK,QAHhC,EAIfW,YAAMb,MAJS,EAKfa,cAAQT,QALO,EAOjBS,EARmB,GAQnBV,SARmB;AADb,KAWJG,IAXI,CAAV,EAaGS,QAbH,CADF;AAiBD,CAjCO;AAoCZnB,cAAc,CAACoB,SAAf,GAA2B;AACzBhB,QAAM,EAAEiB,SAAS,CAACC,IADO;AAEzBhB,IAAE,EAAEe,SAAS,CAACE,WAFW;AAGzBJ,UAAQ,EAAEE,SAAS,CAACG,IAHK;AAIzBjB,WAAS,EAAEc,SAAS,CAACI,MAJI;AAKzBhB,OAAK,EAAEiB,aALkB;AAMzBlB,UAAQ,EAAEa,SAAS,CAACC;AANK,CAA3B;AASAtB,cAAc,CAAC2B,WAAf,GAA6B,gBAA7B","names":["CListGroupItem","forwardRef","_a","ref","active","_c","as","className","disabled","color","rest","__rest","Component","CLink","React","__assign","classNames","_b","concat","children","propTypes","PropTypes","bool","elementType","node","string","colorPropType","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\list-group\\CListGroupItem.tsx"],"sourcesContent":["import React, { ElementType, AnchorHTMLAttributes, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CLink } from '../link/CLink'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CListGroupItemProps\n  extends AnchorHTMLAttributes<HTMLLIElement | HTMLAnchorElement | HTMLButtonElement> {\n  /**\n   * Toggle the active state for the component.\n   */\n  active?: boolean\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUIâ€™s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n}\n\nexport const CListGroupItem: PolymorphicRefForwardingComponent<'li', CListGroupItemProps> =\n  forwardRef<HTMLLIElement | HTMLAnchorElement | HTMLButtonElement, CListGroupItemProps>(\n    ({ children, active, as = 'li', className, disabled, color, ...rest }, ref) => {\n      const Component = as === 'a' || as === 'button' ? CLink : as\n\n      rest = {\n        ...((as === 'a' || as === 'button') && {\n          active,\n          disabled,\n          as,\n          ref: ref,\n        }),\n        ...(active && { 'aria-current': true }),\n        ...(disabled && { 'aria-disabled': true }),\n        ...rest,\n      }\n\n      return (\n        <Component\n          className={classNames(\n            'list-group-item',\n            {\n              [`list-group-item-${color}`]: color,\n              'list-group-item-action': as === 'a' || as === 'button',\n              active,\n              disabled,\n            },\n            className,\n          )}\n          {...rest}\n        >\n          {children}\n        </Component>\n      )\n    },\n  )\n\nCListGroupItem.propTypes = {\n  active: PropTypes.bool,\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  disabled: PropTypes.bool,\n}\n\nCListGroupItem.displayName = 'CListGroupItem'\n"]},"metadata":{},"sourceType":"module"}