{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { CCloseButton } from '../close-button/CCloseButton.js';\nimport { CToastContext } from './CToastContext.js';\nvar CToastClose = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      Component = _a.as,\n      rest = __rest(_a, [\"children\", \"as\"]);\n\n  var setVisible = useContext(CToastContext).setVisible;\n  return Component ? React.createElement(Component, __assign({\n    onClick: function () {\n      return setVisible(false);\n    }\n  }, rest, {\n    ref: ref\n  }), children) : React.createElement(CCloseButton, __assign({\n    onClick: function () {\n      return setVisible(false);\n    }\n  }, rest, {\n    ref: ref\n  }));\n});\nCToastClose.propTypes = __assign(__assign({}, CCloseButton.propTypes), {\n  as: PropTypes.elementType\n});\nCToastClose.displayName = 'CToastClose';\nexport { CToastClose };","map":{"version":3,"mappings":";;;;;IAkBaA,WAAW,GACtBC,UAAU,CAAsC,UAACC,EAAD,EAAuCC,GAAvC,EAA0C;AAAvC,cAAQ,cAAR;AAAA,MAAcC,SAAS,QAAvB;AAAA,MAA4BC,IAAI,GAAlCC,8BAAE;;AACzC,gBAAU,GAAKC,UAAU,CAACC,aAAD,CAAV,CAAyBC,UAAxC;AACR,SAAOL,SAAS,GACdM,oBAACN,SAAD,EAAUO;AAACC,WAAO,EAAE,YAAM;AAAA,uBAAU,CAAC,KAAD,CAAV;AAAiB;AAAjC,KAAuCP,IAAvC,EAA6C;AAAAF,OAAG,EAAEA;AAAL,GAA7C,CAAV,EACGU,QADH,CADc,GAKdH,oBAACI,YAAD,EAAcH;AAAAC,WAAO,EAAE;AAAM,uBAAU,CAAC,KAAD,CAAV;AAAiB;AAAhC,KAAsCP,IAAtC,EAA4C;AAAAF,OAAG,EAAEA;AAAL,GAA5C,CAAd,CALF;AAOD,CATS;AAWZH,WAAW,CAACe,SAAZ,GACKJ,kCAAY,CAACI,SAAb,GACH;AAAAC,IAAE,EAAEC,SAAS,CAACC;AAAd,CADG,CADL;AAKAlB,WAAW,CAACmB,WAAZ,GAA0B,aAA1B","names":["CToastClose","forwardRef","_a","ref","Component","rest","__rest","useContext","CToastContext","setVisible","React","__assign","onClick","children","CCloseButton","propTypes","as","PropTypes","elementType","displayName"],"sources":["C:\\wamp64\\www\\Movie\\node_modules\\@coreui\\react\\src\\components\\toast\\CToastClose.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, useContext } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CButtonProps } from '../button/CButton'\nimport { CCloseButton, CCloseButtonProps } from '../close-button/CCloseButton'\nimport { CToastContext } from './CToastContext'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\ntype CombineButtonProps = CCloseButtonProps & CButtonProps\n\nexport interface CToastCloseProps extends Omit<CombineButtonProps, 'as'> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: string | ElementType\n}\n\nexport const CToastClose: PolymorphicRefForwardingComponent<'button', CToastCloseProps> =\n  forwardRef<HTMLButtonElement, CToastCloseProps>(({ children, as: Component, ...rest }, ref) => {\n    const { setVisible } = useContext(CToastContext)\n    return Component ? (\n      <Component onClick={() => setVisible(false)} {...rest} ref={ref}>\n        {children}\n      </Component>\n    ) : (\n      <CCloseButton onClick={() => setVisible(false)} {...rest} ref={ref} />\n    )\n  })\n\nCToastClose.propTypes = {\n  ...CCloseButton.propTypes,\n  as: PropTypes.elementType,\n}\n\nCToastClose.displayName = 'CToastClose'\n"]},"metadata":{},"sourceType":"module"}