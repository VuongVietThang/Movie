{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CToastClose } from './CToastClose.js';\nvar CToastHeader = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      className = _a.className,\n      closeButton = _a.closeButton,\n      rest = __rest(_a, [\"children\", \"className\", \"closeButton\"]);\n\n  return React.createElement(\"div\", __assign({\n    className: classNames('toast-header', className)\n  }, rest, {\n    ref: ref\n  }), children, closeButton && React.createElement(CToastClose, null));\n});\nCToastHeader.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  closeButton: PropTypes.bool\n};\nCToastHeader.displayName = 'CToastHeader';\nexport { CToastHeader };","map":{"version":3,"mappings":";;;;;IAiBaA,YAAY,GAAGC,UAAU,CACpC,UAACC,EAAD,EAAgDC,GAAhD,EAAmD;AAAhD,cAAQ,cAAR;AAAA,MAAUC,SAAS,eAAnB;AAAA,MAAqBC,WAAW,iBAAhC;AAAA,MAAqCC,IAAI,GAA3CC,oDAAE;;AACD,SACEC;AAAKJ,aAAS,EAAEK,UAAU,CAAC,cAAD,EAAiBL,SAAjB;AAA1B,KAA2DE,IAA3D,EAAiE;AAAAH,OAAG,EAAEA;AAAL,GAAjE,GACGO,QADH,EAEGL,WAAW,IAAIG,KAAC,cAAD,CAACG,WAAD,EAAe,IAAf,CAFlB,CADF;AAMD,CARmC;AAWtCX,YAAY,CAACY,SAAb,GAAyB;AACvBF,UAAQ,EAAEG,SAAS,CAACC,IADG;AAEvBV,WAAS,EAAES,SAAS,CAACE,MAFE;AAGvBV,aAAW,EAAEQ,SAAS,CAACG;AAHA,CAAzB;AAMAhB,YAAY,CAACiB,WAAb,GAA2B,cAA3B","names":["CToastHeader","forwardRef","_a","ref","className","closeButton","rest","__rest","React","classNames","children","CToastClose","propTypes","PropTypes","node","string","bool","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\toast\\CToastHeader.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CToastClose } from './CToastClose'\n\nexport interface CToastHeaderProps extends Omit<HTMLAttributes<HTMLDivElement>, 'title'> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Automatically add a close button to the header.\n   */\n  closeButton?: boolean\n}\n\nexport const CToastHeader = forwardRef<HTMLDivElement, CToastHeaderProps>(\n  ({ children, className, closeButton, ...rest }, ref) => {\n    return (\n      <div className={classNames('toast-header', className)} {...rest} ref={ref}>\n        {children}\n        {closeButton && <CToastClose />}\n      </div>\n    )\n  },\n)\n\nCToastHeader.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  closeButton: PropTypes.bool,\n}\n\nCToastHeader.displayName = 'CToastHeader'\n"]},"metadata":{},"sourceType":"module"}