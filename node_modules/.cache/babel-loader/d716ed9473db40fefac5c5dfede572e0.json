{"ast":null,"code":"var pretifyName = function (name) {\n  return name.replace(/[-_.]/g, ' ').replace(/ +/g, ' ').replace(/([a-z0-9])([A-Z])/g, '$1 $2').split(' ').map(function (word) {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  }).join(' ');\n};\n\nvar getColumnLabel = function (column) {\n  var _a;\n\n  return typeof column === 'object' ? (_a = column.label) !== null && _a !== void 0 ? _a : pretifyName(column.key) : pretifyName(column);\n};\n\nvar getColumnNames = function (columns, items) {\n  return columns ? columns.map(function (column) {\n    return typeof column === 'object' ? column.key : column;\n  }) : items && getColumnNamesFromItems(items);\n};\n\nvar getColumnNamesFromItems = function (items) {\n  return Object.keys(items[0] || {}).filter(function (el) {\n    return el.charAt(0) !== '_';\n  });\n};\n\nexport { getColumnLabel, getColumnNames, getColumnNamesFromItems, pretifyName };","map":{"version":3,"mappings":"AAEO,IAAMA,WAAW,GAAG,UAACC,IAAD,EAAa;AACtC,SAAOA,KACJC,OADI,CACI,QADJ,EACc,GADd,EAEJA,OAFI,CAEI,KAFJ,EAEW,GAFX,EAGJA,OAHI,CAGI,oBAHJ,EAG0B,OAH1B,EAIJC,KAJI,CAIE,GAJF,EAKJC,GALI,CAKA,UAACC,IAAD,EAAK;AAAK,eAAI,CAACC,MAAL,CAAY,CAAZ,EAAeC,WAAf,KAA+BF,IAAI,CAACG,KAAL,CAAW,CAAX,CAA/B;AAA4C,GALtD,EAMJC,IANI,CAMC,GAND,CAAP;AAOF,CARO;;AAUA,IAAMC,cAAc,GAAG,UAACC,MAAD,EAAwB;AAAA;;AACpD,gBAAOA,MAAP,KAAkB,QAAlB,GAA6B,YAAM,CAACC,KAAP,MAAY,IAAZ,IAAYC,aAAZ,GAAYA,EAAZ,GAAgBb,WAAW,CAACW,MAAM,CAACG,GAAR,CAAxD,GAAuEd,WAAW,CAACW,MAAD,CAAlF;AAA0F,CADrF;;AAGM,kBAAc,GAAG,UAACI,OAAD,EAA2CC,KAA3C,EAAyD;AACrF,mBACID,OAAO,CAACX,GAAR,CAAY,UAACO,MAAD,EAAwB;AAClC,WAAO,OAAOA,MAAP,KAAkB,QAAlB,GAA6BA,MAAM,CAACG,GAApC,GAA0CH,MAAjD;AACD,GAFD,CADJ,GAIIK,KAAK,IAAIC,uBAAuB,CAACD,KAAD,CAJpC;AAAA,CADW;;AAON,IAAMC,uBAAuB,GAAG,UAACD,KAAD,EAAc;AACnD,eAAM,CAACE,IAAP,CAAYF,KAAK,CAAC,CAAD,CAAL,IAAY,EAAxB,EAA4BG,MAA5B,CAAmC,UAACC,EAAD,EAAQ;AAAA,aAAE,CAACd,MAAH,CAAU,CAAV,MAAiB,GAAjB;AAAoB,GAA/D;AAAA,CADK","names":["pretifyName","name","replace","split","map","word","charAt","toUpperCase","slice","join","getColumnLabel","column","label","_a","key","columns","items","getColumnNamesFromItems","keys","filter","el"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react\\src\\components\\table\\utils.ts"],"sourcesContent":["import type { Column, Item } from './types'\n\nexport const pretifyName = (name: string) => {\n  return name\n    .replace(/[-_.]/g, ' ')\n    .replace(/ +/g, ' ')\n    .replace(/([a-z0-9])([A-Z])/g, '$1 $2')\n    .split(' ')\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ')\n}\n\nexport const getColumnLabel = (column: Column | string) =>\n  typeof column === 'object' ? column.label ?? pretifyName(column.key) : pretifyName(column)\n\nexport const getColumnNames = (columns: (string | Column)[] | undefined, items?: Item[]) =>\n  columns\n    ? columns.map((column: Column | string) => {\n        return typeof column === 'object' ? column.key : column\n      })\n    : items && getColumnNamesFromItems(items)\n\nexport const getColumnNamesFromItems = (items: Item[]) =>\n  Object.keys(items[0] || {}).filter((el) => el.charAt(0) !== '_')\n"]},"metadata":{},"sourceType":"module"}