{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { colorPropType } from '../../props.js';\nvar CSpinner = forwardRef(function (_a, ref) {\n  var _b;\n\n  var _c = _a.as,\n      Component = _c === void 0 ? 'div' : _c,\n      className = _a.className,\n      color = _a.color,\n      size = _a.size,\n      _d = _a.variant,\n      variant = _d === void 0 ? 'border' : _d,\n      _e = _a.visuallyHiddenLabel,\n      visuallyHiddenLabel = _e === void 0 ? 'Loading...' : _e,\n      rest = __rest(_a, [\"as\", \"className\", \"color\", \"size\", \"variant\", \"visuallyHiddenLabel\"]);\n\n  return React.createElement(Component, __assign({\n    className: classNames(\"spinner-\".concat(variant), (_b = {}, _b[\"spinner-\".concat(variant, \"-\").concat(size)] = size, _b[\"text-\".concat(color)] = color, _b), className),\n    role: \"status\"\n  }, rest, {\n    ref: ref\n  }), React.createElement(\"span\", {\n    className: \"visually-hidden\"\n  }, visuallyHiddenLabel));\n});\nCSpinner.propTypes = {\n  as: PropTypes.string,\n  className: PropTypes.string,\n  color: colorPropType,\n  size: PropTypes.oneOf(['sm']),\n  variant: PropTypes.oneOf(['border', 'grow']),\n  visuallyHiddenLabel: PropTypes.string\n};\nCSpinner.displayName = 'CSpinner';\nexport { CSpinner };","map":{"version":3,"mappings":";;;;;IAqCaA,QAAQ,GAA4DC,UAAU,CAIzF,UACEC,EADF,EAUEC,GAVF,EAUK;;;AARD,QAAqB,QAArB;AAAA,MAAIC,SAAS,mBAAG,KAAH,GAAQC,EAArB;AAAA,MACAC,SAAS,eADT;AAAA,MAEAC,KAAK,WAFL;AAAA,MAGAC,IAAI,UAHJ;AAAA,MAIAC,EAAkB,aAJlB;AAAA,MAIAC,OAAO,mBAAG,QAAH,GAAWD,EAJlB;AAAA,MAKAE,EAAkC,yBALlC;AAAA,MAKAC,mBAAmB,mBAAG,YAAH,GAAeD,EALlC;AAAA,MAMGE,IAAI,cAPT,sEAOS,CANP;;AAUF,SACEC,KAAC,cAAD,CAACV,SAAD,EACEW;AAAAT,aAAS,EAAEU,UAAU,CACnB,WAAWC,MAAX,CAAWP,OAAX,CADmB,GACCQ,SAElBA,GAAC,kBAAWR,OAAX,EAAkB,GAAlB,EAAkBO,MAAlB,CAAsBT,IAAtB,CAAD,IAAgCA,IAFd,EAGlBU,GAAC,QAAQD,MAAR,CAAQV,KAAR,CAAD,IAAmBA,KAHD,IADD,GAMnBD,SANmB,CAArB;AAQAa,QAAI,EAAC;AARL,KASIN,IATJ,EASQ;AACRV,OAAG,EAAEA;AADG,GATR,CADF,EAaEW,KAAM,cAAN,CAAM,MAAN,EAAM;AAAAR,aAAS,EAAC;AAAV,GAAN,EAAmCM,mBAAnC,CAbF,CADF;AAiBD,CAjCwF;AAoC3FZ,QAAQ,CAACoB,SAAT,GAAqB;AACnBC,IAAE,EAAEC,SAAS,CAACC,MADK;AAEnBjB,WAAS,EAAEgB,SAAS,CAACC,MAFF;AAGnBhB,OAAK,EAAEiB,aAHY;AAInBhB,MAAI,EAAEc,SAAS,CAACG,KAAV,CAAgB,CAAC,IAAD,CAAhB,CAJa;AAKnBf,SAAO,EAAEY,SAAS,CAACG,KAAV,CAAgB,CAAC,QAAD,EAAW,MAAX,CAAhB,CALU;AAMnBb,qBAAmB,EAAEU,SAAS,CAACC;AANZ,CAArB;AASAvB,QAAQ,CAAC0B,WAAT,GAAuB,UAAvB","names":["CSpinner","forwardRef","_a","ref","Component","_c","className","color","size","_d","variant","_e","visuallyHiddenLabel","rest","React","__assign","classNames","concat","_b","role","propTypes","as","PropTypes","string","colorPropType","oneOf","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\spinner\\CSpinner.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CSpinnerProps extends HTMLAttributes<HTMLDivElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUIâ€™s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Size the component small.\n   */\n  size?: 'sm'\n  /**\n   * Set the button variant to an outlined button or a ghost button.\n   */\n  variant?: 'border' | 'grow'\n  /**\n   * Set visually hidden label for accessibility purposes.\n   */\n  visuallyHiddenLabel?: string\n}\n\nexport const CSpinner: PolymorphicRefForwardingComponent<'div', CSpinnerProps> = forwardRef<\n  HTMLDivElement | HTMLSpanElement,\n  CSpinnerProps\n>(\n  (\n    {\n      as: Component = 'div',\n      className,\n      color,\n      size,\n      variant = 'border',\n      visuallyHiddenLabel = 'Loading...',\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <Component\n        className={classNames(\n          `spinner-${variant}`,\n          {\n            [`spinner-${variant}-${size}`]: size,\n            [`text-${color}`]: color,\n          },\n          className,\n        )}\n        role=\"status\"\n        {...rest}\n        ref={ref}\n      >\n        <span className=\"visually-hidden\">{visuallyHiddenLabel}</span>\n      </Component>\n    )\n  },\n)\n\nCSpinner.propTypes = {\n  as: PropTypes.string,\n  className: PropTypes.string,\n  color: colorPropType,\n  size: PropTypes.oneOf(['sm']),\n  variant: PropTypes.oneOf(['border', 'grow']),\n  visuallyHiddenLabel: PropTypes.string,\n}\n\nCSpinner.displayName = 'CSpinner'\n"]},"metadata":{},"sourceType":"module"}