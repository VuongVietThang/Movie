{"ast":null,"code":"import React, { forwardRef, useId, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CTabsContext } from './CTabsContext.js';\nvar CTabs = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      activeItemKey = _a.activeItemKey,\n      className = _a.className,\n      defaultActiveItemKey = _a.defaultActiveItemKey,\n      onChange = _a.onChange;\n  var id = useId();\n  var isControlled = activeItemKey !== undefined;\n\n  var _b = useState(function () {\n    return isControlled ? undefined : defaultActiveItemKey;\n  }),\n      internalActiveItemKey = _b[0],\n      setInternalActiveItemKey = _b[1];\n\n  var currentActiveItemKey = isControlled ? activeItemKey : internalActiveItemKey;\n\n  var setActiveItemKey = function (value) {\n    if (!isControlled) {\n      setInternalActiveItemKey(value);\n    }\n\n    onChange === null || onChange === void 0 ? void 0 : onChange(value);\n  };\n\n  return React.createElement(CTabsContext.Provider, {\n    value: {\n      _activeItemKey: currentActiveItemKey,\n      setActiveItemKey: setActiveItemKey,\n      id: id\n    }\n  }, React.createElement(\"div\", {\n    className: classNames('tabs', className),\n    ref: ref\n  }, children));\n});\nCTabs.propTypes = {\n  activeItemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  defaultActiveItemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  onChange: PropTypes.func\n};\nCTabs.displayName = 'CTabs';\nexport { CTabs };","map":{"version":3,"mappings":";;;;IAkDaA,KAAK,GAAGC,UAAU,CAC7B,UAACC,EAAD,EAAyEC,GAAzE,EAA4E;AAAzE,cAAQ,cAAR;AAAA,MAAUC,aAAa,mBAAvB;AAAA,MAAyBC,SAAS,eAAlC;AAAA,MAAoCC,oBAAoB,0BAAxD;AAAA,MAA0DC,QAAQ,cAAlE;AACD,MAAMC,EAAE,GAAGC,KAAK,EAAhB;AACA,MAAMC,YAAY,GAAGN,aAAa,KAAKO,SAAvC;;AACM,WAAoDC,QAAQ,CAChE,YAAM;AAAA,WAACF,YAAY,GAAGC,SAAH,GAAeL,oBAA5B;AAAiD,GADS,CAA5D;AAAA,MAACO,qBAAqB,QAAtB;AAAA,MAAwBC,wBAAwB,QAAhD;;AAIN,MAAMC,oBAAoB,GAAGL,YAAY,GAAGN,aAAH,GAAmBS,qBAA5D;;AAEA,MAAMG,gBAAgB,GAAG,UAACC,KAAD,EAAuB;AAC9C,QAAI,CAACP,YAAL,EAAmB;AACjBI,8BAAwB,CAACG,KAAD,CAAxB;;;AAGFV,YAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAGU,KAAH,CAAR;AACD,GAND;;AAQA,SACEC,KAAC,cAAD,CAACC,YAAY,CAACC,QAAd,EAAsB;AAACH,SAAK,EAAE;AAAEI,oBAAc,EAAEN,oBAAlB;AAAwCC,sBAAgB,kBAAxD;AAA0DR,QAAE;AAA5D;AAAR,GAAtB,EACEU;AAAKb,aAAS,EAAEiB,UAAU,CAAC,MAAD,EAASjB,SAAT,CAA1B;AAA+CF,OAAG,EAAEA;AAApD,KACGoB,QADH,CADF,CADF;AAOD,CAzB4B;AA4B/BvB,KAAK,CAACwB,SAAN,GAAkB;AAChBpB,eAAa,EAAEqB,SAAS,CAACC,SAAV,CAAoB,CAACD,SAAS,CAACE,MAAX,EAAmBF,SAAS,CAACG,MAA7B,CAApB,CADC;AAEhBL,UAAQ,EAAEE,SAAS,CAACI,IAFJ;AAGhBxB,WAAS,EAAEoB,SAAS,CAACG,MAHL;AAIhBtB,sBAAoB,EAAEmB,SAAS,CAACC,SAAV,CAAoB,CAACD,SAAS,CAACE,MAAX,EAAmBF,SAAS,CAACG,MAA7B,CAApB,CAJN;AAKhBrB,UAAQ,EAAEkB,SAAS,CAACK;AALJ,CAAlB;AAQA9B,KAAK,CAAC+B,WAAN,GAAoB,OAApB","names":["CTabs","forwardRef","_a","ref","activeItemKey","className","defaultActiveItemKey","onChange","id","useId","isControlled","undefined","useState","internalActiveItemKey","setInternalActiveItemKey","currentActiveItemKey","setActiveItemKey","value","React","CTabsContext","Provider","_activeItemKey","classNames","children","propTypes","PropTypes","oneOfType","number","string","node","func","displayName"],"sources":["C:\\wamp64\\www\\Movie\\node_modules\\@coreui\\react\\src\\components\\tabs\\CTabs.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes, useId, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CTabsContext } from './CTabsContext'\n\nexport interface CTabsProps extends Omit<HTMLAttributes<HTMLDivElement>, 'onChange'> {\n  /**\n   * Controls the currently active tab.\n   *\n   * When provided, the component operates in a controlled mode.\n   * You must handle tab switching manually by updating this prop.\n   *\n   * @example\n   * const [activeTab, setActiveTab] = useState(0);\n   * <CTabs activeItemKey={activeTab} onChange={setActiveTab} />\n   */\n  activeItemKey?: number | string\n\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n\n  /**\n   * Sets the initially active tab when the component mounts.\n   *\n   * After initialization, the component manages active tab changes internally.\n   *\n   * Use `defaultActiveItemKey` for uncontrolled usage.\n   *\n   * @example\n   * <CTabs defaultActiveItemKey={1} />\n   */\n  defaultActiveItemKey?: number | string\n\n  /**\n   * Callback fired when the active tab changes.\n   *\n   * - In controlled mode (`activeItemKey` provided), you must update `activeItemKey` yourself based on the value received.\n   * - In uncontrolled mode, this callback is called after internal state updates.\n   *\n   * @param value - The newly selected tab key.\n   *\n   * @example\n   * <CTabs onChange={(key) => console.log('Tab changed to', key)} />\n   */\n  onChange?: (value: number | string) => void\n}\n\nexport const CTabs = forwardRef<HTMLDivElement, CTabsProps>(\n  ({ children, activeItemKey, className, defaultActiveItemKey, onChange }, ref) => {\n    const id = useId()\n    const isControlled = activeItemKey !== undefined\n    const [internalActiveItemKey, setInternalActiveItemKey] = useState<number | string | undefined>(\n      () => (isControlled ? undefined : defaultActiveItemKey)\n    )\n\n    const currentActiveItemKey = isControlled ? activeItemKey : internalActiveItemKey\n\n    const setActiveItemKey = (value: number | string) => {\n      if (!isControlled) {\n        setInternalActiveItemKey(value)\n      }\n\n      onChange?.(value)\n    }\n\n    return (\n      <CTabsContext.Provider value={{ _activeItemKey: currentActiveItemKey, setActiveItemKey, id }}>\n        <div className={classNames('tabs', className)} ref={ref}>\n          {children}\n        </div>\n      </CTabsContext.Provider>\n    )\n  }\n)\n\nCTabs.propTypes = {\n  activeItemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  defaultActiveItemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  onChange: PropTypes.func,\n}\n\nCTabs.displayName = 'CTabs'\n"]},"metadata":{},"sourceType":"module"}