{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useId, useRef, useContext, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CAccordionContext } from './CAccordionContext.js';\nimport { CAccordionItemContext } from './CAccordionItemContext.js';\nvar CAccordionItem = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      className = _a.className,\n      id = _a.id,\n      itemKey = _a.itemKey,\n      rest = __rest(_a, [\"children\", \"className\", \"id\", \"itemKey\"]);\n\n  var uniqueId = useId();\n\n  var _id = id !== null && id !== void 0 ? id : uniqueId;\n\n  var _itemKey = useRef(itemKey !== null && itemKey !== void 0 ? itemKey : _id);\n\n  var _b = useContext(CAccordionContext),\n      _activeItemKey = _b._activeItemKey,\n      alwaysOpen = _b.alwaysOpen,\n      setActiveKey = _b.setActiveKey;\n\n  var _c = useState(Boolean(_activeItemKey === _itemKey.current)),\n      visible = _c[0],\n      setVisible = _c[1];\n\n  useEffect(function () {\n    if (!alwaysOpen && visible) {\n      setActiveKey(_itemKey.current);\n    }\n  }, [visible]);\n  useEffect(function () {\n    setVisible(Boolean(_activeItemKey === _itemKey.current));\n  }, [_activeItemKey]);\n  return React.createElement(\"div\", __assign({\n    className: classNames('accordion-item', className)\n  }, rest, {\n    ref: ref\n  }), React.createElement(CAccordionItemContext.Provider, {\n    value: {\n      id: _id,\n      setVisible: setVisible,\n      visible: visible\n    }\n  }, children));\n});\nCAccordionItem.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  itemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n};\nCAccordionItem.displayName = 'CAccordionItem';\nexport { CAccordionItem };","map":{"version":3,"mappings":";;;;;;IA8BaA,cAAc,GAAGC,UAAU,CACtC,UAACC,EAAD,EAAgDC,GAAhD,EAAmD;AAAhD,cAAQ,cAAR;AAAA,MAAUC,SAAS,eAAnB;AAAA,MAAqBC,EAAE,QAAvB;AAAA,MAAyBC,OAAO,aAAhC;AAAA,MAAqCC,IAAI,cAA3C,0CAA2C,CAAzC;;AACD,MAAMC,QAAQ,GAAGC,KAAK,EAAtB;;AACA,MAAMC,GAAG,GAAGL,EAAE,SAAF,MAAE,KAAF,cAAMG,QAAlB;;AACA,MAAMG,QAAQ,GAAGC,MAAM,CAACN,OAAO,SAAP,WAAO,WAAP,aAAWI,GAAZ,CAAvB;;AAEM,QAA+C,aAAU,CAACG,iBAAD,CAAzD;AAAA,MAAEC,cAAc,oBAAhB;AAAA,MAAkBC,UAAU,gBAA5B;AAAA,MAA8BC,YAAY,kBAA1C;;AACA,WAAwBC,QAAQ,CAACC,OAAO,CAACJ,cAAc,KAAKH,QAAQ,CAACQ,OAA7B,CAAR,CAAhC;AAAA,MAACC,OAAO,QAAR;AAAA,MAAUC,UAAU,QAApB;;AAENC,WAAS,CAAC;AACR,QAAI,CAACP,UAAD,IAAeK,OAAnB,EAA4B;AAC1BJ,kBAAY,CAACL,QAAQ,CAACQ,OAAV,CAAZ;;AAEH,GAJQ,EAIN,CAACC,OAAD,CAJM,CAAT;AAMAE,WAAS,CAAC;AACRD,cAAU,CAACH,OAAO,CAACJ,cAAc,KAAKH,QAAQ,CAACQ,OAA7B,CAAR,CAAV;AACD,GAFQ,EAEN,CAACL,cAAD,CAFM,CAAT;AAIA,SACES;AAAKnB,aAAS,EAAEoB,UAAU,CAAC,gBAAD,EAAmBpB,SAAnB;AAA1B,KAA6DG,IAA7D,EAAmE;AAAAJ,OAAG,EAAEA;AAAL,GAAnE,GACEoB,KAAC,cAAD,CAACE,qBAAqB,CAACC,QAAvB,EAA+B;AAACC,SAAK,EAAE;AAAEtB,QAAE,EAAEK,GAAN;AAAWW,gBAAU,YAArB;AAAuBD,aAAO;AAA9B;AAAR,GAA/B,EACGQ,QADH,CADF,CADF;AAOD,CA1BqC;AA6BxC5B,cAAc,CAAC6B,SAAf,GAA2B;AACzBD,UAAQ,EAAEE,SAAS,CAACC,IADK;AAEzB3B,WAAS,EAAE0B,SAAS,CAACE,MAFI;AAGzB1B,SAAO,EAAEwB,SAAS,CAACG,SAAV,CAAoB,CAACH,SAAS,CAACI,MAAX,EAAmBJ,SAAS,CAACE,MAA7B,CAApB;AAHgB,CAA3B;AAMAhC,cAAc,CAACmC,WAAf,GAA6B,gBAA7B","names":["CAccordionItem","forwardRef","_a","ref","className","id","itemKey","rest","uniqueId","useId","_id","_itemKey","useRef","CAccordionContext","_activeItemKey","alwaysOpen","setActiveKey","useState","Boolean","current","visible","setVisible","useEffect","React","classNames","CAccordionItemContext","Provider","value","children","propTypes","PropTypes","node","string","oneOfType","number","displayName"],"sources":["C:\\wamp64\\www\\Movie\\node_modules\\@coreui\\react\\src\\components\\accordion\\CAccordionItem.tsx"],"sourcesContent":["import React, {\n  forwardRef,\n  HTMLAttributes,\n  useContext,\n  useEffect,\n  useId,\n  useRef,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CAccordionContext } from './CAccordionContext'\nimport { CAccordionItemContext } from './CAccordionItemContext'\n\nexport interface CAccordionItemProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * The id global attribute defines an identifier (ID) that must be unique in the whole document.\n   */\n  id?: string\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Item key.\n   */\n  itemKey?: number | string\n}\n\nexport const CAccordionItem = forwardRef<HTMLDivElement, CAccordionItemProps>(\n  ({ children, className, id, itemKey, ...rest }, ref) => {\n    const uniqueId = useId()\n    const _id = id ?? uniqueId\n    const _itemKey = useRef(itemKey ?? _id)\n\n    const { _activeItemKey, alwaysOpen, setActiveKey } = useContext(CAccordionContext)\n    const [visible, setVisible] = useState(Boolean(_activeItemKey === _itemKey.current))\n\n    useEffect(() => {\n      if (!alwaysOpen && visible) {\n        setActiveKey(_itemKey.current)\n      }\n    }, [visible])\n\n    useEffect(() => {\n      setVisible(Boolean(_activeItemKey === _itemKey.current))\n    }, [_activeItemKey])\n\n    return (\n      <div className={classNames('accordion-item', className)} {...rest} ref={ref}>\n        <CAccordionItemContext.Provider value={{ id: _id, setVisible, visible }}>\n          {children}\n        </CAccordionItemContext.Provider>\n      </div>\n    )\n  }\n)\n\nCAccordionItem.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  itemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n}\n\nCAccordionItem.displayName = 'CAccordionItem'\n"]},"metadata":{},"sourceType":"module"}