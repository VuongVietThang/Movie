{"ast":null,"code":"import { __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CFormControlValidation } from './CFormControlValidation.js';\nimport { CFormFloating } from './CFormFloating.js';\nimport { CFormLabel } from './CFormLabel.js';\nimport { CFormText } from './CFormText.js';\n\nvar CFormControlWrapper = function (_a) {\n  var children = _a.children,\n      describedby = _a.describedby,\n      feedback = _a.feedback,\n      feedbackInvalid = _a.feedbackInvalid,\n      feedbackValid = _a.feedbackValid,\n      floatingClassName = _a.floatingClassName,\n      floatingLabel = _a.floatingLabel,\n      id = _a.id,\n      invalid = _a.invalid,\n      label = _a.label,\n      text = _a.text,\n      tooltipFeedback = _a.tooltipFeedback,\n      valid = _a.valid;\n\n  var FormControlValidation = function () {\n    return React.createElement(CFormControlValidation, {\n      describedby: describedby,\n      feedback: feedback,\n      feedbackInvalid: feedbackInvalid,\n      feedbackValid: feedbackValid,\n      floatingLabel: floatingLabel,\n      invalid: invalid,\n      tooltipFeedback: tooltipFeedback,\n      valid: valid\n    });\n  };\n\n  return floatingLabel ? React.createElement(CFormFloating, {\n    className: floatingClassName\n  }, children, React.createElement(CFormLabel, {\n    htmlFor: id\n  }, label || floatingLabel), text && React.createElement(CFormText, {\n    id: describedby\n  }, text), React.createElement(FormControlValidation, null)) : React.createElement(React.Fragment, null, label && React.createElement(CFormLabel, {\n    htmlFor: id\n  }, label), children, text && React.createElement(CFormText, {\n    id: describedby\n  }, text), React.createElement(FormControlValidation, null));\n};\n\nCFormControlWrapper.propTypes = __assign({\n  children: PropTypes.node,\n  floatingClassName: PropTypes.string,\n  floatingLabel: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  label: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  text: PropTypes.oneOfType([PropTypes.node, PropTypes.string])\n}, CFormControlValidation.propTypes);\nCFormControlWrapper.displayName = 'CFormControlWrapper';\nexport { CFormControlWrapper };","map":{"version":3,"mappings":";;;;;;;;AA2CO,IAAMA,mBAAmB,GAAiC,UAACC,EAAD,EAchE;AAbC,cAAQ,cAAR;AAAA,MACAC,WAAW,iBADX;AAAA,MAEAC,QAAQ,cAFR;AAAA,MAGAC,eAAe,qBAHf;AAAA,MAIAC,aAAa,mBAJb;AAAA,MAKAC,iBAAiB,uBALjB;AAAA,MAMAC,aAAa,mBANb;AAAA,MAOAC,EAAE,QAPF;AAAA,MAQAC,OAAO,aARP;AAAA,MASAC,KAAK,WATL;AAAA,MAUAC,IAAI,UAVJ;AAAA,MAWAC,eAAe,qBAXf;AAAA,MAYAC,KAAK,WAZL;;AAcA,MAAMC,qBAAqB,GAAG;AAAM,WAClCC,oBAACC,sBAAD,EACE;AAAAd,iBAAW,EAAEA,WAAb;AACAC,cAAQ,EAAEA,QADV;AAEAC,qBAAe,EAAEA,eAFjB;AAGAC,mBAAa,EAAEA,aAHf;AAIAE,mBAAa,EAAEA,aAJf;AAKAE,aAAO,EAAEA,OALT;AAMAG,qBAAe,EAAEA,eANjB;AAOAC,WAAK,EAAEA;AAPP,KADF,CADkC;AAWnC,GAXD;;AAYA,SAAON,aAAa,GAClBQ,oBAACE,aAAD,EAAc;AAACC,aAAS,EAAEZ;AAAZ,GAAd,EACGa,QADH,EAEEJ,KAAC,cAAD,CAACK,UAAD,EAAW;AAACC,WAAO,EAAEb;AAAV,GAAX,EAA0BE,KAAK,IAAIH,aAAnC,CAFF,EAGGI,IAAI,IAAII,oBAACO,SAAD,EAAU;AAACd,MAAE,EAAEN;AAAL,GAAV,EAA6BS,IAA7B,CAHX,EAIEI,oBAACD,qBAAD,EAAyB,IAAzB,CAJF,CADkB,GAQlBC,0CACGL,KAAK,IAAIK,oBAACK,UAAD,EAAW;AAACC,WAAO,EAAEb;AAAV,GAAX,EAA0BE,KAA1B,CADZ,EAEGS,QAFH,EAGGR,IAAI,IAAII,oBAACO,SAAD,EAAU;AAACd,MAAE,EAAEN;AAAL,GAAV,EAA6BS,IAA7B,CAHX,EAIEI,oBAACD,qBAAD,EAAsB,IAAtB,CAJF,CARF;AAeF,CA1CO;;AA4CPd,mBAAmB,CAACuB,SAApB,GACEC;AAAAL,UAAQ,EAAEM,SAAS,CAACC,IAApB;AACApB,mBAAiB,EAAEmB,SAAS,CAACE,MAD7B;AAEApB,eAAa,EAAEkB,SAAS,CAACG,SAAV,CAAoB,CAACH,SAAS,CAACC,IAAX,EAAiBD,SAAS,CAACE,MAA3B,CAApB,CAFf;AAGAjB,OAAK,EAAEe,SAAS,CAACG,SAAV,CAAoB,CAACH,SAAS,CAACC,IAAX,EAAiBD,SAAS,CAACE,MAA3B,CAApB,CAHP;AAIAhB,MAAI,EAAEc,SAAS,CAACG,SAAV,CAAoB,CAACH,SAAS,CAACC,IAAX,EAAiBD,SAAS,CAACE,MAA3B,CAApB;AAJN,GAKGX,sBAAsB,CAACO,SAL1B,CADF;AASAvB,mBAAmB,CAAC6B,WAApB,GAAkC,qBAAlC","names":["CFormControlWrapper","_a","describedby","feedback","feedbackInvalid","feedbackValid","floatingClassName","floatingLabel","id","invalid","label","text","tooltipFeedback","valid","FormControlValidation","React","CFormControlValidation","CFormFloating","className","children","CFormLabel","htmlFor","CFormText","propTypes","__assign","PropTypes","node","string","oneOfType","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\form\\CFormControlWrapper.tsx"],"sourcesContent":["import React, { FC, ReactNode } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CFormControlValidation, CFormControlValidationProps } from './CFormControlValidation'\nimport { CFormFloating } from './CFormFloating'\nimport { CFormLabel } from './CFormLabel'\nimport { CFormText } from './CFormText'\n\nexport interface CFormControlWrapperProps extends CFormControlValidationProps {\n  /**\n   * @ignore\n   */\n  children?: ReactNode\n  /**\n   * A string of all className you want applied to the floating label wrapper.\n   *\n   * @since 4.5.0\n   */\n  floatingClassName?: string\n  /**\n   * Provide valuable, actionable valid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n   *\n   * @since 4.2.0\n   */\n  floatingLabel?: ReactNode | string\n  /**\n   * @ignore\n   */\n  id?: string\n  /**\n   * Add a caption for a component.\n   *\n   * @since 4.2.0\n   */\n  label?: ReactNode | string\n  /**\n   * Add helper text to the component.\n   *\n   * @since 4.2.0\n   */\n  text?: ReactNode | string\n}\n\nexport const CFormControlWrapper: FC<CFormControlWrapperProps> = ({\n  children,\n  describedby,\n  feedback,\n  feedbackInvalid,\n  feedbackValid,\n  floatingClassName,\n  floatingLabel,\n  id,\n  invalid,\n  label,\n  text,\n  tooltipFeedback,\n  valid,\n}) => {\n  const FormControlValidation = () => (\n    <CFormControlValidation\n      describedby={describedby}\n      feedback={feedback}\n      feedbackInvalid={feedbackInvalid}\n      feedbackValid={feedbackValid}\n      floatingLabel={floatingLabel}\n      invalid={invalid}\n      tooltipFeedback={tooltipFeedback}\n      valid={valid}\n    />\n  )\n  return floatingLabel ? (\n    <CFormFloating className={floatingClassName}>\n      {children}\n      <CFormLabel htmlFor={id}>{label || floatingLabel}</CFormLabel>\n      {text && <CFormText id={describedby}>{text}</CFormText>}\n      <FormControlValidation />\n    </CFormFloating>\n  ) : (\n    <>\n      {label && <CFormLabel htmlFor={id}>{label}</CFormLabel>}\n      {children}\n      {text && <CFormText id={describedby}>{text}</CFormText>}\n      <FormControlValidation />\n    </>\n  )\n}\n\nCFormControlWrapper.propTypes = {\n  children: PropTypes.node,\n  floatingClassName: PropTypes.string,\n  floatingLabel: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  label: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  text: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  ...CFormControlValidation.propTypes,\n}\n\nCFormControlWrapper.displayName = 'CFormControlWrapper'\n"]},"metadata":{},"sourceType":"module"}