{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nvar CCardHeader = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      _b = _a.as,\n      Component = _b === void 0 ? 'div' : _b,\n      className = _a.className,\n      rest = __rest(_a, [\"children\", \"as\", \"className\"]);\n\n  return React.createElement(Component, __assign({\n    className: classNames('card-header', className)\n  }, rest, {\n    ref: ref\n  }), children);\n});\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string\n};\nCCardHeader.displayName = 'CCardHeader';\nexport { CCardHeader };","map":{"version":3,"mappings":";;;;IAiBaA,WAAW,GAA+DC,UAAU,CAG/F,UAACC,EAAD,EAA0DC,GAA1D,EAA6D;AAA1D,cAAQ,cAAR;AAAA,MAAUC,EAAqB,QAA/B;AAAA,MAAcC,SAAS,GAAGD,wBAAKA,EAA/B;AAAA,MAAiCE,SAAS,eAA1C;AAAA,MAA+CC,IAAI,cAArD,+BAAqD,CAAnD;;AACH,SACEC,oBAACH,SAAD,EAAUI;AAACH,aAAS,EAAEI,UAAU,CAAC,aAAD,EAAgBJ,SAAhB;AAAtB,KAAsDC,IAAtD,EAA0D;AAAEJ,OAAG,EAAEA;AAAP,GAA1D,CAAV,EACGQ,QADH,CADF;AAKD,CATgG;AAWjGX,WAAW,CAACY,SAAZ,GAAwB;AACtBC,IAAE,EAAEC,SAAS,CAACC,WADQ;AAEtBJ,UAAQ,EAAEG,SAAS,CAACE,IAFE;AAGtBV,WAAS,EAAEQ,SAAS,CAACG;AAHC,CAAxB;AAMAjB,WAAW,CAACkB,WAAZ,GAA0B,aAA1B","names":["CCardHeader","forwardRef","_a","ref","_b","Component","className","rest","React","__assign","classNames","children","propTypes","as","PropTypes","elementType","node","string","displayName"],"sources":["C:\\wamp64\\www\\Movie\\node_modules\\@coreui\\react\\src\\components\\card\\CCardHeader.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardHeader: PolymorphicRefForwardingComponent<'div', CCardHeaderProps> = forwardRef<\n  HTMLDivElement,\n  CCardHeaderProps\n>(({ children, as: Component = 'div', className, ...rest }, ref) => {\n  return (\n    <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n      {children}\n    </Component>\n  )\n})\n\nCCardHeader.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n"]},"metadata":{},"sourceType":"module"}