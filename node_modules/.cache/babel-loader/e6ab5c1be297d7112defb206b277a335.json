{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useState, useId, useEffect, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CTooltip } from '../tooltip/CTooltip.js';\n\nvar CConditionalTooltip = function (_a) {\n  var children = _a.children,\n      content = _a.content,\n      tooltip = _a.tooltip;\n  return tooltip ? React.createElement(CTooltip, {\n    content: content\n  }, React.createElement(\"span\", null, children)) : children;\n};\n\nvar CRating = forwardRef(function (_a, ref) {\n  var _b;\n\n  var activeIcon = _a.activeIcon,\n      allowClear = _a.allowClear,\n      className = _a.className,\n      disabled = _a.disabled,\n      highlightOnlySelected = _a.highlightOnlySelected,\n      icon = _a.icon,\n      _c = _a.itemCount,\n      itemCount = _c === void 0 ? 5 : _c,\n      name = _a.name,\n      onChange = _a.onChange,\n      onHover = _a.onHover,\n      _d = _a.precision,\n      precision = _d === void 0 ? 1 : _d,\n      readOnly = _a.readOnly,\n      size = _a.size,\n      tooltips = _a.tooltips,\n      value = _a.value,\n      rest = __rest(_a, [\"activeIcon\", \"allowClear\", \"className\", \"disabled\", \"highlightOnlySelected\", \"icon\", \"itemCount\", \"name\", \"onChange\", \"onHover\", \"precision\", \"readOnly\", \"size\", \"tooltips\", \"value\"]);\n\n  var _e = useState(false),\n      cleared = _e[0],\n      setCleared = _e[1];\n\n  var _f = useState(value !== null && value !== void 0 ? value : null),\n      currentValue = _f[0],\n      setCurrentValue = _f[1];\n\n  var _g = useState(null),\n      hoverValue = _g[0],\n      setHoverValue = _g[1];\n\n  var _h = useState(null),\n      tooltipValue = _h[0],\n      setTooltipValue = _h[1];\n\n  var _name = name || useId();\n\n  useEffect(function () {\n    value !== undefined && setCurrentValue(value);\n  }, [value]);\n\n  var handleMouseEnter = function (value) {\n    if (disabled || readOnly) {\n      return;\n    }\n\n    onHover && onHover(value);\n    setHoverValue(value);\n    value && setTooltipValue(value);\n  };\n\n  var handleMouseLeave = function () {\n    if (disabled || readOnly) {\n      return;\n    }\n\n    onHover && onHover(null);\n    setHoverValue(null);\n  };\n\n  var handleOnChange = function (value) {\n    if (disabled || readOnly) {\n      return;\n    }\n\n    if (cleared) {\n      setCleared(false);\n      return;\n    }\n\n    setCurrentValue(value);\n    onChange && onChange(value);\n  };\n\n  var handleOnClick = function (value) {\n    if (disabled || readOnly) {\n      return;\n    }\n\n    if (allowClear && value === currentValue) {\n      setCleared(true);\n      onChange && onChange(null);\n      setCurrentValue(null);\n      setHoverValue(null);\n    }\n  };\n\n  return React.createElement(\"div\", __assign({\n    className: classNames('rating', (_b = {}, _b[\"rating-\".concat(size)] = size, _b.disabled = disabled, _b.readonly = readOnly, _b), className),\n    role: \"radiogroup\"\n  }, rest, {\n    ref: ref\n  }), Array.from({\n    length: itemCount\n  }, function (_, index) {\n    var numberOfRadios = 1 / precision;\n    return React.createElement(CConditionalTooltip, __assign({\n      key: index\n    }, tooltips && {\n      content: Array.isArray(tooltips) ? tooltips[index] : precision ? tooltipValue : index + 1,\n      tooltip: true\n    }), React.createElement(\"div\", {\n      className: \"rating-item\"\n    }, Array.from({\n      length: numberOfRadios\n    }, function (_, _index) {\n      var _a, _b;\n\n      var isNotLastItem = _index + 1 < numberOfRadios;\n      var value = numberOfRadios === 1 ? index + 1 : index + (_index + 1) * (1 * precision);\n      var id = useId();\n\n      var isItemChecked = function () {\n        return value === currentValue;\n      };\n\n      var isItemActive = function () {\n        if (highlightOnlySelected ? hoverValue === value : hoverValue && hoverValue >= value) {\n          return true;\n        }\n\n        if (hoverValue === null && (highlightOnlySelected ? isItemChecked() : currentValue && currentValue >= value)) {\n          return true;\n        }\n\n        return false;\n      };\n\n      return React.createElement(Fragment, {\n        key: value\n      }, React.createElement(\"label\", __assign({\n        className: classNames('rating-item-label', {\n          active: isItemActive()\n        }),\n        htmlFor: id,\n        onClick: function () {\n          return handleOnClick(value);\n        },\n        onMouseEnter: function () {\n          return handleMouseEnter(value);\n        },\n        onMouseLeave: function () {\n          return handleMouseLeave();\n        }\n      }, isNotLastItem && {\n        style: {\n          zIndex: 1 / precision - _index,\n          position: 'absolute',\n          width: \"\".concat(precision * (_index + 1) * 100, \"%\"),\n          overflow: 'hidden',\n          opacity: 0\n        }\n      }), icon ? React.createElement(\"div\", {\n        className: \"rating-item-custom-icon\"\n      }, (_a = icon[value]) !== null && _a !== void 0 ? _a : icon) : React.createElement(\"div\", {\n        className: \"rating-item-icon\"\n      }), activeIcon && React.createElement(\"div\", {\n        className: \"rating-item-custom-icon-active\"\n      }, (_b = activeIcon[value]) !== null && _b !== void 0 ? _b : activeIcon)), React.createElement(\"input\", {\n        className: \"rating-item-input\",\n        checked: isItemChecked(),\n        disabled: disabled || readOnly,\n        id: id,\n        name: _name,\n        onBlur: function () {\n          return handleMouseLeave();\n        },\n        onChange: function () {\n          return handleOnChange(value);\n        },\n        onFocus: function () {\n          return handleMouseEnter(value);\n        },\n        type: \"radio\",\n        value: value\n      }));\n    })));\n  }));\n});\nCRating.propTypes = {\n  children: PropTypes.node,\n  activeIcon: PropTypes.any,\n  allowClear: PropTypes.bool,\n  disabled: PropTypes.bool,\n  highlightOnlySelected: PropTypes.bool,\n  icon: PropTypes.any,\n  itemCount: PropTypes.number,\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  onHover: PropTypes.func,\n  precision: PropTypes.number,\n  readOnly: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg', 'custom']),\n  value: PropTypes.number\n};\nCRating.displayName = 'CRating';\nexport { CRating };","map":{"version":3,"mappings":"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","names":["CConditionalTooltip","_a","content","tooltip","React","CTooltip","children","CRating","forwardRef","ref","allowClear","className","disabled","highlightOnlySelected","icon","_c","itemCount","name","onChange","onHover","_d","precision","readOnly","size","tooltips","value","rest","__rest","useState","cleared","setCleared","currentValue","setCurrentValue","hoverValue","setHoverValue","tooltipValue","setTooltipValue","_name","useId","useEffect","undefined","handleMouseEnter","handleMouseLeave","handleOnChange","handleOnClick","__assign","classNames","_b","concat","role","Array","from","length","_","index","numberOfRadios","key","isArray","_index","isNotLastItem","id","isItemChecked","isItemActive","Fragment","active","htmlFor","onClick","onMouseEnter","onMouseLeave","style","zIndex","position","width","overflow","opacity","activeIcon","checked","onBlur","onFocus","type","propTypes","PropTypes","node","any","bool","number","string","func","oneOf","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\rating\\CRating.tsx"],"sourcesContent":["import React, {\n  forwardRef,\n  Fragment,\n  HTMLAttributes,\n  ReactNode,\n  useEffect,\n  useId,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { CTooltip } from '../tooltip'\n\ntype Icon = {\n  [key: number]: JSX.Element\n}\n\nexport interface CRatingProps extends Omit<HTMLAttributes<HTMLDivElement>, 'onChange'> {\n  /**\n   * The default icon to display when the item is selected.\n   */\n  activeIcon?: string | JSX.Element | Icon\n  /**\n   * Enables the clearing upon clicking the selected item again.\n   */\n  allowClear?: boolean\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * If enabled, only the currently selected icon will be visibly highlighted.\n   */\n  highlightOnlySelected?: boolean\n  /**\n   * The default icon to display when the item is not selected.\n   */\n  icon?: string | JSX.Element | Icon\n  /**\n   * Specifies the total number of stars to be displayed in the star rating component. This property determines the scale of the rating, such as out of 5 stars, 10 stars, etc.\n   */\n  itemCount?: number\n  /**\n   * The name attribute of the radio input elements.\n   */\n  name?: string\n  /**\n   * Execute a function when a user changes the selected element.\n   */\n  onChange?: (value: number | null) => void\n  /**\n   * Execute a function when a user hover the element.\n   */\n  onHover?: (value: number | null) => void\n  /**\n   * Minimum increment value change allowed.\n   */\n  precision?: number\n  /**\n   * Toggle the readonly state for the component.\n   */\n  readOnly?: boolean\n  /**\n   * Size the component small, large, or custom if you define custom icons with custom height.\n   */\n  size?: 'sm' | 'lg' | 'custom'\n  /**\n   * Enable tooltips with default values or set specific labels for each icon.\n   */\n  tooltips?: boolean | string[]\n  /**\n   * The `value` attribute of component.\n   *\n   * @controllable onChange\n   * */\n  value?: number\n}\n\nconst CConditionalTooltip = ({\n  children,\n  content,\n  tooltip,\n}: {\n  children: ReactNode\n  content?: ReactNode\n  tooltip?: boolean\n}) => {\n  return tooltip ? (\n    <CTooltip content={content}>\n      <span>{children}</span>\n    </CTooltip>\n  ) : (\n    children\n  )\n}\n\nexport const CRating = forwardRef<HTMLDivElement, CRatingProps>(\n  (\n    {\n      activeIcon,\n      allowClear,\n      className,\n      disabled,\n      highlightOnlySelected,\n      icon,\n      itemCount = 5,\n      name,\n      onChange,\n      onHover,\n      precision = 1,\n      readOnly,\n      size,\n      tooltips,\n      value,\n      ...rest\n    },\n    ref,\n  ) => {\n    const [cleared, setCleared] = useState(false)\n    const [currentValue, setCurrentValue] = useState(value ?? null)\n    const [hoverValue, setHoverValue] = useState<number | null>(null)\n    const [tooltipValue, setTooltipValue] = useState<number | string | null>(null)\n    const _name = name || useId()\n\n    useEffect(() => {\n      value !== undefined && setCurrentValue(value)\n    }, [value])\n\n    const handleMouseEnter = (value: number) => {\n      if (disabled || readOnly) {\n        return\n      }\n\n      onHover && onHover(value)\n      setHoverValue(value)\n      value && setTooltipValue(value)\n    }\n\n    const handleMouseLeave = () => {\n      if (disabled || readOnly) {\n        return\n      }\n\n      onHover && onHover(null)\n      setHoverValue(null)\n    }\n\n    const handleOnChange = (value: number) => {\n      if (disabled || readOnly) {\n        return\n      }\n\n      if (cleared) {\n        setCleared(false)\n        return\n      }\n\n      setCurrentValue(value)\n      onChange && onChange(value)\n    }\n\n    const handleOnClick = (value: number) => {\n      if (disabled || readOnly) {\n        return\n      }\n\n      if (allowClear && value === currentValue) {\n        setCleared(true)\n        onChange && onChange(null)\n        setCurrentValue(null)\n        setHoverValue(null)\n      }\n    }\n\n    return (\n      <div\n        className={classNames(\n          'rating',\n          {\n            [`rating-${size}`]: size,\n            disabled: disabled,\n            readonly: readOnly,\n          },\n          className,\n        )}\n        role=\"radiogroup\"\n        {...rest}\n        ref={ref}\n      >\n        {Array.from({ length: itemCount }, (_, index) => {\n          const numberOfRadios = 1 / precision\n\n          return (\n            <CConditionalTooltip\n              key={index}\n              {...(tooltips && {\n                content: Array.isArray(tooltips)\n                  ? tooltips[index]\n                  : precision\n                    ? tooltipValue\n                    : index + 1,\n                tooltip: true,\n              })}\n            >\n              <div className=\"rating-item\">\n                {Array.from({ length: numberOfRadios }, (_, _index) => {\n                  const isNotLastItem = _index + 1 < numberOfRadios\n                  const value =\n                    numberOfRadios === 1 ? index + 1 : index + (_index + 1) * (1 * precision)\n                  const id = useId()\n\n                  const isItemChecked = () => value === currentValue\n\n                  const isItemActive = () => {\n                    if (\n                      highlightOnlySelected\n                        ? hoverValue === value\n                        : hoverValue && hoverValue >= value\n                    ) {\n                      return true\n                    }\n\n                    if (\n                      hoverValue === null &&\n                      (highlightOnlySelected\n                        ? isItemChecked()\n                        : currentValue && currentValue >= value)\n                    ) {\n                      return true\n                    }\n\n                    return false\n                  }\n\n                  return (\n                    <Fragment key={value}>\n                      <label\n                        className={classNames('rating-item-label', {\n                          active: isItemActive(),\n                        })}\n                        htmlFor={id}\n                        onClick={() => handleOnClick(value)}\n                        onMouseEnter={() => handleMouseEnter(value)}\n                        onMouseLeave={() => handleMouseLeave()}\n                        {...(isNotLastItem && {\n                          style: {\n                            zIndex: 1 / precision - _index,\n                            position: 'absolute',\n                            width: `${precision * (_index + 1) * 100}%`,\n                            overflow: 'hidden',\n                            opacity: 0,\n                          },\n                        })}\n                      >\n                        {icon ? (\n                          <div className=\"rating-item-custom-icon\">\n                            {(icon as Icon)[value] ?? icon}\n                          </div>\n                        ) : (\n                          <div className=\"rating-item-icon\"></div>\n                        )}\n                        {activeIcon && (\n                          <div className=\"rating-item-custom-icon-active\">\n                            {(activeIcon as Icon)[value] ?? activeIcon}\n                          </div>\n                        )}\n                      </label>\n                      <input\n                        className=\"rating-item-input\"\n                        checked={isItemChecked()}\n                        disabled={disabled || readOnly}\n                        id={id}\n                        name={_name}\n                        onBlur={() => handleMouseLeave()}\n                        onChange={() => handleOnChange(value)}\n                        onFocus={() => handleMouseEnter(value)}\n                        type=\"radio\"\n                        value={value}\n                      />\n                    </Fragment>\n                  )\n                })}\n              </div>\n            </CConditionalTooltip>\n          )\n        })}\n      </div>\n    )\n  },\n)\n\nCRating.propTypes = {\n  children: PropTypes.node,\n  activeIcon: PropTypes.any,\n  allowClear: PropTypes.bool,\n  disabled: PropTypes.bool,\n  highlightOnlySelected: PropTypes.bool,\n  icon: PropTypes.any,\n  itemCount: PropTypes.number,\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  onHover: PropTypes.func,\n  precision: PropTypes.number,\n  readOnly: PropTypes.bool,\n  size: PropTypes.oneOf(['sm', 'lg', 'custom']),\n  value: PropTypes.number,\n}\n\nCRating.displayName = 'CRating'\n"]},"metadata":{},"sourceType":"module"}