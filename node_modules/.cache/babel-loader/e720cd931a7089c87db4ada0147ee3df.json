{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { colorPropType, gradientsPropType } from '../../props.js';\nimport { CProgressStackedContext } from './CProgressStackedContext.js';\nvar CProgressBar = forwardRef(function (_a, ref) {\n  var _b;\n\n  var children = _a.children,\n      animated = _a.animated,\n      className = _a.className,\n      color = _a.color,\n      _c = _a.value,\n      value = _c === void 0 ? 0 : _c,\n      variant = _a.variant,\n      rest = __rest(_a, [\"children\", \"animated\", \"className\", \"color\", \"value\", \"variant\"]);\n\n  var stacked = useContext(CProgressStackedContext).stacked;\n  return React.createElement(\"div\", __assign({\n    className: classNames('progress-bar', (_b = {}, _b[\"bg-\".concat(color)] = color, _b[\"progress-bar-\".concat(variant)] = variant, _b['progress-bar-animated'] = animated, _b), className)\n  }, !stacked && {\n    style: {\n      width: \"\".concat(value, \"%\")\n    }\n  }, rest, {\n    ref: ref\n  }), children);\n});\nCProgressBar.propTypes = {\n  animated: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: PropTypes.oneOfType([colorPropType, gradientsPropType]),\n  value: PropTypes.number,\n  variant: PropTypes.oneOf(['striped'])\n};\nCProgressBar.displayName = 'CProgressBar';\nexport { CProgressBar };","map":{"version":3,"mappings":";;;;;;IAkCaA,YAAY,GAAGC,UAAU,CACpC,UAACC,EAAD,EAAwEC,GAAxE,EAA2E;;;AAAxE,cAAQ,cAAR;AAAA,MAAUC,QAAQ,cAAlB;AAAA,MAAoBC,SAAS,eAA7B;AAAA,MAA+BC,KAAK,WAApC;AAAA,MAAsCC,aAAtC;AAAA,MAAsCC,KAAK,GAAGD,oBAACA,EAA/C;AAAA,MAAiDE,OAAO,aAAxD;AAAA,MAA6DC,IAAI,GAAnEC,8EAAE;;AACO,aAAO,GAAKC,UAAU,CAACC,uBAAD,CAAV,CAAmCC,OAA/C;AAER,SACEC,KACE,cADF,CACE,KADF,EACEC;AAAAX,aAAS,EAAEY,UAAU,CACnB,cADmB,GACLC,SAEZA,GAAC,MAAMC,MAAN,CAAMb,KAAN,CAAD,IAAiBA,KAFL,EAGZY,GAAC,gBAAgBC,MAAhB,CAAgBV,OAAhB,CAAD,IAA6BA,OAHjB,EAIZS,8BAAyBd,QAJb,EAMdc,EAPmB,GAOnBb,SAPmB;AAArB,KASK,CAACS,OAAD,IAAY;AAAEM,SAAK,EAAE;AAAEC,WAAK,EAAE,GAAGF,MAAH,CAAGX,KAAH,EAAW,GAAX;AAAT;AAAT,GATjB,EAUIE,IAVJ,EAWA;AAAAP,OAAG,EAAEA;AAAL,GAXA,CADF,EAcGmB,QAdH,CADF;AAkBD,CAtBmC;AAwBtCtB,YAAY,CAACuB,SAAb,GAAyB;AACvBnB,UAAQ,EAAEoB,SAAS,CAACC,IADG;AAEvBH,UAAQ,EAAEE,SAAS,CAACE,IAFG;AAGvBrB,WAAS,EAAEmB,SAAS,CAACG,MAHE;AAIvBrB,OAAK,EAAEkB,SAAS,CAACI,SAAV,CAAoB,CAACC,aAAD,EAAgBC,iBAAhB,CAApB,CAJgB;AAKvBtB,OAAK,EAAEgB,SAAS,CAACO,MALM;AAMvBtB,SAAO,EAAEe,SAAS,CAACQ,KAAV,CAAgB,CAAC,SAAD,CAAhB;AANc,CAAzB;AASAhC,YAAY,CAACiC,WAAb,GAA2B,cAA3B","names":["CProgressBar","forwardRef","_a","ref","animated","className","color","_c","value","variant","rest","__rest","useContext","CProgressStackedContext","stacked","React","__assign","classNames","_b","concat","style","width","children","propTypes","PropTypes","bool","node","string","oneOfType","colorPropType","gradientsPropType","number","oneOf","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\progress\\CProgressBar.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType, gradientsPropType } from '../../props'\nimport type { Colors, Gradients } from '../../types'\n\nimport { CProgressStackedContext } from './CProgressStackedContext'\n\nexport interface CProgressBarProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Use to animate the stripes right to left via CSS3 animations.\n   */\n  animated?: boolean\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUIâ€™s themed colors.\n   *\n   * @type {'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-gradient' | 'secondary-gradient' | 'success-gradient' | 'danger-gradient' | 'warning-gradient' | 'info-gradient' | 'dark-gradient' | 'light-gradient' | string }\n   */\n  color?: Colors | Gradients\n  /**\n   * The percent to progress the ProgressBar.\n   */\n  value?: number\n  /**\n   * Set the progress bar variant to optional striped.\n   */\n  variant?: 'striped'\n}\n\nexport const CProgressBar = forwardRef<HTMLDivElement, CProgressBarProps>(\n  ({ children, animated, className, color, value = 0, variant, ...rest }, ref) => {\n    const { stacked } = useContext(CProgressStackedContext)\n\n    return (\n      <div\n        className={classNames(\n          'progress-bar',\n          {\n            [`bg-${color}`]: color,\n            [`progress-bar-${variant}`]: variant,\n            'progress-bar-animated': animated,\n          },\n          className\n        )}\n        {...(!stacked && { style: { width: `${value}%` } })}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  }\n)\nCProgressBar.propTypes = {\n  animated: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: PropTypes.oneOfType([colorPropType, gradientsPropType]),\n  value: PropTypes.number,\n  variant: PropTypes.oneOf(['striped']),\n}\n\nCProgressBar.displayName = 'CProgressBar'\n"]},"metadata":{},"sourceType":"module"}