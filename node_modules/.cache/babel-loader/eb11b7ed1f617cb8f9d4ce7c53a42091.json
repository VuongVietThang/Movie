{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nvar CFormFeedback = forwardRef(function (_a, ref) {\n  var _b;\n\n  var children = _a.children,\n      _c = _a.as,\n      Component = _c === void 0 ? 'div' : _c,\n      className = _a.className,\n      invalid = _a.invalid,\n      tooltip = _a.tooltip,\n      valid = _a.valid,\n      rest = __rest(_a, [\"children\", \"as\", \"className\", \"invalid\", \"tooltip\", \"valid\"]);\n\n  return React.createElement(Component, __assign({\n    className: classNames((_b = {}, _b[\"invalid-\".concat(tooltip ? 'tooltip' : 'feedback')] = invalid, _b[\"valid-\".concat(tooltip ? 'tooltip' : 'feedback')] = valid, _b), className)\n  }, rest, {\n    ref: ref\n  }), children);\n});\nCFormFeedback.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  invalid: PropTypes.bool,\n  tooltip: PropTypes.bool,\n  valid: PropTypes.bool\n};\nCFormFeedback.displayName = 'CFormFeedback';\nexport { CFormFeedback };","map":{"version":3,"mappings":";;;;IA8BaA,aAAa,GACxBC,UAAU,CACR,UAACC,EAAD,EAAmFC,GAAnF,EAAsF;;;AAAnF,cAAQ,cAAR;AAAA,MAAUC,EAAqB,QAA/B;AAAA,MAAcC,SAAS,GAAGD,wBAAKA,EAA/B;AAAA,MAAiCE,SAAS,eAA1C;AAAA,MAA4CC,OAAO,aAAnD;AAAA,MAAqDC,OAAO,aAA5D;AAAA,MAA8DC,KAAK,WAAnE;AAAA,MAAwEC,IAAI,GAA9EC,0EAAE;;AACD,SACEC,KAAC,cAAD,CAACP,SAAD,EACEQ;AAAAP,aAAS,EAAEQ,UAAU,WAEjBC,GAAC,WAAWC,MAAX,CAAWR,OAAO,GAAG,SAAH,GAAe,UAAjC,CAAD,IAAiDD,OAFhC,EAGjBQ,GAAC,SAASC,MAAT,CAASR,OAAO,GAAG,SAAH,GAAe,UAA/B,CAAD,IAA+CC,KAH9B,OAKnBH,SALmB;AAArB,KAOII,IAPJ,EAQA;AAAAP,OAAG,EAAEA;AAAL,GARA,CADF,EAWGc,QAXH,CADF;AAeD,CAjBO;AAoBZjB,aAAa,CAACkB,SAAd,GAA0B;AACxBC,IAAE,EAAEC,SAAS,CAACC,WADU;AAExBJ,UAAQ,EAAEG,SAAS,CAACE,IAFI;AAGxBhB,WAAS,EAAEc,SAAS,CAACG,MAHG;AAIxBhB,SAAO,EAAEa,SAAS,CAACI,IAJK;AAKxBhB,SAAO,EAAEY,SAAS,CAACI,IALK;AAMxBf,OAAK,EAAEW,SAAS,CAACI;AANO,CAA1B;AASAxB,aAAa,CAACyB,WAAd,GAA4B,eAA5B","names":["CFormFeedback","forwardRef","_a","ref","_c","Component","className","invalid","tooltip","valid","rest","__rest","React","__assign","classNames","_b","concat","children","propTypes","as","PropTypes","elementType","node","string","bool","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react\\src\\components\\form\\CFormFeedback.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CFormFeedbackProps extends HTMLAttributes<HTMLDivElement | HTMLSpanElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n\n  /**\n   * Method called immediately after the `value` prop changes.\n   */\n  invalid?: boolean\n  /**\n   * If your form layout allows it, you can display validation feedback in a styled tooltip.\n   */\n  tooltip?: boolean\n  /**\n   * Set component validation state to valid.\n   */\n  valid?: boolean\n}\n\nexport const CFormFeedback: PolymorphicRefForwardingComponent<'div', CFormFeedbackProps> =\n  forwardRef<HTMLDivElement | HTMLSpanElement, CFormFeedbackProps>(\n    ({ children, as: Component = 'div', className, invalid, tooltip, valid, ...rest }, ref) => {\n      return (\n        <Component\n          className={classNames(\n            {\n              [`invalid-${tooltip ? 'tooltip' : 'feedback'}`]: invalid,\n              [`valid-${tooltip ? 'tooltip' : 'feedback'}`]: valid,\n            },\n            className,\n          )}\n          {...rest}\n          ref={ref}\n        >\n          {children}\n        </Component>\n      )\n    },\n  )\n\nCFormFeedback.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  invalid: PropTypes.bool,\n  tooltip: PropTypes.bool,\n  valid: PropTypes.bool,\n}\n\nCFormFeedback.displayName = 'CFormFeedback'\n"]},"metadata":{},"sourceType":"module"}