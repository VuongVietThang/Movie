{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CConditionalPortal } from '../conditional-portal/CConditionalPortal.js';\nimport { CDropdownContext } from './CDropdownContext.js';\nimport '@popperjs/core';\nimport { useForkedRef } from '../../hooks/useForkedRef.js';\nimport { getAlignmentClassNames } from './utils.js';\nvar CDropdownMenu = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      _b = _a.as,\n      Component = _b === void 0 ? 'ul' : _b,\n      className = _a.className,\n      rest = __rest(_a, [\"children\", \"as\", \"className\"]);\n\n  var _c = useContext(CDropdownContext),\n      alignment = _c.alignment,\n      container = _c.container,\n      dark = _c.dark,\n      dropdownMenuRef = _c.dropdownMenuRef,\n      popper = _c.popper,\n      portal = _c.portal,\n      visible = _c.visible;\n\n  var forkedRef = useForkedRef(ref, dropdownMenuRef);\n  return React.createElement(CConditionalPortal, {\n    container: container,\n    portal: portal !== null && portal !== void 0 ? portal : false\n  }, React.createElement(Component, __assign({\n    className: classNames('dropdown-menu', {\n      show: visible\n    }, alignment && getAlignmentClassNames(alignment), className),\n    ref: forkedRef,\n    role: \"menu\"\n  }, !popper && {\n    'data-coreui-popper': 'static'\n  }, dark && {\n    'data-coreui-theme': 'dark'\n  }, rest), Component === 'ul' ? React.Children.map(children, function (child, index) {\n    if (React.isValidElement(child)) {\n      return React.createElement(\"li\", {\n        key: index\n      }, React.cloneElement(child));\n    }\n\n    return;\n  }) : children));\n});\nCDropdownMenu.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string\n};\nCDropdownMenu.displayName = 'CDropdownMenu';\nexport { CDropdownMenu };","map":{"version":3,"mappings":";;;;;;;;;IAuBaA,aAAa,GACxBC,UAAU,CACR,UAACC,EAAD,EAAyDC,GAAzD,EAA4D;AAAzD,cAAQ,cAAR;AAAA,MAAUC,EAAoB,QAA9B;AAAA,MAAcC,SAAS,GAAGD,uBAAIA,EAA9B;AAAA,MAAgCE,SAAS,eAAzC;AAAA,MAA8CC,IAAI,cAApD,+BAAoD,CAAlD;;AACK,WACJC,UAAU,CAACC,gBAAD,CADN;AAAA,MAAEC,SAAS,eAAX;AAAA,MAAaC,SAAS,eAAtB;AAAA,MAAwBC,IAAI,UAA5B;AAAA,MAA8BC,eAAe,qBAA7C;AAAA,MAA+CC,MAAM,YAArD;AAAA,MAAuDC,MAAM,YAA7D;AAAA,MAA+DC,OAAO,aAAtE;;AAGN,MAAMC,SAAS,GAAGC,YAAY,CAACf,GAAD,EAAMU,eAAN,CAA9B;AAEA,SACEM,KAAC,cAAD,CAACC,kBAAD,EAAoB;AAAAT,aAAS,EAAEA,SAAX;AAAsBI,UAAM,EAAEA,MAAM,KAAN,cAAM,KAAN,kBAAU;AAAxC,GAApB,EACEI,oBAACd,SAAD,EACEgB;AAAAf,aAAS,EAAEgB,UAAU,CACnB,eADmB,EAEnB;AACEC,UAAI,EAAEP;AADR,KAFmB,EAKnBN,SAAS,IAAIc,sBAAsB,CAACd,SAAD,CALhB,EAMnBJ,SANmB,CAArB;AAQAH,OAAG,EAAEc,SARL;AASAQ,QAAI,EAAC;AATL,KAUK,CAACX,MAAD,IAAW;AAAE,0BAAsB;AAAxB,GAVhB,EAWKF,IAAI,IAAI;AAAE,yBAAqB;AAAvB,GAXb,EAYIL,IAZJ,CADF,EAeGF,SAAS,KAAK,IAAd,GACGc,KAAK,CAACO,QAAN,CAAeC,GAAf,CAAmBC,QAAnB,EAA6B,UAACC,KAAD,EAAQC,KAAR,EAAa;AACxC,QAAIX,KAAK,CAACY,cAAN,CAAqBF,KAArB,CAAJ,EAAiC;AAC/B,aAAOV,KAAI,cAAJ,CAAI,IAAJ,EAAI;AAAAa,WAAG,EAAEF;AAAL,OAAJ,EAAiBX,KAAK,CAACc,YAAN,CAAmBJ,KAAnB,CAAjB,CAAP;;;AAEF;AACD,GALD,CADH,GAOGD,QAtBN,CADF,CADF;AA4BD,CAnCO;AAsCZ5B,aAAa,CAACkC,SAAd,GAA0B;AACxBC,IAAE,EAAEC,SAAS,CAACC,WADU;AAExBT,UAAQ,EAAEQ,SAAS,CAACE,IAFI;AAGxBhC,WAAS,EAAE8B,SAAS,CAACG;AAHG,CAA1B;AAMAvC,aAAa,CAACwC,WAAd,GAA4B,eAA5B","names":["CDropdownMenu","forwardRef","_a","ref","_b","Component","className","rest","useContext","CDropdownContext","alignment","container","dark","dropdownMenuRef","popper","portal","visible","forkedRef","useForkedRef","React","CConditionalPortal","__assign","classNames","show","getAlignmentClassNames","role","Children","map","children","child","index","isValidElement","key","cloneElement","propTypes","as","PropTypes","elementType","node","string","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\dropdown\\CDropdownMenu.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, HTMLAttributes, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CConditionalPortal } from '../conditional-portal'\nimport { CDropdownContext } from './CDropdownContext'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\nimport { useForkedRef } from '../../hooks'\n\nimport { getAlignmentClassNames } from './utils'\n\nexport interface CDropdownMenuProps extends HTMLAttributes<HTMLDivElement | HTMLUListElement> {\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CDropdownMenu: PolymorphicRefForwardingComponent<'ul', CDropdownMenuProps> =\n  forwardRef<HTMLDivElement | HTMLUListElement, CDropdownMenuProps>(\n    ({ children, as: Component = 'ul', className, ...rest }, ref) => {\n      const { alignment, container, dark, dropdownMenuRef, popper, portal, visible } =\n        useContext(CDropdownContext)\n\n      const forkedRef = useForkedRef(ref, dropdownMenuRef)\n\n      return (\n        <CConditionalPortal container={container} portal={portal ?? false}>\n          <Component\n            className={classNames(\n              'dropdown-menu',\n              {\n                show: visible,\n              },\n              alignment && getAlignmentClassNames(alignment),\n              className\n            )}\n            ref={forkedRef}\n            role=\"menu\"\n            {...(!popper && { 'data-coreui-popper': 'static' })}\n            {...(dark && { 'data-coreui-theme': 'dark' })}\n            {...rest}\n          >\n            {Component === 'ul'\n              ? React.Children.map(children, (child, index) => {\n                  if (React.isValidElement(child)) {\n                    return <li key={index}>{React.cloneElement(child)}</li>\n                  }\n                  return\n                })\n              : children}\n          </Component>\n        </CConditionalPortal>\n      )\n    }\n  )\n\nCDropdownMenu.propTypes = {\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCDropdownMenu.displayName = 'CDropdownMenu'\n"]},"metadata":{},"sourceType":"module"}