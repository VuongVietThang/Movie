{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport '../form/CForm.js';\nimport { CFormCheck } from '../form/CFormCheck.js';\nimport '../form/CFormControlValidation.js';\nimport '../form/CFormControlWrapper.js';\nimport '../form/CFormFeedback.js';\nimport '../form/CFormFloating.js';\nimport { CFormInput } from '../form/CFormInput.js';\nimport '../form/CFormLabel.js';\nimport '../form/CFormRange.js';\nimport '../form/CFormSelect.js';\nimport '../form/CFormSwitch.js';\nimport '../form/CFormText.js';\nimport '../form/CFormTextarea.js';\nimport '../form/CInputGroup.js';\nimport '../form/CInputGroupText.js';\nimport '../table/CTable.js';\nimport '../table/CTableBody.js';\nimport '../table/CTableCaption.js';\nimport '../table/CTableDataCell.js';\nimport '../table/CTableFoot.js';\nimport { CTableHead } from '../table/CTableHead.js';\nimport { CTableHeaderCell } from '../table/CTableHeaderCell.js';\nimport { CTableRow } from '../table/CTableRow.js';\nimport { getColumns, getColumnGroups, getTableHeaderCellProps, getTableHeaderCellStyles, getColumnKey, getColumnLabel, getColumnValues, getColumnSorterState } from './utils.js';\nvar CSmartTableHead = forwardRef(function (_a, ref) {\n  var _b = _a.as,\n      Component = _b === void 0 ? CTableHead : _b,\n      columnFilter = _a.columnFilter,\n      columnFilterState = _a.columnFilterState,\n      columnSorter = _a.columnSorter,\n      columns = _a.columns,\n      handleOnCustomFilterChange = _a.handleOnCustomFilterChange,\n      handleFilterOnChange = _a.handleFilterOnChange,\n      handleFilterOnInput = _a.handleFilterOnInput,\n      handleSelectAllChecked = _a.handleSelectAllChecked,\n      handleSort = _a.handleSort,\n      items = _a.items,\n      selectable = _a.selectable,\n      selectAll = _a.selectAll,\n      selectedAll = _a.selectedAll,\n      _c = _a.showGroups,\n      showGroups = _c === void 0 ? true : _c,\n      sorterState = _a.sorterState,\n      sortingIcon = _a.sortingIcon,\n      sortingIconAscending = _a.sortingIconAscending,\n      sortingIconDescending = _a.sortingIconDescending,\n      rest = __rest(_a, [\"as\", \"columnFilter\", \"columnFilterState\", \"columnSorter\", \"columns\", \"handleOnCustomFilterChange\", \"handleFilterOnChange\", \"handleFilterOnInput\", \"handleSelectAllChecked\", \"handleSort\", \"items\", \"selectable\", \"selectAll\", \"selectedAll\", \"showGroups\", \"sorterState\", \"sortingIcon\", \"sortingIconAscending\", \"sortingIconDescending\"]);\n\n  var selectAllcheckboxRef = useRef(null);\n\n  var _columns = useMemo(function () {\n    return getColumns(columns);\n  }, [columns]);\n\n  var groups = useMemo(function () {\n    return getColumnGroups(columns);\n  }, [columns]);\n\n  var columnSorterIcon = function (column) {\n    if (getColumnSorterState(getColumnKey(column), sorterState) === 0) {\n      return React.createElement(\"span\", {\n        className: \"opacity-25 float-end me-1\"\n      }, sortingIcon);\n    }\n\n    if (getColumnSorterState(getColumnKey(column), sorterState) === 'asc') {\n      return React.createElement(\"span\", {\n        className: \"float-end me-1\"\n      }, sortingIconAscending);\n    }\n\n    if (getColumnSorterState(getColumnKey(column), sorterState) === 'desc') {\n      return React.createElement(\"span\", {\n        className: \"float-end me-1\"\n      }, sortingIconDescending);\n    }\n\n    return;\n  };\n\n  return React.createElement(Component, __assign({}, rest, {\n    ref: ref\n  }), showGroups && groups && groups.length > 0 && groups.map(function (row, index) {\n    return React.createElement(CTableRow, {\n      key: index\n    }, selectable && React.createElement(CTableHeaderCell, null), row.map(function (cell, index) {\n      return React.createElement(CTableHeaderCell, __assign({\n        colSpan: cell.colspan\n      }, getTableHeaderCellProps(cell), {\n        key: index\n      }), cell.label);\n    }));\n  }), React.createElement(CTableRow, null, selectable && React.createElement(CTableHeaderCell, null, selectAll && React.createElement(CFormCheck, {\n    checked: typeof selectedAll === 'boolean' ? selectedAll : false,\n    indeterminate: selectedAll === 'indeterminate' ? true : false,\n    onChange: function () {\n      return handleSelectAllChecked && handleSelectAllChecked();\n    },\n    ref: selectAllcheckboxRef\n  })), _columns.map(function (column, index) {\n    var isSortable = columnSorter && (typeof column === 'object' ? column.sorter === undefined ? true : column.sorter : true);\n    return React.createElement(CTableHeaderCell, __assign({}, getTableHeaderCellProps(column), {\n      style: getTableHeaderCellStyles(column, columnSorter),\n      key: index\n    }, isSortable && {\n      onClick: function () {\n        return handleSort && handleSort(getColumnKey(column), index);\n      },\n      onKeyDown: function (event) {\n        if (event.key === 'Enter' && handleSort) {\n          handleSort(getColumnKey(column), index);\n        }\n\n        if (event.key === 'ArrowUp' && handleSort) {\n          event.preventDefault();\n          handleSort(getColumnKey(column), index, 'asc');\n        }\n\n        if (event.key === 'ArrowDown' && handleSort) {\n          event.preventDefault();\n          handleSort(getColumnKey(column), index, 'desc');\n        }\n      },\n      tabIndex: 0\n    }), React.createElement(\"div\", {\n      className: \"d-inline\"\n    }, getColumnLabel(column)), isSortable && columnSorterIcon(column));\n  })), columnFilter && React.createElement(CTableRow, null, selectable && React.createElement(CTableHeaderCell, null), _columns.map(function (column, index) {\n    return React.createElement(CTableHeaderCell, __assign({}, getTableHeaderCellProps(column), {\n      key: index\n    }), (typeof column === 'object' ? column.filter === undefined ? true : column.filter : true) ? typeof column !== 'string' && typeof column.filter === 'function' ? column.filter(getColumnValues(items, getColumnKey(column)), function (value) {\n      return handleOnCustomFilterChange && handleOnCustomFilterChange(getColumnKey(column), value);\n    }, columnFilterState && columnFilterState[getColumnKey(column)] ? columnFilterState[getColumnKey(column)] : undefined) : React.createElement(CFormInput, {\n      size: \"sm\",\n      onInput: function (event) {\n        return handleFilterOnInput && handleFilterOnInput(getColumnKey(column), event.target.value);\n      },\n      onChange: function (event) {\n        return handleFilterOnChange && handleFilterOnChange(getColumnKey(column), event.target.value);\n      },\n      value: columnFilterState && columnFilterState[getColumnKey(column)] ? columnFilterState[getColumnKey(column)] : '',\n      \"aria-label\": \"column name: '\".concat(getColumnLabel(column), \"' filter input\")\n    }) : '');\n  })));\n});\nCSmartTableHead.propTypes = {\n  as: PropTypes.elementType,\n  columnFilter: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  columnFilterState: PropTypes.object,\n  columnSorter: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  children: PropTypes.node,\n  columns: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.any, PropTypes.string])).isRequired,\n  // TODO: improve this Prop Type,\n  handleOnCustomFilterChange: PropTypes.func,\n  handleFilterOnChange: PropTypes.func,\n  handleFilterOnInput: PropTypes.func,\n  handleSelectAllChecked: PropTypes.func,\n  handleSort: PropTypes.func,\n  items: PropTypes.array,\n  selectable: PropTypes.bool,\n  selectAll: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  selectedAll: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  showGroups: PropTypes.bool,\n  sorterState: PropTypes.array,\n  sortingIcon: PropTypes.node,\n  sortingIconAscending: PropTypes.node,\n  sortingIconDescending: PropTypes.node\n};\nCSmartTableHead.displayName = 'CSmartTableHead';\nexport { CSmartTableHead };","map":{"version":3,"mappings":"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","names":["CSmartTableHead","forwardRef","_a","ref","Component","CTableHead","_b","columnFilter","columnFilterState","columnSorter","columns","handleOnCustomFilterChange","handleFilterOnChange","handleFilterOnInput","handleSelectAllChecked","handleSort","items","selectable","selectAll","selectedAll","_c","showGroups","sorterState","sortingIcon","sortingIconAscending","sortingIconDescending","rest","selectAllcheckboxRef","useRef","_columns","useMemo","groups","columnSorterIcon","column","getColumnSorterState","getColumnKey","React","className","__assign","length","map","row","index","CTableRow","key","CTableHeaderCell","cell","colSpan","colspan","getTableHeaderCellProps","label","CFormCheck","checked","indeterminate","onChange","isSortable","sorter","undefined","style","getTableHeaderCellStyles","onClick","onKeyDown","event","preventDefault","tabIndex","getColumnLabel","filter","getColumnValues","value","CFormInput","size","onInput","target","propTypes","as","PropTypes","elementType","oneOfType","bool","object","children","node","arrayOf","any","string","isRequired","func","array","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\smart-table\\CSmartTableHead.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, ReactNode, useMemo, useRef } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CFormCheck, CFormInput } from '../form'\nimport { CTableHeaderCell, CTableRow } from '../table'\nimport { CTableHead, CTableHeadProps } from '../table/CTableHead'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\nimport type { ColumnFilter, ColumnFilterValue, Column, Item, Sorter, SorterValue } from './types'\nimport {\n  getColumnKey,\n  getColumnLabel,\n  getColumnGroups,\n  getColumns,\n  getColumnSorterState,\n  getColumnValues,\n  getTableHeaderCellProps,\n  getTableHeaderCellStyles,\n} from './utils'\n\nexport interface CSmartTableHeadProps extends CTableHeadProps {\n  as?: ElementType\n  columnFilter?: boolean | ColumnFilter\n  columnFilterState?: ColumnFilterValue\n  columnSorter?: boolean | Sorter\n  columns: (Column | string)[]\n  handleOnCustomFilterChange?: (key: string, value: any) => void\n  handleFilterOnChange?: (key: string, value: string) => void\n  handleFilterOnInput?: (key: string, value: string) => void\n  handleSelectAllChecked?: () => void\n  handleSort?: (key: string, index: number, order?: 'asc' | 'desc') => void\n  items: Item[]\n  selectable?: boolean\n  selectAll?: boolean | { external?: boolean }\n  selectedAll?: boolean | string\n  showGroups?: boolean\n  sorterState?: SorterValue[]\n  sortingIcon?: ReactNode\n  sortingIconAscending?: ReactNode\n  sortingIconDescending?: ReactNode\n}\n\nexport const CSmartTableHead: PolymorphicRefForwardingComponent<'thead', CSmartTableHeadProps> =\n  forwardRef<HTMLTableSectionElement, CSmartTableHeadProps>(\n    (\n      {\n        as: Component = CTableHead,\n        columnFilter,\n        columnFilterState,\n        columnSorter,\n        columns,\n        handleOnCustomFilterChange,\n        handleFilterOnChange,\n        handleFilterOnInput,\n        handleSelectAllChecked,\n        handleSort,\n        items,\n        selectable,\n        selectAll,\n        selectedAll,\n        showGroups = true,\n        sorterState,\n        sortingIcon,\n        sortingIconAscending,\n        sortingIconDescending,\n        ...rest\n      },\n      ref,\n    ) => {\n      const selectAllcheckboxRef = useRef<HTMLInputElement>(null)\n      const _columns = useMemo(() => getColumns(columns), [columns])\n      const groups = useMemo(() => getColumnGroups(columns), [columns])\n\n      const columnSorterIcon = (column: Column | string) => {\n        if (getColumnSorterState(getColumnKey(column), sorterState) === 0) {\n          return <span className=\"opacity-25 float-end me-1\">{sortingIcon}</span>\n        }\n\n        if (getColumnSorterState(getColumnKey(column), sorterState) === 'asc') {\n          return <span className=\"float-end me-1\">{sortingIconAscending}</span>\n        }\n\n        if (getColumnSorterState(getColumnKey(column), sorterState) === 'desc') {\n          return <span className=\"float-end me-1\">{sortingIconDescending}</span>\n        }\n\n        return\n      }\n\n      return (\n        <Component {...rest} ref={ref}>\n          {showGroups &&\n            groups &&\n            groups.length > 0 &&\n            groups.map((row, index) => (\n              <CTableRow key={index}>\n                {selectable && <CTableHeaderCell></CTableHeaderCell>}\n                {row.map((cell, index) => (\n                  <CTableHeaderCell\n                    colSpan={cell.colspan}\n                    {...getTableHeaderCellProps(cell)}\n                    key={index}\n                  >\n                    {cell.label}\n                  </CTableHeaderCell>\n                ))}\n              </CTableRow>\n            ))}\n          <CTableRow>\n            {selectable && (\n              <CTableHeaderCell>\n                {selectAll && (\n                  <CFormCheck\n                    checked={typeof selectedAll === 'boolean' ? selectedAll : false}\n                    indeterminate={selectedAll === 'indeterminate' ? true : false}\n                    onChange={() => handleSelectAllChecked && handleSelectAllChecked()}\n                    ref={selectAllcheckboxRef}\n                  />\n                )}\n              </CTableHeaderCell>\n            )}\n            {_columns.map((column: Column | string, index: number) => {\n              const isSortable =\n                columnSorter &&\n                (typeof column === 'object'\n                  ? column.sorter === undefined\n                    ? true\n                    : column.sorter\n                  : true)\n              return (\n                <CTableHeaderCell\n                  {...getTableHeaderCellProps(column)}\n                  style={getTableHeaderCellStyles(column, columnSorter)}\n                  key={index}\n                  {...(isSortable && {\n                    onClick: () => handleSort && handleSort(getColumnKey(column), index),\n                    onKeyDown: (event) => {\n                      if (event.key === 'Enter' && handleSort) {\n                        handleSort(getColumnKey(column), index)\n                      }\n\n                      if (event.key === 'ArrowUp' && handleSort) {\n                        event.preventDefault()\n                        handleSort(getColumnKey(column), index, 'asc')\n                      }\n\n                      if (event.key === 'ArrowDown' && handleSort) {\n                        event.preventDefault()\n                        handleSort(getColumnKey(column), index, 'desc')\n                      }\n                    },\n                    tabIndex: 0,\n                  })}\n                >\n                  <div className=\"d-inline\">{getColumnLabel(column)}</div>\n                  {isSortable && columnSorterIcon(column)}\n                </CTableHeaderCell>\n              )\n            })}\n          </CTableRow>\n          {columnFilter && (\n            <CTableRow>\n              {selectable && <CTableHeaderCell></CTableHeaderCell>}\n              {_columns.map((column: Column | string, index: number) => {\n                return (\n                  <CTableHeaderCell {...getTableHeaderCellProps(column)} key={index}>\n                    {(\n                      typeof column === 'object'\n                        ? column.filter === undefined\n                          ? true\n                          : column.filter\n                        : true\n                    ) ? (\n                      typeof column !== 'string' && typeof column.filter === 'function' ? (\n                        column.filter(\n                          getColumnValues(items, getColumnKey(column)),\n                          (value: any) =>\n                            handleOnCustomFilterChange &&\n                            handleOnCustomFilterChange(getColumnKey(column), value),\n                          columnFilterState && columnFilterState[getColumnKey(column)]\n                            ? columnFilterState[getColumnKey(column)]\n                            : undefined\n                        )\n                      ) : (\n                        <CFormInput\n                          size=\"sm\"\n                          onInput={(event) =>\n                            handleFilterOnInput &&\n                            handleFilterOnInput(\n                              getColumnKey(column),\n                              (event.target as HTMLInputElement).value,\n                            )\n                          }\n                          onChange={(event) =>\n                            handleFilterOnChange &&\n                            handleFilterOnChange(\n                              getColumnKey(column),\n                              (event.target as HTMLInputElement).value,\n                            )\n                          }\n                          value={\n                            columnFilterState && columnFilterState[getColumnKey(column)]\n                              ? columnFilterState[getColumnKey(column)]\n                              : ''\n                          }\n                          aria-label={`column name: '${getColumnLabel(column)}' filter input`}\n                        />\n                      )\n                    ) : (\n                      ''\n                    )}\n                  </CTableHeaderCell>\n                )\n              })}\n            </CTableRow>\n          )}\n        </Component>\n      )\n    },\n  )\n\nCSmartTableHead.propTypes = {\n  as: PropTypes.elementType,\n  columnFilter: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  columnFilterState: PropTypes.object,\n  columnSorter: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  children: PropTypes.node,\n  columns: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.any, PropTypes.string])).isRequired, // TODO: improve this Prop Type,\n  handleOnCustomFilterChange: PropTypes.func,\n  handleFilterOnChange: PropTypes.func,\n  handleFilterOnInput: PropTypes.func,\n  handleSelectAllChecked: PropTypes.func,\n  handleSort: PropTypes.func,\n  items: PropTypes.array,\n  selectable: PropTypes.bool,\n  selectAll: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  selectedAll: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  showGroups: PropTypes.bool,\n  sorterState: PropTypes.array,\n  sortingIcon: PropTypes.node,\n  sortingIconAscending: PropTypes.node,\n  sortingIconDescending: PropTypes.node,\n}\n\nCSmartTableHead.displayName = 'CSmartTableHead'\n"]},"metadata":{},"sourceType":"module"}