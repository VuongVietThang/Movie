{"ast":null,"code":"'use client';\n\nimport { DomHandler } from 'primereact/utils';\n\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n\n  return n;\n}\n\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\n\nfunction _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\n\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _toConsumableArray(r) {\n  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\n\nvar KeyFilter = {\n  /* eslint-disable */\n  DEFAULT_MASKS: {\n    pint: /[\\d]/,\n    \"int\": /[\\d\\-]/,\n    pnum: /[\\d\\.]/,\n    money: /[\\d\\.\\s,]/,\n    num: /[\\d\\-\\.]/,\n    hex: /[0-9a-f]/i,\n    email: /[a-z0-9_\\.\\-@]/i,\n    alpha: /[a-z_]/i,\n    alphanum: /[a-z0-9_]/i\n  },\n\n  /* eslint-enable */\n  getRegex: function getRegex(keyfilter) {\n    return KeyFilter.DEFAULT_MASKS[keyfilter] ? KeyFilter.DEFAULT_MASKS[keyfilter] : keyfilter;\n  },\n  onBeforeInput: function onBeforeInput(e, keyfilter, validateOnly) {\n    // android devices must use beforeinput https://stackoverflow.com/questions/36753548/keycode-on-android-is-always-229\n    if (validateOnly || !DomHandler.isAndroid()) {\n      return;\n    }\n\n    this.validateKey(e, e.data, keyfilter);\n  },\n  onKeyPress: function onKeyPress(e, keyfilter, validateOnly) {\n    // non android devices use keydown\n    if (validateOnly || DomHandler.isAndroid()) {\n      return;\n    }\n\n    if (e.ctrlKey || e.altKey || e.metaKey) {\n      return;\n    }\n\n    this.validateKey(e, e.key, keyfilter);\n  },\n  onPaste: function onPaste(e, keyfilter, validateOnly) {\n    if (validateOnly) {\n      return;\n    }\n\n    var regex = this.getRegex(keyfilter);\n    var clipboard = e.clipboardData.getData('text'); // loop over each letter pasted and if any fail prevent the paste\n\n    _toConsumableArray(clipboard).forEach(function (c) {\n      if (!regex.test(c)) {\n        e.preventDefault();\n        return false;\n      }\n    });\n  },\n  validateKey: function validateKey(e, key, keyfilter) {\n    if (key === null || key === undefined) {\n      return;\n    } // some AZERTY keys come in with 2 chars like ´ç if Dead key is pressed first\n\n\n    var isPrintableKey = key.length <= 2;\n\n    if (!isPrintableKey) {\n      return;\n    }\n\n    var regex = this.getRegex(keyfilter);\n\n    if (!regex.test(key)) {\n      e.preventDefault();\n    }\n  },\n  validate: function validate(e, keyfilter) {\n    var value = e.target.value;\n    var validatePattern = true;\n    var regex = this.getRegex(keyfilter);\n\n    if (value && !regex.test(value)) {\n      validatePattern = false;\n    }\n\n    return validatePattern;\n  }\n};\nexport { KeyFilter };","map":{"version":3,"sources":["C:/wamp64/www/Movie/node_modules/primereact/keyfilter/keyfilter.esm.js"],"names":["DomHandler","_arrayLikeToArray","r","a","length","e","n","Array","_arrayWithoutHoles","isArray","_iterableToArray","Symbol","iterator","from","_unsupportedIterableToArray","t","toString","call","slice","constructor","name","test","_nonIterableSpread","TypeError","_toConsumableArray","KeyFilter","DEFAULT_MASKS","pint","pnum","money","num","hex","email","alpha","alphanum","getRegex","keyfilter","onBeforeInput","validateOnly","isAndroid","validateKey","data","onKeyPress","ctrlKey","altKey","metaKey","key","onPaste","regex","clipboard","clipboardData","getData","forEach","c","preventDefault","undefined","isPrintableKey","validate","value","target","validatePattern"],"mappings":"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","sourcesContent":["'use client';\nimport { DomHandler } from 'primereact/utils';\n\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\n\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\n\nfunction _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\n\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _toConsumableArray(r) {\n  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\n\nvar KeyFilter = {\n  /* eslint-disable */\n  DEFAULT_MASKS: {\n    pint: /[\\d]/,\n    \"int\": /[\\d\\-]/,\n    pnum: /[\\d\\.]/,\n    money: /[\\d\\.\\s,]/,\n    num: /[\\d\\-\\.]/,\n    hex: /[0-9a-f]/i,\n    email: /[a-z0-9_\\.\\-@]/i,\n    alpha: /[a-z_]/i,\n    alphanum: /[a-z0-9_]/i\n  },\n  /* eslint-enable */getRegex: function getRegex(keyfilter) {\n    return KeyFilter.DEFAULT_MASKS[keyfilter] ? KeyFilter.DEFAULT_MASKS[keyfilter] : keyfilter;\n  },\n  onBeforeInput: function onBeforeInput(e, keyfilter, validateOnly) {\n    // android devices must use beforeinput https://stackoverflow.com/questions/36753548/keycode-on-android-is-always-229\n    if (validateOnly || !DomHandler.isAndroid()) {\n      return;\n    }\n    this.validateKey(e, e.data, keyfilter);\n  },\n  onKeyPress: function onKeyPress(e, keyfilter, validateOnly) {\n    // non android devices use keydown\n    if (validateOnly || DomHandler.isAndroid()) {\n      return;\n    }\n    if (e.ctrlKey || e.altKey || e.metaKey) {\n      return;\n    }\n    this.validateKey(e, e.key, keyfilter);\n  },\n  onPaste: function onPaste(e, keyfilter, validateOnly) {\n    if (validateOnly) {\n      return;\n    }\n    var regex = this.getRegex(keyfilter);\n    var clipboard = e.clipboardData.getData('text');\n\n    // loop over each letter pasted and if any fail prevent the paste\n    _toConsumableArray(clipboard).forEach(function (c) {\n      if (!regex.test(c)) {\n        e.preventDefault();\n        return false;\n      }\n    });\n  },\n  validateKey: function validateKey(e, key, keyfilter) {\n    if (key === null || key === undefined) {\n      return;\n    }\n\n    // some AZERTY keys come in with 2 chars like ´ç if Dead key is pressed first\n    var isPrintableKey = key.length <= 2;\n    if (!isPrintableKey) {\n      return;\n    }\n    var regex = this.getRegex(keyfilter);\n    if (!regex.test(key)) {\n      e.preventDefault();\n    }\n  },\n  validate: function validate(e, keyfilter) {\n    var value = e.target.value;\n    var validatePattern = true;\n    var regex = this.getRegex(keyfilter);\n    if (value && !regex.test(value)) {\n      validatePattern = false;\n    }\n    return validatePattern;\n  }\n};\n\nexport { KeyFilter };\n"]},"metadata":{},"sourceType":"module"}