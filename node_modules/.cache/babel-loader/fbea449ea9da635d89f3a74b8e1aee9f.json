{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { CButton } from '../button/CButton.js';\nimport { CSpinner } from '../spinner/CSpinner.js';\nvar CLoadingButton = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      className = _a.className,\n      disabledOnLoading = _a.disabledOnLoading,\n      loading = _a.loading,\n      onClick = _a.onClick,\n      _b = _a.spinnerType,\n      spinnerType = _b === void 0 ? 'border' : _b,\n      timeout = _a.timeout,\n      rest = __rest(_a, [\"children\", \"className\", \"disabledOnLoading\", \"loading\", \"onClick\", \"spinnerType\", \"timeout\"]);\n\n  var _c = useState(),\n      _loading = _c[0],\n      setLoading = _c[1];\n\n  useEffect(function () {\n    setLoading(loading);\n  }, [loading]);\n\n  var handleOnClick = function () {\n    onClick && onClick();\n\n    if (timeout) {\n      setLoading(true);\n      setTimeout(function () {\n        setLoading(false);\n      }, timeout);\n    }\n  };\n\n  return React.createElement(CButton, __assign({\n    className: classNames('btn-loading', _loading && 'is-loading', className)\n  }, disabledOnLoading && _loading && {\n    disabled: true\n  }, {\n    onClick: handleOnClick\n  }, rest, {\n    ref: ref\n  }), React.createElement(CSpinner, {\n    className: \"btn-loading-spinner\",\n    size: \"sm\",\n    variant: spinnerType\n  }), children);\n});\nCLoadingButton.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  disabledOnLoading: PropTypes.bool,\n  loading: PropTypes.bool,\n  onClick: PropTypes.func,\n  spinnerType: PropTypes.oneOf(['border', 'grow']),\n  timeout: PropTypes.number\n};\nCLoadingButton.displayName = 'CLoadingButton';\nexport { CLoadingButton };","map":{"version":3,"mappings":";;;;;;IAiCaA,cAAc,GAAGC,UAAU,CACtC,UACEC,EADF,EAWEC,GAXF,EAWK;AATD,cAAQ,cAAR;AAAA,MACAC,SAAS,eADT;AAAA,MAEAC,iBAAiB,uBAFjB;AAAA,MAGAC,OAAO,aAHP;AAAA,MAIAC,OAAO,aAJP;AAAA,MAKAC,mBALA;AAAA,MAKAC,WAAW,GAAGD,2BAAQA,EALtB;AAAA,MAMAE,OAAO,aANP;AAAA,MAOGC,IAAI,GARTC,0GACE;;AAWI,WAAyBC,QAAQ,EAAjC;AAAA,MAACC,QAAQ,QAAT;AAAA,MAAWC,UAAU,QAArB;;AAENC,WAAS,CAAC;AACRD,cAAU,CAACT,OAAD,CAAV;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;;AAIA,MAAMW,aAAa,GAAG;AACpBV,WAAO,IAAIA,OAAO,EAAlB;;AACA,QAAIG,OAAJ,EAAa;AACXK,gBAAU,CAAC,IAAD,CAAV;AACAG,gBAAU,CAAC;AACTH,kBAAU,CAAC,KAAD,CAAV;AACD,OAFS,EAEPL,OAFO,CAAV;;AAIH,GARD;;AAUA,SACES,KAAC,cAAD,CAACC,OAAD,EACEC;AAAAjB,aAAS,EAAEkB,UAAU,CAAC,aAAD,EAAgBR,QAAQ,IAAI,YAA5B,EAA0CV,SAA1C;AAArB,KACKC,iBAAiB,IAAIS,QAArB,IAAiC;AAAES,YAAQ,EAAE;AAAZ,GADtC,EAEA;AAAAhB,WAAO,EAAEU;AAAT,GAFA,EAGIN,IAHJ,EAIA;AAAAR,OAAG,EAAEA;AAAL,GAJA,CADF,EAOEgB,oBAACK,QAAD,EAAS;AAACpB,aAAS,EAAC,qBAAX;AAAiCqB,QAAI,EAAC,IAAtC;AAA2CC,WAAO,EAAEjB;AAApD,GAAT,CAPF,EAQGkB,QARH,CADF;AAYD,CA1CqC;AA6CxC3B,cAAc,CAAC4B,SAAf,GAA2B;AACzBD,UAAQ,EAAEE,SAAS,CAACC,IADK;AAEzB1B,WAAS,EAAEyB,SAAS,CAACE,MAFI;AAGzB1B,mBAAiB,EAAEwB,SAAS,CAACG,IAHJ;AAIzB1B,SAAO,EAAEuB,SAAS,CAACG,IAJM;AAKzBzB,SAAO,EAAEsB,SAAS,CAACI,IALM;AAMzBxB,aAAW,EAAEoB,SAAS,CAACK,KAAV,CAAgB,CAAC,QAAD,EAAW,MAAX,CAAhB,CANY;AAOzBxB,SAAO,EAAEmB,SAAS,CAACM;AAPM,CAA3B;AAUAnC,cAAc,CAACoC,WAAf,GAA6B,gBAA7B","names":["CLoadingButton","forwardRef","_a","ref","className","disabledOnLoading","loading","onClick","_b","spinnerType","timeout","rest","__rest","useState","_loading","setLoading","useEffect","handleOnClick","setTimeout","React","CButton","__assign","classNames","disabled","CSpinner","size","variant","children","propTypes","PropTypes","node","string","bool","func","oneOf","number","displayName"],"sources":["C:\\wamp64\\www\\Movie-react\\node_modules\\@coreui\\react-pro\\src\\components\\loading-button\\CLoadingButton.tsx"],"sourcesContent":["import React, { useEffect, useState, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { CButton, CButtonProps } from './../button/CButton'\nimport { CSpinner } from './../spinner/CSpinner'\n\nexport interface CLoadingButtonProps extends CButtonProps {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Makes button disabled when loading.\n   */\n  disabledOnLoading?: boolean\n  /**\n   * Loading state (set to true to start animation).\n   */\n  loading?: boolean\n  /**\n   * @ignore\n   */\n  onClick?: () => void\n  /**\n   * Sets type of spinner.\n   */\n  spinnerType?: 'border' | 'grow'\n  /**\n   * Automatically starts loading animation and stops after a determined amount of milliseconds.\n   */\n  timeout?: number\n}\n\nexport const CLoadingButton = forwardRef<HTMLButtonElement, CLoadingButtonProps>(\n  (\n    {\n      children,\n      className,\n      disabledOnLoading,\n      loading,\n      onClick,\n      spinnerType = 'border',\n      timeout,\n      ...rest\n    },\n    ref,\n  ) => {\n    const [_loading, setLoading] = useState<boolean>()\n\n    useEffect(() => {\n      setLoading(loading)\n    }, [loading])\n\n    const handleOnClick = () => {\n      onClick && onClick()\n      if (timeout) {\n        setLoading(true)\n        setTimeout(() => {\n          setLoading(false)\n        }, timeout)\n      }\n    }\n\n    return (\n      <CButton\n        className={classNames('btn-loading', _loading && 'is-loading', className)}\n        {...(disabledOnLoading && _loading && { disabled: true })}\n        onClick={handleOnClick}\n        {...rest}\n        ref={ref}\n      >\n        <CSpinner className=\"btn-loading-spinner\" size=\"sm\" variant={spinnerType} />\n        {children}\n      </CButton>\n    )\n  },\n)\n\nCLoadingButton.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  disabledOnLoading: PropTypes.bool,\n  loading: PropTypes.bool,\n  onClick: PropTypes.func,\n  spinnerType: PropTypes.oneOf(['border', 'grow']),\n  timeout: PropTypes.number,\n}\n\nCLoadingButton.displayName = 'CLoadingButton'\n"]},"metadata":{},"sourceType":"module"}