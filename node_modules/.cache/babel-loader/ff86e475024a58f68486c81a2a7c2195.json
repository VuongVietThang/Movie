{"ast":null,"code":"import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { useForkedRef } from '../../hooks/useForkedRef.js';\nimport '@popperjs/core';\nimport Transition from '../../node_modules/react-transition-group/esm/Transition.js';\nvar CTabPane = forwardRef(function (_a, ref) {\n  var children = _a.children,\n      className = _a.className,\n      onHide = _a.onHide,\n      onShow = _a.onShow,\n      _b = _a.transition,\n      transition = _b === void 0 ? true : _b,\n      visible = _a.visible,\n      rest = __rest(_a, [\"children\", \"className\", \"onHide\", \"onShow\", \"transition\", \"visible\"]);\n\n  var tabPaneRef = useRef(null);\n  var forkedRef = useForkedRef(ref, tabPaneRef);\n  return React.createElement(Transition, {\n    in: visible,\n    nodeRef: tabPaneRef,\n    onEnter: onShow,\n    onExit: onHide,\n    timeout: 150\n  }, function (state) {\n    return React.createElement(\"div\", __assign({\n      className: classNames('tab-pane', {\n        active: visible,\n        fade: transition,\n        show: state === 'entered'\n      }, className)\n    }, rest, {\n      ref: forkedRef\n    }), children);\n  });\n});\nCTabPane.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  onHide: PropTypes.func,\n  onShow: PropTypes.func,\n  transition: PropTypes.bool,\n  visible: PropTypes.bool\n};\nCTabPane.displayName = 'CTabPane';\nexport { CTabPane };","map":{"version":3,"mappings":";;;;;;;IAgCaA,QAAQ,GAAGC,UAAU,CAChC,UAACC,EAAD,EAA+EC,GAA/E,EAAkF;AAA/E,cAAQ,cAAR;AAAA,MAAUC,SAAS,eAAnB;AAAA,MAAqBC,MAAM,YAA3B;AAAA,MAA6BC,MAAM,YAAnC;AAAA,MAAqCC,kBAArC;AAAA,MAAqCC,UAAU,GAAGD,uBAAIA,EAAtD;AAAA,MAAwDE,OAAO,aAA/D;AAAA,MAAoEC,IAAI,GAA1EC,kFAAE;;AACD,MAAMC,UAAU,GAAGC,MAAM,CAAC,IAAD,CAAzB;AACA,MAAMC,SAAS,GAAGC,YAAY,CAACZ,GAAD,EAAMS,UAAN,CAA9B;AAEA,SACEI,oBAACC,UAAD,EAAW;AAACC,MAAE,EAAET,OAAL;AAAcU,WAAO,EAAEP,UAAvB;AAAmCQ,WAAO,EAAEd,MAA5C;AAAoDe,UAAM,EAAEhB,MAA5D;AAAoEiB,WAAO,EAAE;AAA7E,GAAX,EACG,UAACC,KAAD,EAAM;AAAK,WACVP;AACEZ,eAAS,EAAEoB,UAAU,CACnB,UADmB,EAEnB;AACEC,cAAM,EAAEhB,OADV;AAEEiB,YAAI,EAAElB,UAFR;AAGEmB,YAAI,EAAEJ,KAAK,KAAK;AAHlB,OAFmB,EAOnBnB,SAPmB;AADvB,OAUMM,IAVN,EAUU;AACRP,SAAG,EAAEW;AADG,KAVV,GAaGc,QAbH,CADU;AAgBX,GAjBH,CADF;AAqBD,CA1B+B;AA6BlC5B,QAAQ,CAAC6B,SAAT,GAAqB;AACnBD,UAAQ,EAAEE,SAAS,CAACC,IADD;AAEnB3B,WAAS,EAAE0B,SAAS,CAACE,MAFF;AAGnB3B,QAAM,EAAEyB,SAAS,CAACG,IAHC;AAInB3B,QAAM,EAAEwB,SAAS,CAACG,IAJC;AAKnBzB,YAAU,EAAEsB,SAAS,CAACI,IALH;AAMnBzB,SAAO,EAAEqB,SAAS,CAACI;AANA,CAArB;AASAlC,QAAQ,CAACmC,WAAT,GAAuB,UAAvB","names":["CTabPane","forwardRef","_a","ref","className","onHide","onShow","_b","transition","visible","rest","__rest","tabPaneRef","useRef","forkedRef","useForkedRef","React","Transition","in","nodeRef","onEnter","onExit","timeout","state","classNames","active","fade","show","children","propTypes","PropTypes","node","string","func","bool","displayName"],"sources":["C:\\wamp64\\www\\Movie\\node_modules\\@coreui\\react\\src\\components\\tabs\\CTabPane.tsx"],"sourcesContent":["import React, { HTMLAttributes, forwardRef, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { Transition } from 'react-transition-group'\n\nimport { useForkedRef } from '../../hooks'\n\nexport interface CTabPaneProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Callback fired when the component requests to be hidden.\n   */\n  onHide?: () => void\n  /**\n   * Callback fired when the component requests to be shown.\n   */\n  onShow?: () => void\n  /**\n   * Enable fade in and fade out transition.\n   *\n   * @since 5.1.0\n   */\n  transition?: boolean\n  /**\n   * Toggle the visibility of component.\n   */\n  visible?: boolean\n}\n\nexport const CTabPane = forwardRef<HTMLDivElement, CTabPaneProps>(\n  ({ children, className, onHide, onShow, transition = true, visible, ...rest }, ref) => {\n    const tabPaneRef = useRef(null)\n    const forkedRef = useForkedRef(ref, tabPaneRef)\n\n    return (\n      <Transition in={visible} nodeRef={tabPaneRef} onEnter={onShow} onExit={onHide} timeout={150}>\n        {(state) => (\n          <div\n            className={classNames(\n              'tab-pane',\n              {\n                active: visible,\n                fade: transition,\n                show: state === 'entered',\n              },\n              className,\n            )}\n            {...rest}\n            ref={forkedRef}\n          >\n            {children}\n          </div>\n        )}\n      </Transition>\n    )\n  },\n)\n\nCTabPane.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  onHide: PropTypes.func,\n  onShow: PropTypes.func,\n  transition: PropTypes.bool,\n  visible: PropTypes.bool,\n}\n\nCTabPane.displayName = 'CTabPane'\n"]},"metadata":{},"sourceType":"module"}